package dwrite
import win32 "core:sys/windows"
import "vendor:directx/dxgi"
import "vendor:directx/d3d11"

LOGFONTA :: struct {} // Use the LOGFONTW functions instead.
FONTSIGNATURE :: struct {
  Usb: [4]win32.DWORD,
  Csv: [4]win32.DWORD,
}

IWICBitmapSource :: struct { #subtype parent: win32.IUnknown }
IWICBitmap :: struct { #subtype parent: win32.IUnknown }
IWICColorContext :: struct { #subtype parent: win32.IUnknown }
IWICImagingFactory :: struct { #subtype parent: win32.IUnknown }
IPrintDocumentPackageTarget :: struct { #subtype parent: win32.IUnknown }

foreign import "system:dwrite.lib"
@(default_calling_convention="system")
foreign dwrite {
	DWriteCreateFactory :: proc(factoryType: DWRITE_FACTORY_TYPE, iid: ^win32.GUID, factory: ^rawptr) -> win32.HRESULT ---
}

foreign import "system:d2d1.lib"
@(default_calling_convention="system")
foreign d2d1 {
	D2D1ComputeMaximumScaleFactor :: proc(_matrix: ^D2D_MATRIX_3X2_F) -> f32 ---
	D2D1ConvertColorSpace :: proc(sourceColorSpace: D2D1_COLOR_SPACE, destinationColorSpace: D2D1_COLOR_SPACE, color: ^D2D1_COLOR_F) -> D2D1_COLOR_F ---
	D2D1CreateDevice :: proc(dxgiDevice: ^dxgi.IDevice, creationProperties: ^D2D1_CREATION_PROPERTIES, d2dDevice: ^^ID2D1Device) -> win32.HRESULT ---
	D2D1CreateDeviceContext :: proc(dxgiSurface: ^dxgi.ISurface, creationProperties: ^D2D1_CREATION_PROPERTIES, d2dDeviceContext: ^^ID2D1DeviceContext) -> win32.HRESULT ---
	D2D1CreateFactory :: proc(factoryType: D2D1_FACTORY_TYPE, riid: ^win32.GUID, pFactoryOptions: ^D2D1_FACTORY_OPTIONS, ppIFactory: ^rawptr) -> win32.HRESULT ---
	D2D1GetGradientMeshInteriorPointsFromCoonsPatch :: proc(pPoint0: ^D2D_POINT_2F, pPoint1: ^D2D_POINT_2F, pPoint2: ^D2D_POINT_2F, pPoint3: ^D2D_POINT_2F, pPoint4: ^D2D_POINT_2F, pPoint5: ^D2D_POINT_2F, pPoint6: ^D2D_POINT_2F, pPoint7: ^D2D_POINT_2F, pPoint8: ^D2D_POINT_2F, pPoint9: ^D2D_POINT_2F, pPoint10: ^D2D_POINT_2F, pPoint11: ^D2D_POINT_2F, pTensorPoint11: ^D2D_POINT_2F, pTensorPoint12: ^D2D_POINT_2F, pTensorPoint21: ^D2D_POINT_2F, pTensorPoint22: ^D2D_POINT_2F) ---
	D2D1InvertMatrix :: proc(_matrix: ^D2D_MATRIX_3X2_F) -> win32.BOOL ---
	D2D1IsMatrixInvertible :: proc(_matrix: ^D2D_MATRIX_3X2_F) -> win32.BOOL ---
	D2D1MakeRotateMatrix :: proc(angle: f32, center: D2D_POINT_2F, _matrix: ^D2D_MATRIX_3X2_F) ---
	D2D1MakeSkewMatrix :: proc(angleX: f32, angleY: f32, center: D2D_POINT_2F, _matrix: ^D2D_MATRIX_3X2_F) ---
	D2D1SinCos :: proc(angle: f32, s: ^f32, c: ^f32) ---
	D2D1Tan :: proc(angle: f32) -> f32 ---
	D2D1Vec3Length :: proc(x: f32, y: f32, z: f32) -> f32 ---
}

CLSID_D2D12DAffineTransform := &win32.IID{0x6aa97485, 0x6354, 0x4cfc, {0x90, 0x8c, 0xe4, 0xa7, 0x4f, 0x62, 0xc9, 0x6c}}
CLSID_D2D13DPerspectiveTransform := &win32.IID{0xc2844d0b, 0x3d86, 0x46e7, {0x85, 0xba, 0x52, 0x6c, 0x92, 0x40, 0xf3, 0xfb}}
CLSID_D2D13DTransform := &win32.IID{0xe8467b04, 0xec61, 0x4b8a, {0xb5, 0xde, 0xd4, 0xd7, 0x3d, 0xeb, 0xea, 0x5a}}
CLSID_D2D1AlphaMask := &win32.IID{0xc80ecff0, 0x3fd5, 0x4f05, {0x83, 0x28, 0xc5, 0xd1, 0x72, 0x4b, 0x4f, 0x0a}}
CLSID_D2D1ArithmeticComposite := &win32.IID{0xfc151437, 0x049a, 0x4784, {0xa2, 0x4a, 0xf1, 0xc4, 0xda, 0xf2, 0x09, 0x87}}
CLSID_D2D1Atlas := &win32.IID{0x913e2be4, 0xfdcf, 0x4fe2, {0xa5, 0xf0, 0x24, 0x54, 0xf1, 0x4f, 0xf4, 0x08}}
CLSID_D2D1BitmapSource := &win32.IID{0x5fb6c24d, 0xc6dd, 0x4231, {0x94, 0x04, 0x50, 0xf4, 0xd5, 0xc3, 0x25, 0x2d}}
CLSID_D2D1Blend := &win32.IID{0x81c5b77b, 0x13f8, 0x4cdd, {0xad, 0x20, 0xc8, 0x90, 0x54, 0x7a, 0xc6, 0x5d}}
CLSID_D2D1Border := &win32.IID{0x2a2d49c0, 0x4acf, 0x43c7, {0x8c, 0x6a, 0x7c, 0x4a, 0x27, 0x87, 0x4d, 0x27}}
CLSID_D2D1Brightness := &win32.IID{0x8cea8d1e, 0x77b0, 0x4986, {0xb3, 0xb9, 0x2f, 0x0c, 0x0e, 0xae, 0x78, 0x87}}
CLSID_D2D1ChromaKey := &win32.IID{0x74c01f5b, 0x2a0d, 0x408c, {0x88, 0xe2, 0xc7, 0xa3, 0xc7, 0x19, 0x77, 0x42}}
CLSID_D2D1ColorManagement := &win32.IID{0x1a28524c, 0xfdd6, 0x4aa4, {0xae, 0x8f, 0x83, 0x7e, 0xb8, 0x26, 0x7b, 0x37}}
CLSID_D2D1ColorMatrix := &win32.IID{0x921f03d6, 0x641c, 0x47df, {0x85, 0x2d, 0xb4, 0xbb, 0x61, 0x53, 0xae, 0x11}}
CLSID_D2D1Composite := &win32.IID{0x48fc9f51, 0xf6ac, 0x48f1, {0x8b, 0x58, 0x3b, 0x28, 0xac, 0x46, 0xf7, 0x6d}}
CLSID_D2D1Contrast := &win32.IID{0xb648a78a, 0x0ed5, 0x4f80, {0xa9, 0x4a, 0x8e, 0x82, 0x5a, 0xca, 0x6b, 0x77}}
CLSID_D2D1ConvolveMatrix := &win32.IID{0x407f8c08, 0x5533, 0x4331, {0xa3, 0x41, 0x23, 0xcc, 0x38, 0x77, 0x84, 0x3e}}
CLSID_D2D1Crop := &win32.IID{0xe23f7110, 0x0e9a, 0x4324, {0xaf, 0x47, 0x6a, 0x2c, 0x0c, 0x46, 0xf3, 0x5b}}
CLSID_D2D1CrossFade := &win32.IID{0x12f575e8, 0x4db1, 0x485f, {0x9a, 0x84, 0x03, 0xa0, 0x7d, 0xd3, 0x82, 0x9f}}
CLSID_D2D1DirectionalBlur := &win32.IID{0x174319a6, 0x58e9, 0x49b2, {0xbb, 0x63, 0xca, 0xf2, 0xc8, 0x11, 0xa3, 0xdb}}
CLSID_D2D1DiscreteTransfer := &win32.IID{0x90866fcd, 0x488e, 0x454b, {0xaf, 0x06, 0xe5, 0x04, 0x1b, 0x66, 0xc3, 0x6c}}
CLSID_D2D1DisplacementMap := &win32.IID{0xedc48364, 0x0417, 0x4111, {0x94, 0x50, 0x43, 0x84, 0x5f, 0xa9, 0xf8, 0x90}}
CLSID_D2D1DistantDiffuse := &win32.IID{0x3e7efd62, 0xa32d, 0x46d4, {0xa8, 0x3c, 0x52, 0x78, 0x88, 0x9a, 0xc9, 0x54}}
CLSID_D2D1DistantSpecular := &win32.IID{0x428c1ee5, 0x77b8, 0x4450, {0x8a, 0xb5, 0x72, 0x21, 0x9c, 0x21, 0xab, 0xda}}
CLSID_D2D1DpiCompensation := &win32.IID{0x6c26c5c7, 0x34e0, 0x46fc, {0x9c, 0xfd, 0xe5, 0x82, 0x37, 0x06, 0xe2, 0x28}}
CLSID_D2D1EdgeDetection := &win32.IID{0xeff583ca, 0xcb07, 0x4aa9, {0xac, 0x5d, 0x2c, 0xc4, 0x4c, 0x76, 0x46, 0x0f}}
CLSID_D2D1Emboss := &win32.IID{0xb1c5eb2b, 0x0348, 0x43f0, {0x81, 0x07, 0x49, 0x57, 0xca, 0xcb, 0xa2, 0xae}}
CLSID_D2D1Exposure := &win32.IID{0xb56c8cfa, 0xf634, 0x41ee, {0xbe, 0xe0, 0xff, 0xa6, 0x17, 0x10, 0x60, 0x04}}
CLSID_D2D1Flood := &win32.IID{0x61c23c20, 0xae69, 0x4d8e, {0x94, 0xcf, 0x50, 0x07, 0x8d, 0xf6, 0x38, 0xf2}}
CLSID_D2D1GammaTransfer := &win32.IID{0x409444c4, 0xc419, 0x41a0, {0xb0, 0xc1, 0x8c, 0xd0, 0xc0, 0xa1, 0x8e, 0x42}}
CLSID_D2D1GaussianBlur := &win32.IID{0x1feb6d69, 0x2fe6, 0x4ac9, {0x8c, 0x58, 0x1d, 0x7f, 0x93, 0xe7, 0xa6, 0xa5}}
CLSID_D2D1Grayscale := &win32.IID{0x36dde0eb, 0x3725, 0x42e0, {0x83, 0x6d, 0x52, 0xfb, 0x20, 0xae, 0xe6, 0x44}}
CLSID_D2D1HdrToneMap := &win32.IID{0x7b0b748d, 0x4610, 0x4486, {0xa9, 0x0c, 0x99, 0x9d, 0x9a, 0x2e, 0x2b, 0x11}}
CLSID_D2D1HighlightsShadows := &win32.IID{0xcadc8384, 0x323f, 0x4c7e, {0xa3, 0x61, 0x2e, 0x2b, 0x24, 0xdf, 0x6e, 0xe4}}
CLSID_D2D1Histogram := &win32.IID{0x881db7d0, 0xf7ee, 0x4d4d, {0xa6, 0xd2, 0x46, 0x97, 0xac, 0xc6, 0x6e, 0xe8}}
CLSID_D2D1HueRotation := &win32.IID{0x0f4458ec, 0x4b32, 0x491b, {0x9e, 0x85, 0xbd, 0x73, 0xf4, 0x4d, 0x3e, 0xb6}}
CLSID_D2D1HueToRgb := &win32.IID{0x7b78a6bd, 0x0141, 0x4def, {0x8a, 0x52, 0x63, 0x56, 0xee, 0x0c, 0xbd, 0xd5}}
CLSID_D2D1Invert := &win32.IID{0xe0c3784d, 0xcb39, 0x4e84, {0xb6, 0xfd, 0x6b, 0x72, 0xf0, 0x81, 0x02, 0x63}}
CLSID_D2D1LinearTransfer := &win32.IID{0xad47c8fd, 0x63ef, 0x4acc, {0x9b, 0x51, 0x67, 0x97, 0x9c, 0x03, 0x6c, 0x06}}
CLSID_D2D1LookupTable3D := &win32.IID{0x349e0eda, 0x0088, 0x4a79, {0x9c, 0xa3, 0xc7, 0xe3, 0x00, 0x20, 0x20, 0x20}}
CLSID_D2D1LuminanceToAlpha := &win32.IID{0x41251ab7, 0x0beb, 0x46f8, {0x9d, 0xa7, 0x59, 0xe9, 0x3f, 0xcc, 0xe5, 0xde}}
CLSID_D2D1Morphology := &win32.IID{0xeae6c40d, 0x626a, 0x4c2d, {0xbf, 0xcb, 0x39, 0x10, 0x01, 0xab, 0xe2, 0x02}}
CLSID_D2D1Opacity := &win32.IID{0x811d79a4, 0xde28, 0x4454, {0x80, 0x94, 0xc6, 0x46, 0x85, 0xf8, 0xbd, 0x4c}}
CLSID_D2D1OpacityMetadata := &win32.IID{0x6c53006a, 0x4450, 0x4199, {0xaa, 0x5b, 0xad, 0x16, 0x56, 0xfe, 0xce, 0x5e}}
CLSID_D2D1PointDiffuse := &win32.IID{0xb9e303c3, 0xc08c, 0x4f91, {0x8b, 0x7b, 0x38, 0x65, 0x6b, 0xc4, 0x8c, 0x20}}
CLSID_D2D1PointSpecular := &win32.IID{0x09c3ca26, 0x3ae2, 0x4f09, {0x9e, 0xbc, 0xed, 0x38, 0x65, 0xd5, 0x3f, 0x22}}
CLSID_D2D1Posterize := &win32.IID{0x2188945e, 0x33a3, 0x4366, {0xb7, 0xbc, 0x08, 0x6b, 0xd0, 0x2d, 0x08, 0x84}}
CLSID_D2D1Premultiply := &win32.IID{0x06eab419, 0xdeed, 0x4018, {0x80, 0xd2, 0x3e, 0x1d, 0x47, 0x1a, 0xde, 0xb2}}
CLSID_D2D1RgbToHue := &win32.IID{0x23f3e5ec, 0x91e8, 0x4d3d, {0xad, 0x0a, 0xaf, 0xad, 0xc1, 0x00, 0x4a, 0xa1}}
CLSID_D2D1Saturation := &win32.IID{0x5cb2d9cf, 0x327d, 0x459f, {0xa0, 0xce, 0x40, 0xc0, 0xb2, 0x08, 0x6b, 0xf7}}
CLSID_D2D1Scale := &win32.IID{0x9daf9369, 0x3846, 0x4d0e, {0xa4, 0x4e, 0x0c, 0x60, 0x79, 0x34, 0xa5, 0xd7}}
CLSID_D2D1Sepia := &win32.IID{0x3a1af410, 0x5f1d, 0x4dbe, {0x84, 0xdf, 0x91, 0x5d, 0xa7, 0x9b, 0x71, 0x53}}
CLSID_D2D1Shadow := &win32.IID{0xc67ea361, 0x1863, 0x4e69, {0x89, 0xdb, 0x69, 0x5d, 0x3e, 0x9a, 0x5b, 0x6b}}
CLSID_D2D1Sharpen := &win32.IID{0xc9b887cb, 0xc5ff, 0x4dc5, {0x97, 0x79, 0x27, 0x3d, 0xcf, 0x41, 0x7c, 0x7d}}
CLSID_D2D1SpotDiffuse := &win32.IID{0x818a1105, 0x7932, 0x44f4, {0xaa, 0x86, 0x08, 0xae, 0x7b, 0x2f, 0x2c, 0x93}}
CLSID_D2D1SpotSpecular := &win32.IID{0xedae421e, 0x7654, 0x4a37, {0x9d, 0xb8, 0x71, 0xac, 0xc1, 0xbe, 0xb3, 0xc1}}
CLSID_D2D1Straighten := &win32.IID{0x4da47b12, 0x79a3, 0x4fb0, {0x82, 0x37, 0xbb, 0xc3, 0xb2, 0xa4, 0xde, 0x08}}
CLSID_D2D1TableTransfer := &win32.IID{0x5bf818c3, 0x5e43, 0x48cb, {0xb6, 0x31, 0x86, 0x83, 0x96, 0xd6, 0xa1, 0xd4}}
CLSID_D2D1TemperatureTint := &win32.IID{0x89176087, 0x8af9, 0x4a08, {0xae, 0xb1, 0x89, 0x5f, 0x38, 0xdb, 0x17, 0x66}}
CLSID_D2D1Tile := &win32.IID{0xb0784138, 0x3b76, 0x4bc5, {0xb1, 0x3b, 0x0f, 0xa2, 0xad, 0x02, 0x65, 0x9f}}
CLSID_D2D1Tint := &win32.IID{0x36312b17, 0xf7dd, 0x4014, {0x91, 0x5d, 0xff, 0xca, 0x76, 0x8c, 0xf2, 0x11}}
CLSID_D2D1Turbulence := &win32.IID{0xcf2bb6ae, 0x889a, 0x4ad7, {0xba, 0x29, 0xa2, 0xfd, 0x73, 0x2c, 0x9f, 0xc9}}
CLSID_D2D1UnPremultiply := &win32.IID{0xfb9ac489, 0xad8d, 0x41ed, {0x99, 0x99, 0xbb, 0x63, 0x47, 0xd1, 0x10, 0xf7}}
CLSID_D2D1Vignette := &win32.IID{0xc00c40be, 0x5e67, 0x4ca3, {0x95, 0xb4, 0xf4, 0xb0, 0x2c, 0x11, 0x51, 0x35}}
CLSID_D2D1WhiteLevelAdjustment := &win32.IID{0x44a1cadb, 0x6cdd, 0x4818, {0x8f, 0xf4, 0x26, 0xc1, 0xcf, 0xe9, 0x5b, 0xdb}}
CLSID_D2D1YCbCr := &win32.IID{0x99503cc1, 0x66c7, 0x45c9, {0xa8, 0x75, 0x8a, 0xd8, 0xa7, 0x91, 0x44, 0x01}}
D2D1_APPEND_ALIGNED_ELEMENT :: 4294967295
D2D1_DEFAULT_FLATTENING_TOLERANCE :: 0.25
D2D1_SCENE_REFERRED_SDR_WHITE_LEVEL :: 80
DWRITE_ALPHA_MAX :: 255
DWRITE_E_DOWNLOADCANCELLED :: transmute(win32.HRESULT)u32(0x8898500e)
DWRITE_E_DOWNLOADFAILED :: transmute(win32.HRESULT)u32(0x8898500f)
DWRITE_E_REMOTEFONT :: transmute(win32.HRESULT)u32(0x8898500d)
DWRITE_E_TOOMANYDOWNLOADS :: transmute(win32.HRESULT)u32(0x88985010)
DWRITE_ERR_BASE :: 20480
DWRITE_STANDARD_FONT_AXIS_COUNT :: 5
FACILITY_D2D :: 2201
FACILITY_DWRITE :: 2200

PD2D1_EFFECT_FACTORY :: #type proc "system" (effectImpl: ^^win32.IUnknown) -> win32.HRESULT
PD2D1_PROPERTY_GET_FUNCTION :: #type proc "system" (effect: ^win32.IUnknown, data: ^u8, dataSize: u32, actualSize: ^u32) -> win32.HRESULT
PD2D1_PROPERTY_SET_FUNCTION :: #type proc "system" (effect: ^win32.IUnknown, data: ^u8, dataSize: u32) -> win32.HRESULT

D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_2DAFFINETRANSFORM_PROP :: enum i32 {
	INTERPOLATION_MODE = 0,
	BORDER_MODE = 1,
	TRANSFORM_MATRIX = 2,
	SHARPNESS = 3,
}

D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
}

D2D1_3DPERSPECTIVETRANSFORM_PROP :: enum i32 {
	INTERPOLATION_MODE = 0,
	BORDER_MODE = 1,
	DEPTH = 2,
	PERSPECTIVE_ORIGIN = 3,
	LOCAL_OFFSET = 4,
	GLOBAL_OFFSET = 5,
	ROTATION_ORIGIN = 6,
	ROTATION = 7,
}

D2D1_3DTRANSFORM_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
}

D2D1_3DTRANSFORM_PROP :: enum i32 {
	INTERPOLATION_MODE = 0,
	BORDER_MODE = 1,
	TRANSFORM_MATRIX = 2,
}

D2D1_ALPHA_MODE :: enum i32 {
	UNKNOWN = 0,
	PREMULTIPLIED = 1,
	STRAIGHT = 2,
	IGNORE = 3,
}

D2D1_ANTIALIAS_MODE :: enum i32 {
	PER_PRIMITIVE = 0,
	ALIASED = 1,
}

D2D1_ARC_SIZE :: enum i32 {
	SMALL = 0,
	LARGE = 1,
}

D2D1_ARITHMETICCOMPOSITE_PROP :: enum i32 {
	COEFFICIENTS = 0,
	CLAMP_OUTPUT = 1,
}

D2D1_ATLAS_PROP :: enum i32 {
	INPUT_RECT = 0,
	INPUT_PADDING_RECT = 1,
}

D2D1_BITMAP_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
}

D2D1_BITMAP_OPTIONS :: enum i32 {
	NONE = 0,
	TARGET = 1,
	CANNOT_DRAW = 2,
	CPU_READ = 4,
	GDI_COMPATIBLE = 8,
}

D2D1_BITMAPSOURCE_ALPHA_MODE :: enum i32 {
	PREMULTIPLIED = 1,
	STRAIGHT = 2,
}

D2D1_BITMAPSOURCE_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	FANT = 6,
	MIPMAP_LINEAR = 7,
}

D2D1_BITMAPSOURCE_ORIENTATION :: enum i32 {
	DEFAULT = 1,
	FLIP_HORIZONTAL = 2,
	ROTATE_CLOCKWISE180 = 3,
	ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4,
	ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 5,
	ROTATE_CLOCKWISE90 = 6,
	ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 7,
	ROTATE_CLOCKWISE270 = 8,
}

D2D1_BITMAPSOURCE_PROP :: enum i32 {
	WIC_BITMAP_SOURCE = 0,
	SCALE = 1,
	INTERPOLATION_MODE = 2,
	ENABLE_DPI_CORRECTION = 3,
	ALPHA_MODE = 4,
	ORIENTATION = 5,
}

D2D1_BLEND :: enum i32 {
	ZERO = 1,
	ONE = 2,
	SRC_COLOR = 3,
	INV_SRC_COLOR = 4,
	SRC_ALPHA = 5,
	INV_SRC_ALPHA = 6,
	DEST_ALPHA = 7,
	INV_DEST_ALPHA = 8,
	DEST_COLOR = 9,
	INV_DEST_COLOR = 10,
	SRC_ALPHA_SAT = 11,
	BLEND_FACTOR = 14,
	INV_BLEND_FACTOR = 15,
}

D2D1_BLEND_MODE :: enum i32 {
	MULTIPLY = 0,
	SCREEN = 1,
	DARKEN = 2,
	LIGHTEN = 3,
	DISSOLVE = 4,
	COLOR_BURN = 5,
	LINEAR_BURN = 6,
	DARKER_COLOR = 7,
	LIGHTER_COLOR = 8,
	COLOR_DODGE = 9,
	LINEAR_DODGE = 10,
	OVERLAY = 11,
	SOFT_LIGHT = 12,
	HARD_LIGHT = 13,
	VIVID_LIGHT = 14,
	LINEAR_LIGHT = 15,
	PIN_LIGHT = 16,
	HARD_MIX = 17,
	DIFFERENCE = 18,
	EXCLUSION = 19,
	HUE = 20,
	SATURATION = 21,
	COLOR = 22,
	LUMINOSITY = 23,
	SUBTRACT = 24,
	DIVISION = 25,
}

D2D1_BLEND_OPERATION :: enum i32 {
	ADD = 1,
	SUBTRACT = 2,
	REV_SUBTRACT = 3,
	MIN = 4,
	MAX = 5,
}

D2D1_BLEND_PROP :: enum i32 {
	MODE = 0,
}

D2D1_BORDER_EDGE_MODE :: enum i32 {
	CLAMP = 0,
	WRAP = 1,
	MIRROR = 2,
}

D2D1_BORDER_MODE :: enum i32 {
	SOFT = 0,
	HARD = 1,
}

D2D1_BORDER_PROP :: enum i32 {
	EDGE_MODE_X = 0,
	EDGE_MODE_Y = 1,
}

D2D1_BRIGHTNESS_PROP :: enum i32 {
	WHITE_POINT = 0,
	BLACK_POINT = 1,
}

D2D1_BUFFER_PRECISION :: enum i32 {
	UNKNOWN = 0,
	_8BPC_UNORM = 1,
	_8BPC_UNORM_SRGB = 2,
	_16BPC_UNORM = 3,
	_16BPC_FLOAT = 4,
	_32BPC_FLOAT = 5,
}

D2D1_CAP_STYLE :: enum i32 {
	FLAT = 0,
	SQUARE = 1,
	ROUND = 2,
	TRIANGLE = 3,
}

D2D1_CHANGE_TYPE :: enum i32 {
	NONE = 0,
	PROPERTIES = 1,
	CONTEXT = 2,
	GRAPH = 3,
}

D2D1_CHANNEL_DEPTH :: enum i32 {
	DEFAULT = 0,
	_1 = 1,
	_4 = 4,
}

D2D1_CHANNEL_SELECTOR :: enum i32 {
	R = 0,
	G = 1,
	B = 2,
	A = 3,
}

D2D1_CHROMAKEY_PROP :: enum i32 {
	COLOR = 0,
	TOLERANCE = 1,
	INVERT_ALPHA = 2,
	FEATHER = 3,
}

D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION :: enum i32 {
	DEFAULT = 0,
	DISABLE = 1,
}

D2D1_COLOR_CONTEXT_TYPE :: enum i32 {
	ICC = 0,
	SIMPLE = 1,
	DXGI = 2,
}

D2D1_COLOR_INTERPOLATION_MODE :: enum i32 {
	STRAIGHT = 0,
	PREMULTIPLIED = 1,
}

D2D1_COLOR_SPACE :: enum i32 {
	CUSTOM = 0,
	SRGB = 1,
	SCRGB = 2,
}

D2D1_COLORMANAGEMENT_ALPHA_MODE :: enum i32 {
	PREMULTIPLIED = 1,
	STRAIGHT = 2,
}

D2D1_COLORMANAGEMENT_PROP :: enum i32 {
	SOURCE_COLOR_CONTEXT = 0,
	SOURCE_RENDERING_INTENT = 1,
	DESTINATION_COLOR_CONTEXT = 2,
	DESTINATION_RENDERING_INTENT = 3,
	ALPHA_MODE = 4,
	QUALITY = 5,
}

D2D1_COLORMANAGEMENT_QUALITY :: enum i32 {
	PROOF = 0,
	NORMAL = 1,
	BEST = 2,
}

D2D1_COLORMANAGEMENT_RENDERING_INTENT :: enum i32 {
	PERCEPTUAL = 0,
	RELATIVE_COLORIMETRIC = 1,
	SATURATION = 2,
	ABSOLUTE_COLORIMETRIC = 3,
}

D2D1_COLORMATRIX_ALPHA_MODE :: enum i32 {
	PREMULTIPLIED = 1,
	STRAIGHT = 2,
}

D2D1_COLORMATRIX_PROP :: enum i32 {
	COLOR_MATRIX = 0,
	ALPHA_MODE = 1,
	CLAMP_OUTPUT = 2,
}

D2D1_COMBINE_MODE :: enum i32 {
	UNION = 0,
	INTERSECT = 1,
	XOR = 2,
	EXCLUDE = 3,
}

D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS :: enum i32 {
	NONE = 0,
	GDI_COMPATIBLE = 1,
}

D2D1_COMPOSITE_MODE :: enum i32 {
	SOURCE_OVER = 0,
	DESTINATION_OVER = 1,
	SOURCE_IN = 2,
	DESTINATION_IN = 3,
	SOURCE_OUT = 4,
	DESTINATION_OUT = 5,
	SOURCE_ATOP = 6,
	DESTINATION_ATOP = 7,
	XOR = 8,
	PLUS = 9,
	SOURCE_COPY = 10,
	BOUNDED_SOURCE_COPY = 11,
	MASK_INVERT = 12,
}

D2D1_COMPOSITE_PROP :: enum i32 {
	MODE = 0,
}

D2D1_CONTRAST_PROP :: enum i32 {
	CONTRAST = 0,
	CLAMP_INPUT = 1,
}

D2D1_CONVOLVEMATRIX_PROP :: enum i32 {
	KERNEL_UNIT_LENGTH = 0,
	SCALE_MODE = 1,
	KERNEL_SIZE_X = 2,
	KERNEL_SIZE_Y = 3,
	KERNEL_MATRIX = 4,
	DIVISOR = 5,
	BIAS = 6,
	KERNEL_OFFSET = 7,
	PRESERVE_ALPHA = 8,
	BORDER_MODE = 9,
	CLAMP_OUTPUT = 10,
}

D2D1_CONVOLVEMATRIX_SCALE_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_CROP_PROP :: enum i32 {
	RECT = 0,
	BORDER_MODE = 1,
}

D2D1_CROSSFADE_PROP :: enum i32 {
	WEIGHT = 0,
}

D2D1_DASH_STYLE :: enum i32 {
	SOLID = 0,
	DASH = 1,
	DOT = 2,
	DASH_DOT = 3,
	DASH_DOT_DOT = 4,
	CUSTOM = 5,
}

D2D1_DC_INITIALIZE_MODE :: enum i32 {
	COPY = 0,
	CLEAR = 1,
}

D2D1_DEBUG_LEVEL :: enum i32 {
	NONE = 0,
	ERROR = 1,
	WARNING = 2,
	INFORMATION = 3,
}

D2D1_DEVICE_CONTEXT_OPTIONS :: enum i32 {
	NONE = 0,
	ENABLE_MULTITHREADED_OPTIMIZATIONS = 1,
}

D2D1_DIRECTIONALBLUR_OPTIMIZATION :: enum i32 {
	SPEED = 0,
	BALANCED = 1,
	QUALITY = 2,
}

D2D1_DIRECTIONALBLUR_PROP :: enum i32 {
	STANDARD_DEVIATION = 0,
	ANGLE = 1,
	OPTIMIZATION = 2,
	BORDER_MODE = 3,
}

D2D1_DISCRETETRANSFER_PROP :: enum i32 {
	RED_TABLE = 0,
	RED_DISABLE = 1,
	GREEN_TABLE = 2,
	GREEN_DISABLE = 3,
	BLUE_TABLE = 4,
	BLUE_DISABLE = 5,
	ALPHA_TABLE = 6,
	ALPHA_DISABLE = 7,
	CLAMP_OUTPUT = 8,
}

D2D1_DISPLACEMENTMAP_PROP :: enum i32 {
	SCALE = 0,
	X_CHANNEL_SELECT = 1,
	Y_CHANNEL_SELECT = 2,
}

D2D1_DISTANTDIFFUSE_PROP :: enum i32 {
	AZIMUTH = 0,
	ELEVATION = 1,
	DIFFUSE_CONSTANT = 2,
	SURFACE_SCALE = 3,
	COLOR = 4,
	KERNEL_UNIT_LENGTH = 5,
	SCALE_MODE = 6,
}

D2D1_DISTANTDIFFUSE_SCALE_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_DISTANTSPECULAR_PROP :: enum i32 {
	AZIMUTH = 0,
	ELEVATION = 1,
	SPECULAR_EXPONENT = 2,
	SPECULAR_CONSTANT = 3,
	SURFACE_SCALE = 4,
	COLOR = 5,
	KERNEL_UNIT_LENGTH = 6,
	SCALE_MODE = 7,
}

D2D1_DISTANTSPECULAR_SCALE_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_DPICOMPENSATION_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_DPICOMPENSATION_PROP :: enum i32 {
	INTERPOLATION_MODE = 0,
	BORDER_MODE = 1,
	INPUT_DPI = 2,
}

D2D1_DRAW_TEXT_OPTIONS :: enum i32 {
	NO_SNAP = 1,
	CLIP = 2,
	ENABLE_COLOR_FONT = 4,
	DISABLE_COLOR_BITMAP_SNAPPING = 8,
	NONE = 0,
}

D2D1_EDGEDETECTION_MODE :: enum i32 {
	SOBEL = 0,
	PREWITT = 1,
}

D2D1_EDGEDETECTION_PROP :: enum i32 {
	STRENGTH = 0,
	BLUR_RADIUS = 1,
	MODE = 2,
	OVERLAY_EDGES = 3,
	ALPHA_MODE = 4,
}

D2D1_EMBOSS_PROP :: enum i32 {
	HEIGHT = 0,
	DIRECTION = 1,
}

D2D1_EXPOSURE_PROP :: enum i32 {
	EXPOSURE_VALUE = 0,
}

D2D1_EXTEND_MODE :: enum i32 {
	CLAMP = 0,
	WRAP = 1,
	MIRROR = 2,
}

D2D1_FACTORY_TYPE :: enum i32 {
	SINGLE_THREADED = 0,
	MULTI_THREADED = 1,
}

D2D1_FEATURE :: enum i32 {
	DOUBLES = 0,
	D3D10_X_HARDWARE_OPTIONS = 1,
}

D2D1_FEATURE_LEVEL :: enum i32 {
	DEFAULT = 0,
	_9 = 37120,
	_10 = 40960,
}

D2D1_FIGURE_BEGIN :: enum i32 {
	FILLED = 0,
	HOLLOW = 1,
}

D2D1_FIGURE_END :: enum i32 {
	OPEN = 0,
	CLOSED = 1,
}

D2D1_FILL_MODE :: enum i32 {
	ALTERNATE = 0,
	WINDING = 1,
}

D2D1_FILTER :: enum i32 {
	MIN_MAG_MIP_POINT = 0,
	MIN_MAG_POINT_MIP_LINEAR = 1,
	MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
	MIN_POINT_MAG_MIP_LINEAR = 5,
	MIN_LINEAR_MAG_MIP_POINT = 16,
	MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
	MIN_MAG_LINEAR_MIP_POINT = 20,
	MIN_MAG_MIP_LINEAR = 21,
	ANISOTROPIC = 85,
}

D2D1_FLOOD_PROP :: enum i32 {
	COLOR = 0,
}

D2D1_GAMMA :: enum i32 {
	_2_2 = 0,
	_1_0 = 1,
}

D2D1_GAMMA1 :: enum i32 {
	G22 = 0,
	G10 = 1,
	G2084 = 2,
}

D2D1_GAMMATRANSFER_PROP :: enum i32 {
	RED_AMPLITUDE = 0,
	RED_EXPONENT = 1,
	RED_OFFSET = 2,
	RED_DISABLE = 3,
	GREEN_AMPLITUDE = 4,
	GREEN_EXPONENT = 5,
	GREEN_OFFSET = 6,
	GREEN_DISABLE = 7,
	BLUE_AMPLITUDE = 8,
	BLUE_EXPONENT = 9,
	BLUE_OFFSET = 10,
	BLUE_DISABLE = 11,
	ALPHA_AMPLITUDE = 12,
	ALPHA_EXPONENT = 13,
	ALPHA_OFFSET = 14,
	ALPHA_DISABLE = 15,
	CLAMP_OUTPUT = 16,
}

D2D1_GAUSSIANBLUR_OPTIMIZATION :: enum i32 {
	SPEED = 0,
	BALANCED = 1,
	QUALITY = 2,
}

D2D1_GAUSSIANBLUR_PROP :: enum i32 {
	STANDARD_DEVIATION = 0,
	OPTIMIZATION = 1,
	BORDER_MODE = 2,
}

D2D1_GEOMETRY_RELATION :: enum i32 {
	UNKNOWN = 0,
	DISJOINT = 1,
	IS_CONTAINED = 2,
	CONTAINS = 3,
	OVERLAP = 4,
}

D2D1_GEOMETRY_SIMPLIFICATION_OPTION :: enum i32 {
	CUBICS_AND_LINES = 0,
	LINES = 1,
}

D2D1_HDRTONEMAP_DISPLAY_MODE :: enum i32 {
	SDR = 0,
	HDR = 1,
}

D2D1_HDRTONEMAP_PROP :: enum i32 {
	INPUT_MAX_LUMINANCE = 0,
	OUTPUT_MAX_LUMINANCE = 1,
	DISPLAY_MODE = 2,
}

D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA :: enum i32 {
	LINEAR = 0,
	SRGB = 1,
}

D2D1_HIGHLIGHTSANDSHADOWS_PROP :: enum i32 {
	HIGHLIGHTS = 0,
	SHADOWS = 1,
	CLARITY = 2,
	INPUT_GAMMA = 3,
	MASK_BLUR_RADIUS = 4,
}

D2D1_HISTOGRAM_PROP :: enum i32 {
	NUM_BINS = 0,
	CHANNEL_SELECT = 1,
	HISTOGRAM_OUTPUT = 2,
}

D2D1_HUEROTATION_PROP :: enum i32 {
	ANGLE = 0,
}

D2D1_HUETORGB_INPUT_COLOR_SPACE :: enum i32 {
	HUE_SATURATION_VALUE = 0,
	HUE_SATURATION_LIGHTNESS = 1,
}

D2D1_HUETORGB_PROP :: enum i32 {
	INPUT_COLOR_SPACE = 0,
}

D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS :: enum i32 {
	NONE = 0,
	LOW_QUALITY_PRIMARY_CONVERSION = 1,
}

D2D1_IMAGE_SOURCE_LOADING_OPTIONS :: enum i32 {
	NONE = 0,
	RELEASE_SOURCE = 1,
	CACHE_ON_DEMAND = 2,
}

D2D1_INK_NIB_SHAPE :: enum i32 {
	ROUND = 0,
	SQUARE = 1,
}

D2D1_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_INTERPOLATION_MODE_DEFINITION :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
	FANT = 6,
	MIPMAP_LINEAR = 7,
}

D2D1_LAYER_OPTIONS :: enum i32 {
	NONE = 0,
	INITIALIZE_FOR_CLEARTYPE = 1,
}

D2D1_LAYER_OPTIONS1 :: enum i32 {
	NONE = 0,
	INITIALIZE_FROM_BACKGROUND = 1,
	IGNORE_ALPHA = 2,
}

D2D1_LINE_JOIN :: enum i32 {
	MITER = 0,
	BEVEL = 1,
	ROUND = 2,
	MITER_OR_BEVEL = 3,
}

D2D1_LINEARTRANSFER_PROP :: enum i32 {
	RED_Y_INTERCEPT = 0,
	RED_SLOPE = 1,
	RED_DISABLE = 2,
	GREEN_Y_INTERCEPT = 3,
	GREEN_SLOPE = 4,
	GREEN_DISABLE = 5,
	BLUE_Y_INTERCEPT = 6,
	BLUE_SLOPE = 7,
	BLUE_DISABLE = 8,
	ALPHA_Y_INTERCEPT = 9,
	ALPHA_SLOPE = 10,
	ALPHA_DISABLE = 11,
	CLAMP_OUTPUT = 12,
}

D2D1_LOOKUPTABLE3D_PROP :: enum i32 {
	LUT = 0,
	ALPHA_MODE = 1,
}

D2D1_MAP_OPTIONS :: enum i32 {
	NONE = 0,
	READ = 1,
	WRITE = 2,
	DISCARD = 4,
}

D2D1_MORPHOLOGY_MODE :: enum i32 {
	ERODE = 0,
	DILATE = 1,
}

D2D1_MORPHOLOGY_PROP :: enum i32 {
	MODE = 0,
	WIDTH = 1,
	HEIGHT = 2,
}

D2D1_OPACITY_MASK_CONTENT :: enum i32 {
	GRAPHICS = 0,
	TEXT_NATURAL = 1,
	TEXT_GDI_COMPATIBLE = 2,
}

D2D1_OPACITY_PROP :: enum i32 {
	OPACITY = 0,
}

D2D1_OPACITYMETADATA_PROP :: enum i32 {
	INPUT_OPAQUE_RECT = 0,
}

D2D1_ORIENTATION :: enum i32 {
	DEFAULT = 1,
	FLIP_HORIZONTAL = 2,
	ROTATE_CLOCKWISE180 = 3,
	ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4,
	ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 5,
	ROTATE_CLOCKWISE270 = 6,
	ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 7,
	ROTATE_CLOCKWISE90 = 8,
}

D2D1_PATCH_EDGE_MODE :: enum i32 {
	ALIASED = 0,
	ANTIALIASED = 1,
	ALIASED_INFLATED = 2,
}

D2D1_PATH_SEGMENT :: enum i32 {
	NONE = 0,
	FORCE_UNSTROKED = 1,
	FORCE_ROUND_LINE_JOIN = 2,
}

D2D1_PIXEL_OPTIONS :: enum i32 {
	NONE = 0,
	TRIVIAL_SAMPLING = 1,
}

D2D1_POINTDIFFUSE_PROP :: enum i32 {
	LIGHT_POSITION = 0,
	DIFFUSE_CONSTANT = 1,
	SURFACE_SCALE = 2,
	COLOR = 3,
	KERNEL_UNIT_LENGTH = 4,
	SCALE_MODE = 5,
}

D2D1_POINTDIFFUSE_SCALE_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_POINTSPECULAR_PROP :: enum i32 {
	LIGHT_POSITION = 0,
	SPECULAR_EXPONENT = 1,
	SPECULAR_CONSTANT = 2,
	SURFACE_SCALE = 3,
	COLOR = 4,
	KERNEL_UNIT_LENGTH = 5,
	SCALE_MODE = 6,
}

D2D1_POINTSPECULAR_SCALE_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_POSTERIZE_PROP :: enum i32 {
	RED_VALUE_COUNT = 0,
	GREEN_VALUE_COUNT = 1,
	BLUE_VALUE_COUNT = 2,
}

D2D1_PRESENT_OPTIONS :: enum i32 {
	NONE = 0,
	RETAIN_CONTENTS = 1,
	IMMEDIATELY = 2,
}

D2D1_PRIMITIVE_BLEND :: enum i32 {
	SOURCE_OVER = 0,
	COPY = 1,
	MIN = 2,
	ADD = 3,
	MAX = 4,
}

D2D1_PRINT_FONT_SUBSET_MODE :: enum i32 {
	DEFAULT = 0,
	EACHPAGE = 1,
	NONE = 2,
}

D2D1_PROPERTY :: enum i32 {
	CLSID = -2147483648,
	DISPLAYNAME = -2147483647,
	AUTHOR = -2147483646,
	CATEGORY = -2147483645,
	DESCRIPTION = -2147483644,
	INPUTS = -2147483643,
	CACHED = -2147483642,
	PRECISION = -2147483641,
	MIN_INPUTS = -2147483640,
	MAX_INPUTS = -2147483639,
}

D2D1_PROPERTY_TYPE :: enum i32 {
	UNKNOWN = 0,
	STRING = 1,
	BOOL = 2,
	UINT32 = 3,
	INT32 = 4,
	FLOAT = 5,
	VECTOR2 = 6,
	VECTOR3 = 7,
	VECTOR4 = 8,
	BLOB = 9,
	IUNKNOWN = 10,
	ENUM = 11,
	ARRAY = 12,
	CLSID = 13,
	MATRIX_3X2 = 14,
	MATRIX_4X3 = 15,
	MATRIX_4X4 = 16,
	MATRIX_5X4 = 17,
	COLOR_CONTEXT = 18,
}

D2D1_RENDER_TARGET_TYPE :: enum i32 {
	DEFAULT = 0,
	SOFTWARE = 1,
	HARDWARE = 2,
}

D2D1_RENDER_TARGET_USAGE :: enum i32 {
	NONE = 0,
	FORCE_BITMAP_REMOTING = 1,
	GDI_COMPATIBLE = 2,
}

D2D1_RENDERING_PRIORITY :: enum i32 {
	NORMAL = 0,
	LOW = 1,
}

D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE :: enum i32 {
	HUE_SATURATION_VALUE = 0,
	HUE_SATURATION_LIGHTNESS = 1,
}

D2D1_RGBTOHUE_PROP :: enum i32 {
	OUTPUT_COLOR_SPACE = 0,
}

D2D1_SATURATION_PROP :: enum i32 {
	SATURATION = 0,
}

D2D1_SCALE_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_SCALE_PROP :: enum i32 {
	SCALE = 0,
	CENTER_POINT = 1,
	INTERPOLATION_MODE = 2,
	BORDER_MODE = 3,
	SHARPNESS = 4,
}

D2D1_SEPIA_PROP :: enum i32 {
	INTENSITY = 0,
	ALPHA_MODE = 1,
}

D2D1_SHADOW_OPTIMIZATION :: enum i32 {
	SPEED = 0,
	BALANCED = 1,
	QUALITY = 2,
}

D2D1_SHADOW_PROP :: enum i32 {
	BLUR_STANDARD_DEVIATION = 0,
	COLOR = 1,
	OPTIMIZATION = 2,
}

D2D1_SHARPEN_PROP :: enum i32 {
	SHARPNESS = 0,
	THRESHOLD = 1,
}

D2D1_SPOTDIFFUSE_PROP :: enum i32 {
	LIGHT_POSITION = 0,
	POINTS_AT = 1,
	FOCUS = 2,
	LIMITING_CONE_ANGLE = 3,
	DIFFUSE_CONSTANT = 4,
	SURFACE_SCALE = 5,
	COLOR = 6,
	KERNEL_UNIT_LENGTH = 7,
	SCALE_MODE = 8,
}

D2D1_SPOTDIFFUSE_SCALE_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_SPOTSPECULAR_PROP :: enum i32 {
	LIGHT_POSITION = 0,
	POINTS_AT = 1,
	FOCUS = 2,
	LIMITING_CONE_ANGLE = 3,
	SPECULAR_EXPONENT = 4,
	SPECULAR_CONSTANT = 5,
	SURFACE_SCALE = 6,
	COLOR = 7,
	KERNEL_UNIT_LENGTH = 8,
	SCALE_MODE = 9,
}

D2D1_SPOTSPECULAR_SCALE_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_SPRITE_OPTIONS :: enum i32 {
	NONE = 0,
	CLAMP_TO_SOURCE_RECTANGLE = 1,
}

D2D1_STRAIGHTEN_PROP :: enum i32 {
	ANGLE = 0,
	MAINTAIN_SIZE = 1,
	SCALE_MODE = 2,
}

D2D1_STRAIGHTEN_SCALE_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
}

D2D1_STROKE_TRANSFORM_TYPE :: enum i32 {
	NORMAL = 0,
	FIXED = 1,
	HAIRLINE = 2,
}

D2D1_SUBPROPERTY :: enum i32 {
	DISPLAYNAME = -2147483648,
	ISREADONLY = -2147483647,
	MIN = -2147483646,
	MAX = -2147483645,
	DEFAULT = -2147483644,
	FIELDS = -2147483643,
	INDEX = -2147483642,
}

D2D1_SVG_ASPECT_ALIGN :: enum i32 {
	NONE = 0,
	X_MIN_Y_MIN = 1,
	X_MID_Y_MIN = 2,
	X_MAX_Y_MIN = 3,
	X_MIN_Y_MID = 4,
	X_MID_Y_MID = 5,
	X_MAX_Y_MID = 6,
	X_MIN_Y_MAX = 7,
	X_MID_Y_MAX = 8,
	X_MAX_Y_MAX = 9,
}

D2D1_SVG_ASPECT_SCALING :: enum i32 {
	MEET = 0,
	SLICE = 1,
}

D2D1_SVG_ATTRIBUTE_POD_TYPE :: enum i32 {
	FLOAT = 0,
	COLOR = 1,
	FILL_MODE = 2,
	DISPLAY = 3,
	OVERFLOW = 4,
	LINE_CAP = 5,
	LINE_JOIN = 6,
	VISIBILITY = 7,
	MATRIX = 8,
	UNIT_TYPE = 9,
	EXTEND_MODE = 10,
	PRESERVE_ASPECT_RATIO = 11,
	VIEWBOX = 12,
	LENGTH = 13,
}

D2D1_SVG_ATTRIBUTE_STRING_TYPE :: enum i32 {
	SVG = 0,
	ID = 1,
}

D2D1_SVG_DISPLAY :: enum i32 {
	INLINE = 0,
	NONE = 1,
}

D2D1_SVG_LENGTH_UNITS :: enum i32 {
	NUMBER = 0,
	PERCENTAGE = 1,
}

D2D1_SVG_LINE_CAP :: enum i32 {
	BUTT = 0,
	SQUARE = 1,
	ROUND = 2,
}

D2D1_SVG_LINE_JOIN :: enum i32 {
	BEVEL = 1,
	MITER = 3,
	ROUND = 2,
}

D2D1_SVG_OVERFLOW :: enum i32 {
	VISIBLE = 0,
	HIDDEN = 1,
}

D2D1_SVG_PAINT_TYPE :: enum i32 {
	NONE = 0,
	COLOR = 1,
	CURRENT_COLOR = 2,
	URI = 3,
	URI_NONE = 4,
	URI_COLOR = 5,
	URI_CURRENT_COLOR = 6,
}

D2D1_SVG_PATH_COMMAND :: enum i32 {
	CLOSE_PATH = 0,
	MOVE_ABSOLUTE = 1,
	MOVE_RELATIVE = 2,
	LINE_ABSOLUTE = 3,
	LINE_RELATIVE = 4,
	CUBIC_ABSOLUTE = 5,
	CUBIC_RELATIVE = 6,
	QUADRADIC_ABSOLUTE = 7,
	QUADRADIC_RELATIVE = 8,
	ARC_ABSOLUTE = 9,
	ARC_RELATIVE = 10,
	HORIZONTAL_ABSOLUTE = 11,
	HORIZONTAL_RELATIVE = 12,
	VERTICAL_ABSOLUTE = 13,
	VERTICAL_RELATIVE = 14,
	CUBIC_SMOOTH_ABSOLUTE = 15,
	CUBIC_SMOOTH_RELATIVE = 16,
	QUADRADIC_SMOOTH_ABSOLUTE = 17,
	QUADRADIC_SMOOTH_RELATIVE = 18,
}

D2D1_SVG_UNIT_TYPE :: enum i32 {
	USER_SPACE_ON_USE = 0,
	OBJECT_BOUNDING_BOX = 1,
}

D2D1_SVG_VISIBILITY :: enum i32 {
	VISIBLE = 0,
	HIDDEN = 1,
}

D2D1_SWEEP_DIRECTION :: enum i32 {
	COUNTER_CLOCKWISE = 0,
	CLOCKWISE = 1,
}

D2D1_TABLETRANSFER_PROP :: enum i32 {
	RED_TABLE = 0,
	RED_DISABLE = 1,
	GREEN_TABLE = 2,
	GREEN_DISABLE = 3,
	BLUE_TABLE = 4,
	BLUE_DISABLE = 5,
	ALPHA_TABLE = 6,
	ALPHA_DISABLE = 7,
	CLAMP_OUTPUT = 8,
}

D2D1_TEMPERATUREANDTINT_PROP :: enum i32 {
	TEMPERATURE = 0,
	TINT = 1,
}

D2D1_TEXT_ANTIALIAS_MODE :: enum i32 {
	DEFAULT = 0,
	CLEARTYPE = 1,
	GRAYSCALE = 2,
	ALIASED = 3,
}

D2D1_THREADING_MODE :: enum i32 {
	SINGLE_THREADED = 0,
	MULTI_THREADED = 1,
}

D2D1_TILE_PROP :: enum i32 {
	RECT = 0,
}

D2D1_TINT_PROP :: enum i32 {
	COLOR = 0,
	CLAMP_OUTPUT = 1,
}

D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS :: enum i32 {
	NONE = 0,
	DISABLE_DPI_SCALE = 1,
}

D2D1_TURBULENCE_NOISE :: enum i32 {
	FRACTAL_SUM = 0,
	TURBULENCE = 1,
}

D2D1_TURBULENCE_PROP :: enum i32 {
	OFFSET = 0,
	SIZE = 1,
	BASE_FREQUENCY = 2,
	NUM_OCTAVES = 3,
	SEED = 4,
	NOISE = 5,
	STITCHABLE = 6,
}

D2D1_UNIT_MODE :: enum i32 {
	DIPS = 0,
	PIXELS = 1,
}

D2D1_VERTEX_OPTIONS :: enum i32 {
	NONE = 0,
	DO_NOT_CLEAR = 1,
	USE_DEPTH_BUFFER = 2,
	ASSUME_NO_OVERLAP = 4,
}

D2D1_VERTEX_USAGE :: enum i32 {
	STATIC = 0,
	DYNAMIC = 1,
}

D2D1_VIGNETTE_PROP :: enum i32 {
	COLOR = 0,
	TRANSITION_SIZE = 1,
	STRENGTH = 2,
}

D2D1_WHITELEVELADJUSTMENT_PROP :: enum i32 {
	INPUT_WHITE_LEVEL = 0,
	OUTPUT_WHITE_LEVEL = 1,
}

D2D1_WINDOW_STATE :: enum i32 {
	NONE = 0,
	OCCLUDED = 1,
}

D2D1_YCBCR_CHROMA_SUBSAMPLING :: enum i32 {
	AUTO = 0,
	_420 = 1,
	_422 = 2,
	_444 = 3,
	_440 = 4,
}

D2D1_YCBCR_INTERPOLATION_MODE :: enum i32 {
	NEAREST_NEIGHBOR = 0,
	LINEAR = 1,
	CUBIC = 2,
	MULTI_SAMPLE_LINEAR = 3,
	ANISOTROPIC = 4,
	HIGH_QUALITY_CUBIC = 5,
}

D2D1_YCBCR_PROP :: enum i32 {
	CHROMA_SUBSAMPLING = 0,
	TRANSFORM_MATRIX = 1,
	INTERPOLATION_MODE = 2,
}

DWRITE_AUTOMATIC_FONT_AXES :: enum i32 {
	NONE = 0,
	OPTICAL_SIZE = 1,
}

DWRITE_BASELINE :: enum i32 {
	DEFAULT = 0,
	ROMAN = 1,
	CENTRAL = 2,
	MATH = 3,
	HANGING = 4,
	IDEOGRAPHIC_BOTTOM = 5,
	IDEOGRAPHIC_TOP = 6,
	MINIMUM = 7,
	MAXIMUM = 8,
}

DWRITE_BREAK_CONDITION :: enum i32 {
	NEUTRAL = 0,
	CAN_BREAK = 1,
	MAY_NOT_BREAK = 2,
	MUST_BREAK = 3,
}

DWRITE_CONTAINER_TYPE :: enum i32 {
	UNKNOWN = 0,
	WOFF = 1,
	WOFF2 = 2,
}

DWRITE_FACTORY_TYPE :: enum i32 {
	SHARED = 0,
	ISOLATED = 1,
}

DWRITE_FLOW_DIRECTION :: enum i32 {
	TOP_TO_BOTTOM = 0,
	BOTTOM_TO_TOP = 1,
	LEFT_TO_RIGHT = 2,
	RIGHT_TO_LEFT = 3,
}

DWRITE_FONT_AXIS_ATTRIBUTES :: enum i32 {
	NONE = 0,
	VARIABLE = 1,
	HIDDEN = 2,
}

DWRITE_FONT_AXIS_TAG :: enum i32 {
	WEIGHT = 1952999287,
	WIDTH = 1752458359,
	SLANT = 1953393779,
	OPTICAL_SIZE = 2054385775,
	ITALIC = 1818326121,
}

DWRITE_FONT_FACE_TYPE :: enum i32 {
	CFF = 0,
	TRUETYPE = 1,
	OPENTYPE_COLLECTION = 2,
	TYPE1 = 3,
	VECTOR = 4,
	BITMAP = 5,
	UNKNOWN = 6,
	RAW_CFF = 7,
	TRUETYPE_COLLECTION = 2,
}

DWRITE_FONT_FAMILY_MODEL :: enum i32 {
	TYPOGRAPHIC = 0,
	WEIGHT_STRETCH_STYLE = 1,
}

DWRITE_FONT_FEATURE_TAG :: enum i32 {
	ALTERNATIVE_FRACTIONS = 1668441697,
	PETITE_CAPITALS_FROM_CAPITALS = 1668297315,
	SMALL_CAPITALS_FROM_CAPITALS = 1668493923,
	CONTEXTUAL_ALTERNATES = 1953259875,
	CASE_SENSITIVE_FORMS = 1702060387,
	GLYPH_COMPOSITION_DECOMPOSITION = 1886217059,
	CONTEXTUAL_LIGATURES = 1734962275,
	CAPITAL_SPACING = 1886613603,
	CONTEXTUAL_SWASH = 1752658787,
	CURSIVE_POSITIONING = 1936880995,
	DEFAULT = 1953261156,
	DISCRETIONARY_LIGATURES = 1734962276,
	EXPERT_FORMS = 1953527909,
	FRACTIONS = 1667330662,
	FULL_WIDTH = 1684633446,
	HALF_FORMS = 1718378856,
	HALANT_FORMS = 1852596584,
	ALTERNATE_HALF_WIDTH = 1953259880,
	HISTORICAL_FORMS = 1953720680,
	HORIZONTAL_KANA_ALTERNATES = 1634626408,
	HISTORICAL_LIGATURES = 1734962280,
	HALF_WIDTH = 1684633448,
	HOJO_KANJI_FORMS = 1869246312,
	JIS04_FORMS = 875589738,
	JIS78_FORMS = 943157354,
	JIS83_FORMS = 859336810,
	JIS90_FORMS = 809070698,
	KERNING = 1852990827,
	STANDARD_LIGATURES = 1634167148,
	LINING_FIGURES = 1836412524,
	LOCALIZED_FORMS = 1818455916,
	MARK_POSITIONING = 1802658157,
	MATHEMATICAL_GREEK = 1802659693,
	MARK_TO_MARK_POSITIONING = 1802333037,
	ALTERNATE_ANNOTATION_FORMS = 1953259886,
	NLC_KANJI_FORMS = 1801677934,
	OLD_STYLE_FIGURES = 1836412527,
	ORDINALS = 1852076655,
	PROPORTIONAL_ALTERNATE_WIDTH = 1953259888,
	PETITE_CAPITALS = 1885430640,
	PROPORTIONAL_FIGURES = 1836412528,
	PROPORTIONAL_WIDTHS = 1684633456,
	QUARTER_WIDTHS = 1684633457,
	REQUIRED_LIGATURES = 1734962290,
	RUBY_NOTATION_FORMS = 2036495730,
	STYLISTIC_ALTERNATES = 1953259891,
	SCIENTIFIC_INFERIORS = 1718511987,
	SMALL_CAPITALS = 1885564275,
	SIMPLIFIED_FORMS = 1819307379,
	STYLISTIC_SET_1 = 825258867,
	STYLISTIC_SET_2 = 842036083,
	STYLISTIC_SET_3 = 858813299,
	STYLISTIC_SET_4 = 875590515,
	STYLISTIC_SET_5 = 892367731,
	STYLISTIC_SET_6 = 909144947,
	STYLISTIC_SET_7 = 925922163,
	STYLISTIC_SET_8 = 942699379,
	STYLISTIC_SET_9 = 959476595,
	STYLISTIC_SET_10 = 808547187,
	STYLISTIC_SET_11 = 825324403,
	STYLISTIC_SET_12 = 842101619,
	STYLISTIC_SET_13 = 858878835,
	STYLISTIC_SET_14 = 875656051,
	STYLISTIC_SET_15 = 892433267,
	STYLISTIC_SET_16 = 909210483,
	STYLISTIC_SET_17 = 925987699,
	STYLISTIC_SET_18 = 942764915,
	STYLISTIC_SET_19 = 959542131,
	STYLISTIC_SET_20 = 808612723,
	SUBSCRIPT = 1935832435,
	SUPERSCRIPT = 1936749939,
	SWASH = 1752397683,
	TITLING = 1819568500,
	TRADITIONAL_NAME_FORMS = 1835101812,
	TABULAR_FIGURES = 1836412532,
	TRADITIONAL_FORMS = 1684107892,
	THIRD_WIDTHS = 1684633460,
	UNICASE = 1667853941,
	VERTICAL_WRITING = 1953654134,
	VERTICAL_ALTERNATES_AND_ROTATION = 846492278,
	SLASHED_ZERO = 1869768058,
}

DWRITE_FONT_FILE_TYPE :: enum i32 {
	UNKNOWN = 0,
	CFF = 1,
	TRUETYPE = 2,
	OPENTYPE_COLLECTION = 3,
	TYPE1_PFM = 4,
	TYPE1_PFB = 5,
	VECTOR = 6,
	BITMAP = 7,
	TRUETYPE_COLLECTION = 3,
}

DWRITE_FONT_LINE_GAP_USAGE :: enum i32 {
	DEFAULT = 0,
	DISABLED = 1,
	ENABLED = 2,
}

DWRITE_FONT_PROPERTY_ID :: enum i32 {
	NONE = 0,
	WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1,
	TYPOGRAPHIC_FAMILY_NAME = 2,
	WEIGHT_STRETCH_STYLE_FACE_NAME = 3,
	FULL_NAME = 4,
	WIN32_FAMILY_NAME = 5,
	POSTSCRIPT_NAME = 6,
	DESIGN_SCRIPT_LANGUAGE_TAG = 7,
	SUPPORTED_SCRIPT_LANGUAGE_TAG = 8,
	SEMANTIC_TAG = 9,
	WEIGHT = 10,
	STRETCH = 11,
	STYLE = 12,
	TYPOGRAPHIC_FACE_NAME = 13,
	TOTAL = 13,
	TOTAL_RS3 = 14,
	PREFERRED_FAMILY_NAME = 2,
	FAMILY_NAME = 1,
	FACE_NAME = 3,
}

DWRITE_FONT_SIMULATIONS :: enum i32 {
	NONE = 0,
	BOLD = 1,
	OBLIQUE = 2,
}

DWRITE_FONT_SOURCE_TYPE :: enum i32 {
	UNKNOWN = 0,
	PER_MACHINE = 1,
	PER_USER = 2,
	APPX_PACKAGE = 3,
	REMOTE_FONT_PROVIDER = 4,
}

DWRITE_FONT_STRETCH :: enum i32 {
	UNDEFINED = 0,
	ULTRA_CONDENSED = 1,
	EXTRA_CONDENSED = 2,
	CONDENSED = 3,
	SEMI_CONDENSED = 4,
	NORMAL = 5,
	MEDIUM = 5,
	SEMI_EXPANDED = 6,
	EXPANDED = 7,
	EXTRA_EXPANDED = 8,
	ULTRA_EXPANDED = 9,
}

DWRITE_FONT_STYLE :: enum i32 {
	NORMAL = 0,
	OBLIQUE = 1,
	ITALIC = 2,
}

DWRITE_FONT_WEIGHT :: enum i32 {
	THIN = 100,
	EXTRA_LIGHT = 200,
	ULTRA_LIGHT = 200,
	LIGHT = 300,
	SEMI_LIGHT = 350,
	NORMAL = 400,
	REGULAR = 400,
	MEDIUM = 500,
	DEMI_BOLD = 600,
	SEMI_BOLD = 600,
	BOLD = 700,
	EXTRA_BOLD = 800,
	ULTRA_BOLD = 800,
	BLACK = 900,
	HEAVY = 900,
	EXTRA_BLACK = 950,
	ULTRA_BLACK = 950,
}

DWRITE_GLYPH_IMAGE_FORMATS :: enum i32 {
	NONE = 0,
	TRUETYPE = 1,
	CFF = 2,
	COLR = 4,
	SVG = 8,
	PNG = 16,
	JPEG = 32,
	TIFF = 64,
	PREMULTIPLIED_B8G8R8A8 = 128,
}

DWRITE_GLYPH_ORIENTATION_ANGLE :: enum i32 {
	_0_DEGREES = 0,
	_90_DEGREES = 1,
	_180_DEGREES = 2,
	_270_DEGREES = 3,
}

DWRITE_GRID_FIT_MODE :: enum i32 {
	DEFAULT = 0,
	DISABLED = 1,
	ENABLED = 2,
}

DWRITE_INFORMATIONAL_STRING_ID :: enum i32 {
	DWRITE_INFORMATIONAL_STRING_NONE = 0,
	DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 1,
	DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 2,
	DWRITE_INFORMATIONAL_STRING_TRADEMARK = 3,
	DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 4,
	DWRITE_INFORMATIONAL_STRING_DESIGNER = 5,
	DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 6,
	DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 7,
	DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 8,
	DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 9,
	DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 10,
	DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 11,
	DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 12,
	DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = 13,
	DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = 14,
	DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 15,
	DWRITE_INFORMATIONAL_STRING_FULL_NAME = 16,
	DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = 17,
	DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = 18,
	DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19,
	DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = 20,
	DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = 21,
	DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = 13,
	DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = 14,
	DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = 19,
}

DWRITE_LINE_SPACING_METHOD :: enum i32 {
	DEFAULT = 0,
	UNIFORM = 1,
	PROPORTIONAL = 2,
}

DWRITE_LOCALITY :: enum i32 {
	REMOTE = 0,
	PARTIAL = 1,
	LOCAL = 2,
}

DWRITE_MEASURING_MODE :: enum i32 {
	NATURAL = 0,
	GDI_CLASSIC = 1,
	GDI_NATURAL = 2,
}

DWRITE_NUMBER_SUBSTITUTION_METHOD :: enum i32 {
	FROM_CULTURE = 0,
	CONTEXTUAL = 1,
	NONE = 2,
	NATIONAL = 3,
	TRADITIONAL = 4,
}

DWRITE_OPTICAL_ALIGNMENT :: enum i32 {
	NONE = 0,
	NO_SIDE_BEARINGS = 1,
}

DWRITE_OUTLINE_THRESHOLD :: enum i32 {
	ANTIALIASED = 0,
	ALIASED = 1,
}

DWRITE_PANOSE_ARM_STYLE :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	STRAIGHT_ARMS_HORIZONTAL = 2,
	STRAIGHT_ARMS_WEDGE = 3,
	STRAIGHT_ARMS_VERTICAL = 4,
	STRAIGHT_ARMS_SINGLE_SERIF = 5,
	STRAIGHT_ARMS_DOUBLE_SERIF = 6,
	NONSTRAIGHT_ARMS_HORIZONTAL = 7,
	NONSTRAIGHT_ARMS_WEDGE = 8,
	NONSTRAIGHT_ARMS_VERTICAL = 9,
	NONSTRAIGHT_ARMS_SINGLE_SERIF = 10,
	NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11,
	STRAIGHT_ARMS_HORZ = 2,
	STRAIGHT_ARMS_VERT = 4,
	BENT_ARMS_HORZ = 7,
	BENT_ARMS_WEDGE = 8,
	BENT_ARMS_VERT = 9,
	BENT_ARMS_SINGLE_SERIF = 10,
	BENT_ARMS_DOUBLE_SERIF = 11,
}

DWRITE_PANOSE_ASPECT :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	SUPER_CONDENSED = 2,
	VERY_CONDENSED = 3,
	CONDENSED = 4,
	NORMAL = 5,
	EXTENDED = 6,
	VERY_EXTENDED = 7,
	SUPER_EXTENDED = 8,
	MONOSPACED = 9,
}

DWRITE_PANOSE_ASPECT_RATIO :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	VERY_CONDENSED = 2,
	CONDENSED = 3,
	NORMAL = 4,
	EXPANDED = 5,
	VERY_EXPANDED = 6,
}

DWRITE_PANOSE_CHARACTER_RANGES :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	EXTENDED_COLLECTION = 2,
	LITERALS = 3,
	NO_LOWER_CASE = 4,
	SMALL_CAPS = 5,
}

DWRITE_PANOSE_CONTRAST :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	NONE = 2,
	VERY_LOW = 3,
	LOW = 4,
	MEDIUM_LOW = 5,
	MEDIUM = 6,
	MEDIUM_HIGH = 7,
	HIGH = 8,
	VERY_HIGH = 9,
	HORIZONTAL_LOW = 10,
	HORIZONTAL_MEDIUM = 11,
	HORIZONTAL_HIGH = 12,
	BROKEN = 13,
}

DWRITE_PANOSE_DECORATIVE_CLASS :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	DERIVATIVE = 2,
	NONSTANDARD_TOPOLOGY = 3,
	NONSTANDARD_ELEMENTS = 4,
	NONSTANDARD_ASPECT = 5,
	INITIALS = 6,
	CARTOON = 7,
	PICTURE_STEMS = 8,
	ORNAMENTED = 9,
	TEXT_AND_BACKGROUND = 10,
	COLLAGE = 11,
	MONTAGE = 12,
}

DWRITE_PANOSE_DECORATIVE_TOPOLOGY :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	STANDARD = 2,
	SQUARE = 3,
	MULTIPLE_SEGMENT = 4,
	ART_DECO = 5,
	UNEVEN_WEIGHTING = 6,
	DIVERSE_ARMS = 7,
	DIVERSE_FORMS = 8,
	LOMBARDIC_FORMS = 9,
	UPPER_CASE_IN_LOWER_CASE = 10,
	IMPLIED_TOPOLOGY = 11,
	HORSESHOE_E_AND_A = 12,
	CURSIVE = 13,
	BLACKLETTER = 14,
	SWASH_VARIANCE = 15,
}

DWRITE_PANOSE_FAMILY :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	TEXT_DISPLAY = 2,
	SCRIPT = 3,
	DECORATIVE = 4,
	SYMBOL = 5,
	PICTORIAL = 5,
}

DWRITE_PANOSE_FILL :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	STANDARD_SOLID_FILL = 2,
	NO_FILL = 3,
	PATTERNED_FILL = 4,
	COMPLEX_FILL = 5,
	SHAPED_FILL = 6,
	DRAWN_DISTRESSED = 7,
}

DWRITE_PANOSE_FINIALS :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	NONE_NO_LOOPS = 2,
	NONE_CLOSED_LOOPS = 3,
	NONE_OPEN_LOOPS = 4,
	SHARP_NO_LOOPS = 5,
	SHARP_CLOSED_LOOPS = 6,
	SHARP_OPEN_LOOPS = 7,
	TAPERED_NO_LOOPS = 8,
	TAPERED_CLOSED_LOOPS = 9,
	TAPERED_OPEN_LOOPS = 10,
	ROUND_NO_LOOPS = 11,
	ROUND_CLOSED_LOOPS = 12,
	ROUND_OPEN_LOOPS = 13,
}

DWRITE_PANOSE_LETTERFORM :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	NORMAL_CONTACT = 2,
	NORMAL_WEIGHTED = 3,
	NORMAL_BOXED = 4,
	NORMAL_FLATTENED = 5,
	NORMAL_ROUNDED = 6,
	NORMAL_OFF_CENTER = 7,
	NORMAL_SQUARE = 8,
	OBLIQUE_CONTACT = 9,
	OBLIQUE_WEIGHTED = 10,
	OBLIQUE_BOXED = 11,
	OBLIQUE_FLATTENED = 12,
	OBLIQUE_ROUNDED = 13,
	OBLIQUE_OFF_CENTER = 14,
	OBLIQUE_SQUARE = 15,
}

DWRITE_PANOSE_LINING :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	NONE = 2,
	INLINE = 3,
	OUTLINE = 4,
	ENGRAVED = 5,
	SHADOW = 6,
	RELIEF = 7,
	BACKDROP = 8,
}

DWRITE_PANOSE_MIDLINE :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	STANDARD_TRIMMED = 2,
	STANDARD_POINTED = 3,
	STANDARD_SERIFED = 4,
	HIGH_TRIMMED = 5,
	HIGH_POINTED = 6,
	HIGH_SERIFED = 7,
	CONSTANT_TRIMMED = 8,
	CONSTANT_POINTED = 9,
	CONSTANT_SERIFED = 10,
	LOW_TRIMMED = 11,
	LOW_POINTED = 12,
	LOW_SERIFED = 13,
}

DWRITE_PANOSE_PROPORTION :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	OLD_STYLE = 2,
	MODERN = 3,
	EVEN_WIDTH = 4,
	EXPANDED = 5,
	CONDENSED = 6,
	VERY_EXPANDED = 7,
	VERY_CONDENSED = 8,
	MONOSPACED = 9,
}

DWRITE_PANOSE_SCRIPT_FORM :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	UPRIGHT_NO_WRAPPING = 2,
	UPRIGHT_SOME_WRAPPING = 3,
	UPRIGHT_MORE_WRAPPING = 4,
	UPRIGHT_EXTREME_WRAPPING = 5,
	OBLIQUE_NO_WRAPPING = 6,
	OBLIQUE_SOME_WRAPPING = 7,
	OBLIQUE_MORE_WRAPPING = 8,
	OBLIQUE_EXTREME_WRAPPING = 9,
	EXAGGERATED_NO_WRAPPING = 10,
	EXAGGERATED_SOME_WRAPPING = 11,
	EXAGGERATED_MORE_WRAPPING = 12,
	EXAGGERATED_EXTREME_WRAPPING = 13,
}

DWRITE_PANOSE_SCRIPT_TOPOLOGY :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	ROMAN_DISCONNECTED = 2,
	ROMAN_TRAILING = 3,
	ROMAN_CONNECTED = 4,
	CURSIVE_DISCONNECTED = 5,
	CURSIVE_TRAILING = 6,
	CURSIVE_CONNECTED = 7,
	BLACKLETTER_DISCONNECTED = 8,
	BLACKLETTER_TRAILING = 9,
	BLACKLETTER_CONNECTED = 10,
}

DWRITE_PANOSE_SERIF_STYLE :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	COVE = 2,
	OBTUSE_COVE = 3,
	SQUARE_COVE = 4,
	OBTUSE_SQUARE_COVE = 5,
	SQUARE = 6,
	THIN = 7,
	OVAL = 8,
	EXAGGERATED = 9,
	TRIANGLE = 10,
	NORMAL_SANS = 11,
	OBTUSE_SANS = 12,
	PERPENDICULAR_SANS = 13,
	FLARED = 14,
	ROUNDED = 15,
	SCRIPT = 16,
	PERP_SANS = 13,
	BONE = 8,
}

DWRITE_PANOSE_SPACING :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	PROPORTIONAL_SPACED = 2,
	MONOSPACED = 3,
}

DWRITE_PANOSE_STROKE_VARIATION :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	NO_VARIATION = 2,
	GRADUAL_DIAGONAL = 3,
	GRADUAL_TRANSITIONAL = 4,
	GRADUAL_VERTICAL = 5,
	GRADUAL_HORIZONTAL = 6,
	RAPID_VERTICAL = 7,
	RAPID_HORIZONTAL = 8,
	INSTANT_VERTICAL = 9,
	INSTANT_HORIZONTAL = 10,
}

DWRITE_PANOSE_SYMBOL_ASPECT_RATIO :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	NO_WIDTH = 2,
	EXCEPTIONALLY_WIDE = 3,
	SUPER_WIDE = 4,
	VERY_WIDE = 5,
	WIDE = 6,
	NORMAL = 7,
	NARROW = 8,
	VERY_NARROW = 9,
}

DWRITE_PANOSE_SYMBOL_KIND :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	MONTAGES = 2,
	PICTURES = 3,
	SHAPES = 4,
	SCIENTIFIC = 5,
	MUSIC = 6,
	EXPERT = 7,
	PATTERNS = 8,
	BOARDERS = 9,
	ICONS = 10,
	LOGOS = 11,
	INDUSTRY_SPECIFIC = 12,
}

DWRITE_PANOSE_TOOL_KIND :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	FLAT_NIB = 2,
	PRESSURE_POINT = 3,
	ENGRAVED = 4,
	BALL = 5,
	BRUSH = 6,
	ROUGH = 7,
	FELT_PEN_BRUSH_TIP = 8,
	WILD_BRUSH = 9,
}

DWRITE_PANOSE_WEIGHT :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	VERY_LIGHT = 2,
	LIGHT = 3,
	THIN = 4,
	BOOK = 5,
	MEDIUM = 6,
	DEMI = 7,
	BOLD = 8,
	HEAVY = 9,
	BLACK = 10,
	EXTRA_BLACK = 11,
	NORD = 11,
}

DWRITE_PANOSE_XASCENT :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	VERY_LOW = 2,
	LOW = 3,
	MEDIUM = 4,
	HIGH = 5,
	VERY_HIGH = 6,
}

DWRITE_PANOSE_XHEIGHT :: enum i32 {
	ANY = 0,
	NO_FIT = 1,
	CONSTANT_SMALL = 2,
	CONSTANT_STANDARD = 3,
	CONSTANT_LARGE = 4,
	DUCKING_SMALL = 5,
	DUCKING_STANDARD = 6,
	DUCKING_LARGE = 7,
	CONSTANT_STD = 3,
	DUCKING_STD = 6,
}

DWRITE_PARAGRAPH_ALIGNMENT :: enum i32 {
	NEAR = 0,
	FAR = 1,
	CENTER = 2,
}

DWRITE_PIXEL_GEOMETRY :: enum i32 {
	FLAT = 0,
	RGB = 1,
	BGR = 2,
}

DWRITE_READING_DIRECTION :: enum i32 {
	LEFT_TO_RIGHT = 0,
	RIGHT_TO_LEFT = 1,
	TOP_TO_BOTTOM = 2,
	BOTTOM_TO_TOP = 3,
}

DWRITE_RENDERING_MODE :: enum i32 {
	DEFAULT = 0,
	ALIASED = 1,
	GDI_CLASSIC = 2,
	GDI_NATURAL = 3,
	NATURAL = 4,
	NATURAL_SYMMETRIC = 5,
	OUTLINE = 6,
	CLEARTYPE_GDI_CLASSIC = 2,
	CLEARTYPE_GDI_NATURAL = 3,
	CLEARTYPE_NATURAL = 4,
	CLEARTYPE_NATURAL_SYMMETRIC = 5,
}

DWRITE_RENDERING_MODE1 :: enum i32 {
	DEFAULT = 0,
	ALIASED = 1,
	GDI_CLASSIC = 2,
	GDI_NATURAL = 3,
	NATURAL = 4,
	NATURAL_SYMMETRIC = 5,
	OUTLINE = 6,
	NATURAL_SYMMETRIC_DOWNSAMPLED = 7,
}

DWRITE_SCRIPT_SHAPES :: enum i32 {
	DEFAULT = 0,
	NO_VISUAL = 1,
}

DWRITE_TEXT_ALIGNMENT :: enum i32 {
	LEADING = 0,
	TRAILING = 1,
	CENTER = 2,
	JUSTIFIED = 3,
}

DWRITE_TEXT_ANTIALIAS_MODE :: enum i32 {
	CLEARTYPE = 0,
	GRAYSCALE = 1,
}

DWRITE_TEXTURE_TYPE :: enum i32 {
	DWRITE_TEXTURE_ALIASED_1x1 = 0,
	DWRITE_TEXTURE_CLEARTYPE_3x1 = 1,
}

DWRITE_TRIMMING_GRANULARITY :: enum i32 {
	NONE = 0,
	CHARACTER = 1,
	WORD = 2,
}

DWRITE_VERTICAL_GLYPH_ORIENTATION :: enum i32 {
	DEFAULT = 0,
	STACKED = 1,
}

DWRITE_WORD_WRAPPING :: enum i32 {
	WRAP = 0,
	NO_WRAP = 1,
	EMERGENCY_BREAK = 2,
	WHOLE_WORD = 3,
	CHARACTER = 4,
}

D2D_COLOR_F :: struct {
	r: f32,
	g: f32,
	b: f32,
	a: f32,
}

D2D_MATRIX_3X2_F :: struct {
	Anonymous: struct #raw_union {
		Anonymous1: struct {
			m11: f32,
			m12: f32,
			m21: f32,
			m22: f32,
			dx: f32,
			dy: f32,
		},
		Anonymous2: struct {
			_11: f32,
			_12: f32,
			_21: f32,
			_22: f32,
			_31: f32,
			_32: f32,
		},
		m: [6]f32,
	},
}

D2D_MATRIX_4X3_F :: struct {
	Anonymous: struct #raw_union {
		Anonymous: struct {
			_11: f32,
			_12: f32,
			_13: f32,
			_21: f32,
			_22: f32,
			_23: f32,
			_31: f32,
			_32: f32,
			_33: f32,
			_41: f32,
			_42: f32,
			_43: f32,
		},
		m: [12]f32,
	},
}

D2D_MATRIX_4X4_F :: struct {
	Anonymous: struct #raw_union {
		Anonymous: struct {
			_11: f32,
			_12: f32,
			_13: f32,
			_14: f32,
			_21: f32,
			_22: f32,
			_23: f32,
			_24: f32,
			_31: f32,
			_32: f32,
			_33: f32,
			_34: f32,
			_41: f32,
			_42: f32,
			_43: f32,
			_44: f32,
		},
		m: [16]f32,
	},
}

D2D_MATRIX_5X4_F :: struct {
	Anonymous: struct #raw_union {
		Anonymous: struct {
			_11: f32,
			_12: f32,
			_13: f32,
			_14: f32,
			_21: f32,
			_22: f32,
			_23: f32,
			_24: f32,
			_31: f32,
			_32: f32,
			_33: f32,
			_34: f32,
			_41: f32,
			_42: f32,
			_43: f32,
			_44: f32,
			_51: f32,
			_52: f32,
			_53: f32,
			_54: f32,
		},
		m: [20]f32,
	},
}

D2D_POINT_2F :: struct {
	x: f32,
	y: f32,
}

D2D_POINT_2U :: struct {
	x: u32,
	y: u32,
}

D2D_RECT_F :: struct {
	left: f32,
	top: f32,
	right: f32,
	bottom: f32,
}

D2D_RECT_U :: struct {
	left: u32,
	top: u32,
	right: u32,
	bottom: u32,
}

D2D_SIZE_F :: struct {
	width: f32,
	height: f32,
}

D2D_SIZE_U :: struct {
	width: u32,
	height: u32,
}

D2D_VECTOR_2F :: struct {
	x: f32,
	y: f32,
}

D2D_VECTOR_3F :: struct {
	x: f32,
	y: f32,
	z: f32,
}

D2D_VECTOR_4F :: struct {
	x: f32,
	y: f32,
	z: f32,
	w: f32,
}

D2D1_ARC_SEGMENT :: struct {
	point: D2D_POINT_2F,
	size: D2D_SIZE_F,
	rotationAngle: f32,
	sweepDirection: D2D1_SWEEP_DIRECTION,
	arcSize: D2D1_ARC_SIZE,
}

D2D1_BEZIER_SEGMENT :: struct {
	point1: D2D_POINT_2F,
	point2: D2D_POINT_2F,
	point3: D2D_POINT_2F,
}

D2D1_BITMAP_BRUSH_PROPERTIES :: struct {
	extendModeX: D2D1_EXTEND_MODE,
	extendModeY: D2D1_EXTEND_MODE,
	interpolationMode: D2D1_BITMAP_INTERPOLATION_MODE,
}

D2D1_BITMAP_BRUSH_PROPERTIES1 :: struct {
	extendModeX: D2D1_EXTEND_MODE,
	extendModeY: D2D1_EXTEND_MODE,
	interpolationMode: D2D1_INTERPOLATION_MODE,
}

D2D1_BITMAP_PROPERTIES :: struct {
	pixelFormat: D2D1_PIXEL_FORMAT,
	dpiX: f32,
	dpiY: f32,
}

D2D1_BITMAP_PROPERTIES1 :: struct {
	pixelFormat: D2D1_PIXEL_FORMAT,
	dpiX: f32,
	dpiY: f32,
	bitmapOptions: D2D1_BITMAP_OPTIONS,
	colorContext: ^ID2D1ColorContext,
}

D2D1_BLEND_DESCRIPTION :: struct {
	sourceBlend: D2D1_BLEND,
	destinationBlend: D2D1_BLEND,
	blendOperation: D2D1_BLEND_OPERATION,
	sourceBlendAlpha: D2D1_BLEND,
	destinationBlendAlpha: D2D1_BLEND,
	blendOperationAlpha: D2D1_BLEND_OPERATION,
	blendFactor: [4]f32,
}

D2D1_BRUSH_PROPERTIES :: struct {
	opacity: f32,
	transform: D2D_MATRIX_3X2_F,
}

D2D1_COLOR_F :: struct {
	r: f32,
	g: f32,
	b: f32,
	a: f32,
}

D2D1_CREATION_PROPERTIES :: struct {
	threadingMode: D2D1_THREADING_MODE,
	debugLevel: D2D1_DEBUG_LEVEL,
	options: D2D1_DEVICE_CONTEXT_OPTIONS,
}

D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES :: struct {
	shaderBufferWithInputSignature: ^u8,
	shaderBufferSize: u32,
	inputElements: ^D2D1_INPUT_ELEMENT_DESC,
	elementCount: u32,
	stride: u32,
}

D2D1_DRAWING_STATE_DESCRIPTION :: struct {
	antialiasMode: D2D1_ANTIALIAS_MODE,
	textAntialiasMode: D2D1_TEXT_ANTIALIAS_MODE,
	tag1: u64,
	tag2: u64,
	transform: D2D_MATRIX_3X2_F,
}

D2D1_DRAWING_STATE_DESCRIPTION1 :: struct {
	antialiasMode: D2D1_ANTIALIAS_MODE,
	textAntialiasMode: D2D1_TEXT_ANTIALIAS_MODE,
	tag1: u64,
	tag2: u64,
	transform: D2D_MATRIX_3X2_F,
	primitiveBlend: D2D1_PRIMITIVE_BLEND,
	unitMode: D2D1_UNIT_MODE,
}

D2D1_EFFECT_INPUT_DESCRIPTION :: struct {
	effect: ^ID2D1Effect,
	inputIndex: u32,
	inputRectangle: D2D_RECT_F,
}

D2D1_ELLIPSE :: struct {
	point: D2D_POINT_2F,
	radiusX: f32,
	radiusY: f32,
}

D2D1_FACTORY_OPTIONS :: struct {
	debugLevel: D2D1_DEBUG_LEVEL,
}

D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS :: struct {
	computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: win32.BOOL,
}

D2D1_FEATURE_DATA_DOUBLES :: struct {
	doublePrecisionFloatShaderOps: win32.BOOL,
}

D2D1_GRADIENT_MESH_PATCH :: struct {
	point00: D2D_POINT_2F,
	point01: D2D_POINT_2F,
	point02: D2D_POINT_2F,
	point03: D2D_POINT_2F,
	point10: D2D_POINT_2F,
	point11: D2D_POINT_2F,
	point12: D2D_POINT_2F,
	point13: D2D_POINT_2F,
	point20: D2D_POINT_2F,
	point21: D2D_POINT_2F,
	point22: D2D_POINT_2F,
	point23: D2D_POINT_2F,
	point30: D2D_POINT_2F,
	point31: D2D_POINT_2F,
	point32: D2D_POINT_2F,
	point33: D2D_POINT_2F,
	color00: D2D1_COLOR_F,
	color03: D2D1_COLOR_F,
	color30: D2D1_COLOR_F,
	color33: D2D1_COLOR_F,
	topEdgeMode: D2D1_PATCH_EDGE_MODE,
	leftEdgeMode: D2D1_PATCH_EDGE_MODE,
	bottomEdgeMode: D2D1_PATCH_EDGE_MODE,
	rightEdgeMode: D2D1_PATCH_EDGE_MODE,
}

D2D1_GRADIENT_STOP :: struct {
	position: f32,
	color: D2D1_COLOR_F,
}

D2D1_HWND_RENDER_TARGET_PROPERTIES :: struct {
	hwnd: win32.HWND,
	pixelSize: D2D_SIZE_U,
	presentOptions: D2D1_PRESENT_OPTIONS,
}

D2D1_IMAGE_BRUSH_PROPERTIES :: struct {
	sourceRectangle: D2D_RECT_F,
	extendModeX: D2D1_EXTEND_MODE,
	extendModeY: D2D1_EXTEND_MODE,
	interpolationMode: D2D1_INTERPOLATION_MODE,
}

D2D1_INK_BEZIER_SEGMENT :: struct {
	point1: D2D1_INK_POINT,
	point2: D2D1_INK_POINT,
	point3: D2D1_INK_POINT,
}

D2D1_INK_POINT :: struct {
	x: f32,
	y: f32,
	radius: f32,
}

D2D1_INK_STYLE_PROPERTIES :: struct {
	nibShape: D2D1_INK_NIB_SHAPE,
	nibTransform: D2D_MATRIX_3X2_F,
}

D2D1_INPUT_DESCRIPTION :: struct {
	filter: D2D1_FILTER,
	levelOfDetailCount: u32,
}

D2D1_INPUT_ELEMENT_DESC :: struct {
	semanticName: ^win32.CHAR,
	semanticIndex: u32,
	format: dxgi.FORMAT,
	inputSlot: u32,
	alignedByteOffset: u32,
}

D2D1_LAYER_PARAMETERS :: struct {
	contentBounds: D2D_RECT_F,
	geometricMask: ^ID2D1Geometry,
	maskAntialiasMode: D2D1_ANTIALIAS_MODE,
	maskTransform: D2D_MATRIX_3X2_F,
	opacity: f32,
	opacityBrush: ^ID2D1Brush,
	layerOptions: D2D1_LAYER_OPTIONS,
}

D2D1_LAYER_PARAMETERS1 :: struct {
	contentBounds: D2D_RECT_F,
	geometricMask: ^ID2D1Geometry,
	maskAntialiasMode: D2D1_ANTIALIAS_MODE,
	maskTransform: D2D_MATRIX_3X2_F,
	opacity: f32,
	opacityBrush: ^ID2D1Brush,
	layerOptions: D2D1_LAYER_OPTIONS1,
}

D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES :: struct {
	startPoint: D2D_POINT_2F,
	endPoint: D2D_POINT_2F,
}

D2D1_MAPPED_RECT :: struct {
	pitch: u32,
	bits: ^u8,
}

D2D1_PIXEL_FORMAT :: struct {
	format: dxgi.FORMAT,
	alphaMode: D2D1_ALPHA_MODE,
}

D2D1_POINT_DESCRIPTION :: struct {
	point: D2D_POINT_2F,
	unitTangentVector: D2D_POINT_2F,
	endSegment: u32,
	endFigure: u32,
	lengthToEndSegment: f32,
}

D2D1_PRINT_CONTROL_PROPERTIES :: struct {
	fontSubset: D2D1_PRINT_FONT_SUBSET_MODE,
	rasterDPI: f32,
	colorSpace: D2D1_COLOR_SPACE,
}

D2D1_PROPERTY_BINDING :: struct {
	propertyName: ^win32.WCHAR,
	setFunction: PD2D1_PROPERTY_SET_FUNCTION,
	getFunction: PD2D1_PROPERTY_GET_FUNCTION,
}

D2D1_QUADRATIC_BEZIER_SEGMENT :: struct {
	point1: D2D_POINT_2F,
	point2: D2D_POINT_2F,
}

D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES :: struct {
	center: D2D_POINT_2F,
	gradientOriginOffset: D2D_POINT_2F,
	radiusX: f32,
	radiusY: f32,
}

D2D1_RENDER_TARGET_PROPERTIES :: struct {
	type: D2D1_RENDER_TARGET_TYPE,
	pixelFormat: D2D1_PIXEL_FORMAT,
	dpiX: f32,
	dpiY: f32,
	usage: D2D1_RENDER_TARGET_USAGE,
	minLevel: D2D1_FEATURE_LEVEL,
}

D2D1_RENDERING_CONTROLS :: struct {
	bufferPrecision: D2D1_BUFFER_PRECISION,
	tileSize: D2D_SIZE_U,
}

D2D1_RESOURCE_TEXTURE_PROPERTIES :: struct {
	extents: ^u32,
	dimensions: u32,
	bufferPrecision: D2D1_BUFFER_PRECISION,
	channelDepth: D2D1_CHANNEL_DEPTH,
	filter: D2D1_FILTER,
	extendModes: ^D2D1_EXTEND_MODE,
}

D2D1_ROUNDED_RECT :: struct {
	rect: D2D_RECT_F,
	radiusX: f32,
	radiusY: f32,
}

D2D1_SIMPLE_COLOR_PROFILE :: struct {
	redPrimary: D2D_POINT_2F,
	greenPrimary: D2D_POINT_2F,
	bluePrimary: D2D_POINT_2F,
	whitePointXZ: D2D_POINT_2F,
	gamma: D2D1_GAMMA1,
}

D2D1_STROKE_STYLE_PROPERTIES :: struct {
	startCap: D2D1_CAP_STYLE,
	endCap: D2D1_CAP_STYLE,
	dashCap: D2D1_CAP_STYLE,
	lineJoin: D2D1_LINE_JOIN,
	miterLimit: f32,
	dashStyle: D2D1_DASH_STYLE,
	dashOffset: f32,
}

D2D1_STROKE_STYLE_PROPERTIES1 :: struct {
	startCap: D2D1_CAP_STYLE,
	endCap: D2D1_CAP_STYLE,
	dashCap: D2D1_CAP_STYLE,
	lineJoin: D2D1_LINE_JOIN,
	miterLimit: f32,
	dashStyle: D2D1_DASH_STYLE,
	dashOffset: f32,
	transformType: D2D1_STROKE_TRANSFORM_TYPE,
}

D2D1_SVG_LENGTH :: struct {
	value: f32,
	units: D2D1_SVG_LENGTH_UNITS,
}

D2D1_SVG_PRESERVE_ASPECT_RATIO :: struct {
	_defer: win32.BOOL,
	align: D2D1_SVG_ASPECT_ALIGN,
	meetOrSlice: D2D1_SVG_ASPECT_SCALING,
}

D2D1_SVG_VIEWBOX :: struct {
	x: f32,
	y: f32,
	width: f32,
	height: f32,
}

D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES :: struct {
	orientation: D2D1_ORIENTATION,
	scaleX: f32,
	scaleY: f32,
	interpolationMode: D2D1_INTERPOLATION_MODE,
	options: D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS,
}

D2D1_TRIANGLE :: struct {
	point1: D2D_POINT_2F,
	point2: D2D_POINT_2F,
	point3: D2D_POINT_2F,
}

D2D1_VERTEX_BUFFER_PROPERTIES :: struct {
	inputCount: u32,
	usage: D2D1_VERTEX_USAGE,
	data: ^u8,
	byteWidth: u32,
}

D2D1_VERTEX_RANGE :: struct {
	startVertex: u32,
	vertexCount: u32,
}

DWRITE_CARET_METRICS :: struct {
	slopeRise: i16,
	slopeRun: i16,
	offset: i16,
}

DWRITE_CLUSTER_METRICS :: struct {
	width: f32,
	length: u16,
	using bitfield: bit_field u16 {
		canWrapLineAfter: u16 | 1,
		isWhitespace: u16 | 1,
		isNewline: u16 | 1,
		isSoftHyphen: u16 | 1,
		isRightToLeft: u16 | 1,
		padding: u16 | 11,
	},
}

DWRITE_COLOR_F :: struct {
	r: f32,
	g: f32,
	b: f32,
	a: f32,
}

DWRITE_COLOR_GLYPH_RUN :: struct {
	glyphRun: DWRITE_GLYPH_RUN,
	glyphRunDescription: ^DWRITE_GLYPH_RUN_DESCRIPTION,
	baselineOriginX: f32,
	baselineOriginY: f32,
	runColor: DWRITE_COLOR_F,
	paletteIndex: u16,
}

DWRITE_COLOR_GLYPH_RUN1 :: struct {
	Base: DWRITE_COLOR_GLYPH_RUN,
	glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS,
	measuringMode: DWRITE_MEASURING_MODE,
}

DWRITE_FILE_FRAGMENT :: struct {
	fileOffset: u64,
	fragmentSize: u64,
}

DWRITE_FONT_AXIS_RANGE :: struct {
	axisTag: DWRITE_FONT_AXIS_TAG,
	minValue: f32,
	maxValue: f32,
}

DWRITE_FONT_AXIS_VALUE :: struct {
	axisTag: DWRITE_FONT_AXIS_TAG,
	value: f32,
}

DWRITE_FONT_FEATURE :: struct {
	nameTag: DWRITE_FONT_FEATURE_TAG,
	parameter: u32,
}

DWRITE_FONT_METRICS :: struct {
	designUnitsPerEm: u16,
	ascent: u16,
	descent: u16,
	lineGap: i16,
	capHeight: u16,
	xHeight: u16,
	underlinePosition: i16,
	underlineThickness: u16,
	strikethroughPosition: i16,
	strikethroughThickness: u16,
}

DWRITE_FONT_METRICS1 :: struct {
	Base: DWRITE_FONT_METRICS,
	glyphBoxLeft: i16,
	glyphBoxTop: i16,
	glyphBoxRight: i16,
	glyphBoxBottom: i16,
	subscriptPositionX: i16,
	subscriptPositionY: i16,
	subscriptSizeX: i16,
	subscriptSizeY: i16,
	superscriptPositionX: i16,
	superscriptPositionY: i16,
	superscriptSizeX: i16,
	superscriptSizeY: i16,
	hasTypographicMetrics: win32.BOOL,
}

DWRITE_FONT_PROPERTY :: struct {
	propertyId: DWRITE_FONT_PROPERTY_ID,
	propertyValue: ^win32.WCHAR,
	localeName: ^win32.WCHAR,
}

DWRITE_GLYPH_IMAGE_DATA :: struct {
	imageData: rawptr,
	imageDataSize: u32,
	uniqueDataId: u32,
	pixelsPerEm: u32,
	pixelSize: D2D_SIZE_U,
	horizontalLeftOrigin: win32.POINT,
	horizontalRightOrigin: win32.POINT,
	verticalTopOrigin: win32.POINT,
	verticalBottomOrigin: win32.POINT,
}

DWRITE_GLYPH_METRICS :: struct {
	leftSideBearing: i32,
	advanceWidth: u32,
	rightSideBearing: i32,
	topSideBearing: i32,
	advanceHeight: u32,
	bottomSideBearing: i32,
	verticalOriginY: i32,
}

DWRITE_GLYPH_OFFSET :: struct {
	advanceOffset: f32,
	ascenderOffset: f32,
}

DWRITE_GLYPH_RUN :: struct {
	fontFace: ^IDWriteFontFace,
	fontEmSize: f32,
	glyphCount: u32,
	glyphIndices: ^u16,
	glyphAdvances: ^f32,
	glyphOffsets: ^DWRITE_GLYPH_OFFSET,
	isSideways: win32.BOOL,
	bidiLevel: u32,
}

DWRITE_GLYPH_RUN_DESCRIPTION :: struct {
	localeName: ^win32.WCHAR,
	_string: ^win32.WCHAR,
	stringLength: u32,
	clusterMap: ^u16,
	textPosition: u32,
}

DWRITE_HIT_TEST_METRICS :: struct {
	textPosition: u32,
	length: u32,
	left: f32,
	top: f32,
	width: f32,
	height: f32,
	bidiLevel: u32,
	isText: win32.BOOL,
	isTrimmed: win32.BOOL,
}

DWRITE_INLINE_OBJECT_METRICS :: struct {
	width: f32,
	height: f32,
	baseline: f32,
	supportsSideways: win32.BOOL,
}

DWRITE_JUSTIFICATION_OPPORTUNITY :: struct {
	expansionMinimum: f32,
	expansionMaximum: f32,
	compressionMaximum: f32,
	using bitfield: bit_field u32 {
		expansionPriority: u32 | 8,
		compressionPriority: u32 | 8,
		allowResidualExpansion: u32 | 1,
		allowResidualCompression: u32 | 1,
		applyToLeadingEdge: u32 | 1,
		applyToTrailingEdge: u32 | 1,
		reserved: u32 | 12,
	},
}

DWRITE_LINE_BREAKPOINT :: struct {
	using bitfield: bit_field u8 {
		breakConditionBefore: u8 | 2,
		breakConditionAfter: u8 | 2,
		isWhitespace: u8 | 1,
		isSoftHyphen: u8 | 1,
		padding: u8 | 2,
	},
}

DWRITE_LINE_METRICS :: struct {
	length: u32,
	trailingWhitespaceLength: u32,
	newlineLength: u32,
	height: f32,
	baseline: f32,
	isTrimmed: win32.BOOL,
}

DWRITE_LINE_METRICS1 :: struct {
	Base: DWRITE_LINE_METRICS,
	leadingBefore: f32,
	leadingAfter: f32,
}

DWRITE_LINE_SPACING :: struct {
	method: DWRITE_LINE_SPACING_METHOD,
	height: f32,
	baseline: f32,
	leadingBefore: f32,
	fontLineGapUsage: DWRITE_FONT_LINE_GAP_USAGE,
}

DWRITE_MATRIX :: struct {
	m11: f32,
	m12: f32,
	m21: f32,
	m22: f32,
	dx: f32,
	dy: f32,
}

DWRITE_OVERHANG_METRICS :: struct {
	left: f32,
	top: f32,
	right: f32,
	bottom: f32,
}

DWRITE_PANOSE :: struct {
	values: [10]u8,
	familyKind: u8,
	text: struct {
		familyKind: u8,
		serifStyle: u8,
		weight: u8,
		proportion: u8,
		contrast: u8,
		strokeVariation: u8,
		armStyle: u8,
		letterform: u8,
		midline: u8,
		xHeight: u8,
	},
	script: struct {
		familyKind: u8,
		toolKind: u8,
		weight: u8,
		spacing: u8,
		aspectRatio: u8,
		contrast: u8,
		scriptTopology: u8,
		scriptForm: u8,
		finials: u8,
		xAscent: u8,
	},
	decorative: struct {
		familyKind: u8,
		decorativeClass: u8,
		weight: u8,
		aspect: u8,
		contrast: u8,
		serifVariant: u8,
		fill: u8,
		lining: u8,
		decorativeTopology: u8,
		characterRange: u8,
	},
	symbol: struct {
		familyKind: u8,
		symbolKind: u8,
		weight: u8,
		spacing: u8,
		aspectRatioAndContrast: u8,
		aspectRatio94: u8,
		aspectRatio119: u8,
		aspectRatio157: u8,
		aspectRatio163: u8,
		aspectRatio211: u8,
	},
}

DWRITE_SCRIPT_ANALYSIS :: struct {
	script: u16,
	shapes: DWRITE_SCRIPT_SHAPES,
}

DWRITE_SCRIPT_PROPERTIES :: struct {
	isoScriptCode: u32,
	isoScriptNumber: u32,
	clusterLookahead: u32,
	justificationCharacter: u32,
	using bitfield: bit_field u32 {
		restrictCaretToClusters: u32 | 1,
		usesWordDividers: u32 | 1,
		isDiscreteWriting: u32 | 1,
		isBlockWriting: u32 | 1,
		isDistributedWithinCluster: u32 | 1,
		isConnectedWriting: u32 | 1,
		isCursiveWriting: u32 | 1,
		reserved: u32 | 25,
	},
}

DWRITE_SHAPING_GLYPH_PROPERTIES :: struct {
	using bitfield: bit_field u16 {
		justification: u16 | 4,
		isClusterStart: u16 | 1,
		isDiacritic: u16 | 1,
		isZeroWidthSpace: u16 | 1,
		reserved: u16 | 9,
	},
}

DWRITE_SHAPING_TEXT_PROPERTIES :: struct {
	using bitfield: bit_field u16 {
		isShapedAlone: u16 | 1,
		reserved1: u16 | 1,
		canBreakShapingAfter: u16 | 1,
		reserved: u16 | 13,
	},
}

DWRITE_STRIKETHROUGH :: struct {
	width: f32,
	thickness: f32,
	offset: f32,
	readingDirection: DWRITE_READING_DIRECTION,
	flowDirection: DWRITE_FLOW_DIRECTION,
	localeName: ^win32.WCHAR,
	measuringMode: DWRITE_MEASURING_MODE,
}

DWRITE_TEXT_METRICS :: struct {
	left: f32,
	top: f32,
	width: f32,
	widthIncludingTrailingWhitespace: f32,
	height: f32,
	layoutWidth: f32,
	layoutHeight: f32,
	maxBidiReorderingDepth: u32,
	lineCount: u32,
}

DWRITE_TEXT_METRICS1 :: struct {
	Base: DWRITE_TEXT_METRICS,
	heightIncludingTrailingWhitespace: f32,
}

DWRITE_TEXT_RANGE :: struct {
	startPosition: u32,
	length: u32,
}

DWRITE_TRIMMING :: struct {
	granularity: DWRITE_TRIMMING_GRANULARITY,
	delimiter: u32,
	delimiterCount: u32,
}

DWRITE_TYPOGRAPHIC_FEATURES :: struct {
	features: ^DWRITE_FONT_FEATURE,
	featureCount: u32,
}

DWRITE_UNDERLINE :: struct {
	width: f32,
	thickness: f32,
	offset: f32,
	runHeight: f32,
	readingDirection: DWRITE_READING_DIRECTION,
	flowDirection: DWRITE_FLOW_DIRECTION,
	localeName: ^win32.WCHAR,
	measuringMode: DWRITE_MEASURING_MODE,
}

DWRITE_UNICODE_RANGE :: struct {
	first: u32,
	last: u32,
}

ID2D1AnalysisTransform_UUID := &win32.IID{0x0359dc30, 0x95e6, 0x4568, {0x90, 0x55, 0x27, 0x72, 0x0d, 0x13, 0x0e, 0x93}}
ID2D1AnalysisTransform :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1AnalysisTransform_VTable,
}
ID2D1AnalysisTransform_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	ProcessAnalysisResults: proc "system" (this: ^ID2D1AnalysisTransform, analysisData: ^u8, analysisDataCount: u32) -> win32.HRESULT,
}

ID2D1Bitmap_UUID := &win32.IID{0xa2296057, 0xea42, 0x4099, {0x98, 0x3b, 0x53, 0x9f, 0xb6, 0x50, 0x54, 0x26}}
ID2D1Bitmap :: struct #raw_union {
	#subtype parent: ID2D1Image,
	using vtable: ^ID2D1Bitmap_VTable,
}
ID2D1Bitmap_VTable :: struct {
	using id2d1image_vtable: ID2D1Image_VTable,
	GetSize: proc "system" (this: ^ID2D1Bitmap, _return: ^D2D_SIZE_F),
	GetPixelSize: proc "system" (this: ^ID2D1Bitmap, _return: ^D2D_SIZE_U),
	GetPixelFormat: proc "system" (this: ^ID2D1Bitmap, _return: ^D2D1_PIXEL_FORMAT),
	GetDpi: proc "system" (this: ^ID2D1Bitmap, dpiX: ^f32, dpiY: ^f32),
	CopyFromBitmap: proc "system" (this: ^ID2D1Bitmap, destPoint: ^D2D_POINT_2U, bitmap: ^ID2D1Bitmap, srcRect: ^D2D_RECT_U) -> win32.HRESULT,
	CopyFromRenderTarget: proc "system" (this: ^ID2D1Bitmap, destPoint: ^D2D_POINT_2U, renderTarget: ^ID2D1RenderTarget, srcRect: ^D2D_RECT_U) -> win32.HRESULT,
	CopyFromMemory: proc "system" (this: ^ID2D1Bitmap, dstRect: ^D2D_RECT_U, srcData: rawptr, pitch: u32) -> win32.HRESULT,
}

ID2D1Bitmap1_UUID := &win32.IID{0xa898a84c, 0x3873, 0x4588, {0xb0, 0x8b, 0xeb, 0xbf, 0x97, 0x8d, 0xf0, 0x41}}
ID2D1Bitmap1 :: struct #raw_union {
	#subtype parent: ID2D1Bitmap,
	using vtable: ^ID2D1Bitmap1_VTable,
}
ID2D1Bitmap1_VTable :: struct {
	using id2d1bitmap_vtable: ID2D1Bitmap_VTable,
	GetColorContext: proc "system" (this: ^ID2D1Bitmap1, colorContext: ^^ID2D1ColorContext),
	GetOptions: proc "system" (this: ^ID2D1Bitmap1) -> D2D1_BITMAP_OPTIONS,
	GetSurface: proc "system" (this: ^ID2D1Bitmap1, dxgiSurface: ^^dxgi.ISurface) -> win32.HRESULT,
	Map: proc "system" (this: ^ID2D1Bitmap1, options: D2D1_MAP_OPTIONS, mappedRect: ^D2D1_MAPPED_RECT) -> win32.HRESULT,
	Unmap: proc "system" (this: ^ID2D1Bitmap1) -> win32.HRESULT,
}

ID2D1BitmapBrush_UUID := &win32.IID{0x2cd906aa, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1BitmapBrush :: struct #raw_union {
	#subtype parent: ID2D1Brush,
	using vtable: ^ID2D1BitmapBrush_VTable,
}
ID2D1BitmapBrush_VTable :: struct {
	using id2d1brush_vtable: ID2D1Brush_VTable,
	SetExtendModeX: proc "system" (this: ^ID2D1BitmapBrush, extendModeX: D2D1_EXTEND_MODE),
	SetExtendModeY: proc "system" (this: ^ID2D1BitmapBrush, extendModeY: D2D1_EXTEND_MODE),
	SetInterpolationMode: proc "system" (this: ^ID2D1BitmapBrush, interpolationMode: D2D1_BITMAP_INTERPOLATION_MODE),
	SetBitmap: proc "system" (this: ^ID2D1BitmapBrush, bitmap: ^ID2D1Bitmap),
	GetExtendModeX: proc "system" (this: ^ID2D1BitmapBrush) -> D2D1_EXTEND_MODE,
	GetExtendModeY: proc "system" (this: ^ID2D1BitmapBrush) -> D2D1_EXTEND_MODE,
	GetInterpolationMode: proc "system" (this: ^ID2D1BitmapBrush) -> D2D1_BITMAP_INTERPOLATION_MODE,
	GetBitmap: proc "system" (this: ^ID2D1BitmapBrush, bitmap: ^^ID2D1Bitmap),
}

ID2D1BitmapBrush1_UUID := &win32.IID{0x41343a53, 0xe41a, 0x49a2, {0x91, 0xcd, 0x21, 0x79, 0x3b, 0xbb, 0x62, 0xe5}}
ID2D1BitmapBrush1 :: struct #raw_union {
	#subtype parent: ID2D1BitmapBrush,
	using vtable: ^ID2D1BitmapBrush1_VTable,
}
ID2D1BitmapBrush1_VTable :: struct {
	using id2d1bitmapbrush_vtable: ID2D1BitmapBrush_VTable,
	SetInterpolationMode1: proc "system" (this: ^ID2D1BitmapBrush1, interpolationMode: D2D1_INTERPOLATION_MODE),
	GetInterpolationMode1: proc "system" (this: ^ID2D1BitmapBrush1) -> D2D1_INTERPOLATION_MODE,
}

ID2D1BitmapRenderTarget_UUID := &win32.IID{0x2cd90695, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1BitmapRenderTarget :: struct #raw_union {
	#subtype parent: ID2D1RenderTarget,
	using vtable: ^ID2D1BitmapRenderTarget_VTable,
}
ID2D1BitmapRenderTarget_VTable :: struct {
	using id2d1rendertarget_vtable: ID2D1RenderTarget_VTable,
	GetBitmap: proc "system" (this: ^ID2D1BitmapRenderTarget, bitmap: ^^ID2D1Bitmap) -> win32.HRESULT,
}

ID2D1BlendTransform_UUID := &win32.IID{0x63ac0b32, 0xba44, 0x450f, {0x88, 0x06, 0x7f, 0x4c, 0xa1, 0xff, 0x2f, 0x1b}}
ID2D1BlendTransform :: struct #raw_union {
	#subtype parent: ID2D1ConcreteTransform,
	using vtable: ^ID2D1BlendTransform_VTable,
}
ID2D1BlendTransform_VTable :: struct {
	using id2d1concretetransform_vtable: ID2D1ConcreteTransform_VTable,
	SetDescription: proc "system" (this: ^ID2D1BlendTransform, description: ^D2D1_BLEND_DESCRIPTION),
	GetDescription: proc "system" (this: ^ID2D1BlendTransform, description: ^D2D1_BLEND_DESCRIPTION),
}

ID2D1BorderTransform_UUID := &win32.IID{0x4998735c, 0x3a19, 0x473c, {0x97, 0x81, 0x65, 0x68, 0x47, 0xe3, 0xa3, 0x47}}
ID2D1BorderTransform :: struct #raw_union {
	#subtype parent: ID2D1ConcreteTransform,
	using vtable: ^ID2D1BorderTransform_VTable,
}
ID2D1BorderTransform_VTable :: struct {
	using id2d1concretetransform_vtable: ID2D1ConcreteTransform_VTable,
	SetExtendModeX: proc "system" (this: ^ID2D1BorderTransform, extendMode: D2D1_EXTEND_MODE),
	SetExtendModeY: proc "system" (this: ^ID2D1BorderTransform, extendMode: D2D1_EXTEND_MODE),
	GetExtendModeX: proc "system" (this: ^ID2D1BorderTransform) -> D2D1_EXTEND_MODE,
	GetExtendModeY: proc "system" (this: ^ID2D1BorderTransform) -> D2D1_EXTEND_MODE,
}

ID2D1BoundsAdjustmentTransform_UUID := &win32.IID{0x90f732e2, 0x5092, 0x4606, {0xa8, 0x19, 0x86, 0x51, 0x97, 0x0b, 0xac, 0xcd}}
ID2D1BoundsAdjustmentTransform :: struct #raw_union {
	#subtype parent: ID2D1TransformNode,
	using vtable: ^ID2D1BoundsAdjustmentTransform_VTable,
}
ID2D1BoundsAdjustmentTransform_VTable :: struct {
	using id2d1transformnode_vtable: ID2D1TransformNode_VTable,
	SetOutputBounds: proc "system" (this: ^ID2D1BoundsAdjustmentTransform, outputBounds: ^win32.RECT),
	GetOutputBounds: proc "system" (this: ^ID2D1BoundsAdjustmentTransform, outputBounds: ^win32.RECT),
}

ID2D1Brush_UUID := &win32.IID{0x2cd906a8, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1Brush :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1Brush_VTable,
}
ID2D1Brush_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	SetOpacity: proc "system" (this: ^ID2D1Brush, opacity: f32),
	SetTransform: proc "system" (this: ^ID2D1Brush, transform: ^D2D_MATRIX_3X2_F),
	GetOpacity: proc "system" (this: ^ID2D1Brush) -> f32,
	GetTransform: proc "system" (this: ^ID2D1Brush, transform: ^D2D_MATRIX_3X2_F),
}

ID2D1ColorContext_UUID := &win32.IID{0x1c4820bb, 0x5771, 0x4518, {0xa5, 0x81, 0x2f, 0xe4, 0xdd, 0x0e, 0xc6, 0x57}}
ID2D1ColorContext :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1ColorContext_VTable,
}
ID2D1ColorContext_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetColorSpace: proc "system" (this: ^ID2D1ColorContext) -> D2D1_COLOR_SPACE,
	GetProfileSize: proc "system" (this: ^ID2D1ColorContext) -> u32,
	GetProfile: proc "system" (this: ^ID2D1ColorContext, profile: ^u8, profileSize: u32) -> win32.HRESULT,
}

ID2D1ColorContext1_UUID := &win32.IID{0x1ab42875, 0xc57f, 0x4be9, {0xbd, 0x85, 0x9c, 0xd7, 0x8d, 0x6f, 0x55, 0xee}}
ID2D1ColorContext1 :: struct #raw_union {
	#subtype parent: ID2D1ColorContext,
	using vtable: ^ID2D1ColorContext1_VTable,
}
ID2D1ColorContext1_VTable :: struct {
	using id2d1colorcontext_vtable: ID2D1ColorContext_VTable,
	GetColorContextType: proc "system" (this: ^ID2D1ColorContext1) -> D2D1_COLOR_CONTEXT_TYPE,
	GetDXGIColorSpace: proc "system" (this: ^ID2D1ColorContext1) -> dxgi.COLOR_SPACE_TYPE,
	GetSimpleColorProfile: proc "system" (this: ^ID2D1ColorContext1, simpleProfile: ^D2D1_SIMPLE_COLOR_PROFILE) -> win32.HRESULT,
}

ID2D1CommandList_UUID := &win32.IID{0xb4f34a19, 0x2383, 0x4d76, {0x94, 0xf6, 0xec, 0x34, 0x36, 0x57, 0xc3, 0xdc}}
ID2D1CommandList :: struct #raw_union {
	#subtype parent: ID2D1Image,
	using vtable: ^ID2D1CommandList_VTable,
}
ID2D1CommandList_VTable :: struct {
	using id2d1image_vtable: ID2D1Image_VTable,
	Stream: proc "system" (this: ^ID2D1CommandList, sink: ^ID2D1CommandSink) -> win32.HRESULT,
	Close: proc "system" (this: ^ID2D1CommandList) -> win32.HRESULT,
}

ID2D1CommandSink_UUID := &win32.IID{0x54d7898a, 0xa061, 0x40a7, {0xbe, 0xc7, 0xe4, 0x65, 0xbc, 0xba, 0x2c, 0x4f}}
ID2D1CommandSink :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1CommandSink_VTable,
}
ID2D1CommandSink_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	BeginDraw: proc "system" (this: ^ID2D1CommandSink) -> win32.HRESULT,
	EndDraw: proc "system" (this: ^ID2D1CommandSink) -> win32.HRESULT,
	SetAntialiasMode: proc "system" (this: ^ID2D1CommandSink, antialiasMode: D2D1_ANTIALIAS_MODE) -> win32.HRESULT,
	SetTags: proc "system" (this: ^ID2D1CommandSink, tag1: u64, tag2: u64) -> win32.HRESULT,
	SetTextAntialiasMode: proc "system" (this: ^ID2D1CommandSink, textAntialiasMode: D2D1_TEXT_ANTIALIAS_MODE) -> win32.HRESULT,
	SetTextRenderingParams: proc "system" (this: ^ID2D1CommandSink, textRenderingParams: ^IDWriteRenderingParams) -> win32.HRESULT,
	SetTransform: proc "system" (this: ^ID2D1CommandSink, transform: ^D2D_MATRIX_3X2_F) -> win32.HRESULT,
	SetPrimitiveBlend: proc "system" (this: ^ID2D1CommandSink, primitiveBlend: D2D1_PRIMITIVE_BLEND) -> win32.HRESULT,
	SetUnitMode: proc "system" (this: ^ID2D1CommandSink, unitMode: D2D1_UNIT_MODE) -> win32.HRESULT,
	Clear: proc "system" (this: ^ID2D1CommandSink, color: ^D2D1_COLOR_F) -> win32.HRESULT,
	DrawGlyphRun: proc "system" (this: ^ID2D1CommandSink, baselineOrigin: D2D_POINT_2F, glyphRun: ^DWRITE_GLYPH_RUN, glyphRunDescription: ^DWRITE_GLYPH_RUN_DESCRIPTION, foregroundBrush: ^ID2D1Brush, measuringMode: DWRITE_MEASURING_MODE) -> win32.HRESULT,
	DrawLine: proc "system" (this: ^ID2D1CommandSink, point0: D2D_POINT_2F, point1: D2D_POINT_2F, brush: ^ID2D1Brush, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle) -> win32.HRESULT,
	DrawGeometry: proc "system" (this: ^ID2D1CommandSink, geometry: ^ID2D1Geometry, brush: ^ID2D1Brush, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle) -> win32.HRESULT,
	DrawRectangle: proc "system" (this: ^ID2D1CommandSink, rect: ^D2D_RECT_F, brush: ^ID2D1Brush, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle) -> win32.HRESULT,
	DrawBitmap: proc "system" (this: ^ID2D1CommandSink, bitmap: ^ID2D1Bitmap, destinationRectangle: ^D2D_RECT_F, opacity: f32, interpolationMode: D2D1_INTERPOLATION_MODE, sourceRectangle: ^D2D_RECT_F, perspectiveTransform: ^D2D_MATRIX_4X4_F) -> win32.HRESULT,
	DrawImage: proc "system" (this: ^ID2D1CommandSink, image: ^ID2D1Image, targetOffset: ^D2D_POINT_2F, imageRectangle: ^D2D_RECT_F, interpolationMode: D2D1_INTERPOLATION_MODE, compositeMode: D2D1_COMPOSITE_MODE) -> win32.HRESULT,
	DrawGdiMetafile: proc "system" (this: ^ID2D1CommandSink, gdiMetafile: ^ID2D1GdiMetafile, targetOffset: ^D2D_POINT_2F) -> win32.HRESULT,
	FillMesh: proc "system" (this: ^ID2D1CommandSink, mesh: ^ID2D1Mesh, brush: ^ID2D1Brush) -> win32.HRESULT,
	FillOpacityMask: proc "system" (this: ^ID2D1CommandSink, opacityMask: ^ID2D1Bitmap, brush: ^ID2D1Brush, destinationRectangle: ^D2D_RECT_F, sourceRectangle: ^D2D_RECT_F) -> win32.HRESULT,
	FillGeometry: proc "system" (this: ^ID2D1CommandSink, geometry: ^ID2D1Geometry, brush: ^ID2D1Brush, opacityBrush: ^ID2D1Brush) -> win32.HRESULT,
	FillRectangle: proc "system" (this: ^ID2D1CommandSink, rect: ^D2D_RECT_F, brush: ^ID2D1Brush) -> win32.HRESULT,
	PushAxisAlignedClip: proc "system" (this: ^ID2D1CommandSink, clipRect: ^D2D_RECT_F, antialiasMode: D2D1_ANTIALIAS_MODE) -> win32.HRESULT,
	PushLayer: proc "system" (this: ^ID2D1CommandSink, layerParameters1: ^D2D1_LAYER_PARAMETERS1, layer: ^ID2D1Layer) -> win32.HRESULT,
	PopAxisAlignedClip: proc "system" (this: ^ID2D1CommandSink) -> win32.HRESULT,
	PopLayer: proc "system" (this: ^ID2D1CommandSink) -> win32.HRESULT,
}

ID2D1CommandSink1_UUID := &win32.IID{0x9eb767fd, 0x4269, 0x4467, {0xb8, 0xc2, 0xeb, 0x30, 0xcb, 0x30, 0x57, 0x43}}
ID2D1CommandSink1 :: struct #raw_union {
	#subtype parent: ID2D1CommandSink,
	using vtable: ^ID2D1CommandSink1_VTable,
}
ID2D1CommandSink1_VTable :: struct {
	using id2d1commandsink_vtable: ID2D1CommandSink_VTable,
	SetPrimitiveBlend1: proc "system" (this: ^ID2D1CommandSink1, primitiveBlend: D2D1_PRIMITIVE_BLEND) -> win32.HRESULT,
}

ID2D1CommandSink2_UUID := &win32.IID{0x3bab440e, 0x417e, 0x47df, {0xa2, 0xe2, 0xbc, 0x0b, 0xe6, 0xa0, 0x09, 0x16}}
ID2D1CommandSink2 :: struct #raw_union {
	#subtype parent: ID2D1CommandSink1,
	using vtable: ^ID2D1CommandSink2_VTable,
}
ID2D1CommandSink2_VTable :: struct {
	using id2d1commandsink1_vtable: ID2D1CommandSink1_VTable,
	DrawInk: proc "system" (this: ^ID2D1CommandSink2, ink: ^ID2D1Ink, brush: ^ID2D1Brush, inkStyle: ^ID2D1InkStyle) -> win32.HRESULT,
	DrawGradientMesh: proc "system" (this: ^ID2D1CommandSink2, gradientMesh: ^ID2D1GradientMesh) -> win32.HRESULT,
	DrawGdiMetafile1: proc "system" (this: ^ID2D1CommandSink2, gdiMetafile: ^ID2D1GdiMetafile, destinationRectangle: ^D2D_RECT_F, sourceRectangle: ^D2D_RECT_F) -> win32.HRESULT,
}

ID2D1CommandSink3_UUID := &win32.IID{0x18079135, 0x4cf3, 0x4868, {0xbc, 0x8e, 0x06, 0x06, 0x7e, 0x6d, 0x24, 0x2d}}
ID2D1CommandSink3 :: struct #raw_union {
	#subtype parent: ID2D1CommandSink2,
	using vtable: ^ID2D1CommandSink3_VTable,
}
ID2D1CommandSink3_VTable :: struct {
	using id2d1commandsink2_vtable: ID2D1CommandSink2_VTable,
	DrawSpriteBatch: proc "system" (this: ^ID2D1CommandSink3, spriteBatch: ^ID2D1SpriteBatch, startIndex: u32, spriteCount: u32, bitmap: ^ID2D1Bitmap, interpolationMode: D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions: D2D1_SPRITE_OPTIONS) -> win32.HRESULT,
}

ID2D1CommandSink4_UUID := &win32.IID{0xc78a6519, 0x40d6, 0x4218, {0xb2, 0xde, 0xbe, 0xee, 0xb7, 0x44, 0xbb, 0x3e}}
ID2D1CommandSink4 :: struct #raw_union {
	#subtype parent: ID2D1CommandSink3,
	using vtable: ^ID2D1CommandSink4_VTable,
}
ID2D1CommandSink4_VTable :: struct {
	using id2d1commandsink3_vtable: ID2D1CommandSink3_VTable,
	SetPrimitiveBlend2: proc "system" (this: ^ID2D1CommandSink4, primitiveBlend: D2D1_PRIMITIVE_BLEND) -> win32.HRESULT,
}

ID2D1CommandSink5_UUID := &win32.IID{0x7047dd26, 0xb1e7, 0x44a7, {0x95, 0x9a, 0x83, 0x49, 0xe2, 0x14, 0x4f, 0xa8}}
ID2D1CommandSink5 :: struct #raw_union {
	#subtype parent: ID2D1CommandSink4,
	using vtable: ^ID2D1CommandSink5_VTable,
}
ID2D1CommandSink5_VTable :: struct {
	using id2d1commandsink4_vtable: ID2D1CommandSink4_VTable,
	BlendImage: proc "system" (this: ^ID2D1CommandSink5, image: ^ID2D1Image, blendMode: D2D1_BLEND_MODE, targetOffset: ^D2D_POINT_2F, imageRectangle: ^D2D_RECT_F, interpolationMode: D2D1_INTERPOLATION_MODE) -> win32.HRESULT,
}

ID2D1ComputeInfo_UUID := &win32.IID{0x5598b14b, 0x9fd7, 0x48b7, {0x9b, 0xdb, 0x8f, 0x09, 0x64, 0xeb, 0x38, 0xbc}}
ID2D1ComputeInfo :: struct #raw_union {
	#subtype parent: ID2D1RenderInfo,
	using vtable: ^ID2D1ComputeInfo_VTable,
}
ID2D1ComputeInfo_VTable :: struct {
	using id2d1renderinfo_vtable: ID2D1RenderInfo_VTable,
	SetComputeShaderConstantBuffer: proc "system" (this: ^ID2D1ComputeInfo, buffer: ^u8, bufferCount: u32) -> win32.HRESULT,
	SetComputeShader: proc "system" (this: ^ID2D1ComputeInfo, shaderId: ^win32.GUID) -> win32.HRESULT,
	SetResourceTexture: proc "system" (this: ^ID2D1ComputeInfo, textureIndex: u32, resourceTexture: ^ID2D1ResourceTexture) -> win32.HRESULT,
}

ID2D1ComputeTransform_UUID := &win32.IID{0x0d85573c, 0x01e3, 0x4f7d, {0xbf, 0xd9, 0x0d, 0x60, 0x60, 0x8b, 0xf3, 0xc3}}
ID2D1ComputeTransform :: struct #raw_union {
	#subtype parent: ID2D1Transform,
	using vtable: ^ID2D1ComputeTransform_VTable,
}
ID2D1ComputeTransform_VTable :: struct {
	using id2d1transform_vtable: ID2D1Transform_VTable,
	SetComputeInfo: proc "system" (this: ^ID2D1ComputeTransform, computeInfo: ^ID2D1ComputeInfo) -> win32.HRESULT,
	CalculateThreadgroups: proc "system" (this: ^ID2D1ComputeTransform, outputRect: ^win32.RECT, dimensionX: ^u32, dimensionY: ^u32, dimensionZ: ^u32) -> win32.HRESULT,
}

ID2D1ConcreteTransform_UUID := &win32.IID{0x1a799d8a, 0x69f7, 0x4e4c, {0x9f, 0xed, 0x43, 0x7c, 0xcc, 0x66, 0x84, 0xcc}}
ID2D1ConcreteTransform :: struct #raw_union {
	#subtype parent: ID2D1TransformNode,
	using vtable: ^ID2D1ConcreteTransform_VTable,
}
ID2D1ConcreteTransform_VTable :: struct {
	using id2d1transformnode_vtable: ID2D1TransformNode_VTable,
	SetOutputBuffer: proc "system" (this: ^ID2D1ConcreteTransform, bufferPrecision: D2D1_BUFFER_PRECISION, channelDepth: D2D1_CHANNEL_DEPTH) -> win32.HRESULT,
	SetCached: proc "system" (this: ^ID2D1ConcreteTransform, isCached: win32.BOOL),
}

ID2D1DCRenderTarget_UUID := &win32.IID{0x1c51bc64, 0xde61, 0x46fd, {0x98, 0x99, 0x63, 0xa5, 0xd8, 0xf0, 0x39, 0x50}}
ID2D1DCRenderTarget :: struct #raw_union {
	#subtype parent: ID2D1RenderTarget,
	using vtable: ^ID2D1DCRenderTarget_VTable,
}
ID2D1DCRenderTarget_VTable :: struct {
	using id2d1rendertarget_vtable: ID2D1RenderTarget_VTable,
	BindDC: proc "system" (this: ^ID2D1DCRenderTarget, hDC: win32.HDC, pSubRect: ^win32.RECT) -> win32.HRESULT,
}

ID2D1Device_UUID := &win32.IID{0x47dd575d, 0xac05, 0x4cdd, {0x80, 0x49, 0x9b, 0x02, 0xcd, 0x16, 0xf4, 0x4c}}
ID2D1Device :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1Device_VTable,
}
ID2D1Device_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	CreateDeviceContext: proc "system" (this: ^ID2D1Device, options: D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext: ^^ID2D1DeviceContext) -> win32.HRESULT,
	CreatePrintControl: proc "system" (this: ^ID2D1Device, wicFactory: ^IWICImagingFactory, documentTarget: ^IPrintDocumentPackageTarget, printControlProperties: ^D2D1_PRINT_CONTROL_PROPERTIES, printControl: ^^ID2D1PrintControl) -> win32.HRESULT,
	SetMaximumTextureMemory: proc "system" (this: ^ID2D1Device, maximumInBytes: u64),
	GetMaximumTextureMemory: proc "system" (this: ^ID2D1Device) -> u64,
	ClearResources: proc "system" (this: ^ID2D1Device, millisecondsSinceUse: u32),
}

ID2D1Device1_UUID := &win32.IID{0xd21768e1, 0x23a4, 0x4823, {0xa1, 0x4b, 0x7c, 0x3e, 0xba, 0x85, 0xd6, 0x58}}
ID2D1Device1 :: struct #raw_union {
	#subtype parent: ID2D1Device,
	using vtable: ^ID2D1Device1_VTable,
}
ID2D1Device1_VTable :: struct {
	using id2d1device_vtable: ID2D1Device_VTable,
	GetRenderingPriority: proc "system" (this: ^ID2D1Device1) -> D2D1_RENDERING_PRIORITY,
	SetRenderingPriority: proc "system" (this: ^ID2D1Device1, renderingPriority: D2D1_RENDERING_PRIORITY),
	CreateDeviceContext1: proc "system" (this: ^ID2D1Device1, options: D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext1: ^^ID2D1DeviceContext1) -> win32.HRESULT,
}

ID2D1Device2_UUID := &win32.IID{0xa44472e1, 0x8dfb, 0x4e60, {0x84, 0x92, 0x6e, 0x28, 0x61, 0xc9, 0xca, 0x8b}}
ID2D1Device2 :: struct #raw_union {
	#subtype parent: ID2D1Device1,
	using vtable: ^ID2D1Device2_VTable,
}
ID2D1Device2_VTable :: struct {
	using id2d1device1_vtable: ID2D1Device1_VTable,
	CreateDeviceContext2: proc "system" (this: ^ID2D1Device2, options: D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext2: ^^ID2D1DeviceContext2) -> win32.HRESULT,
	FlushDeviceContexts: proc "system" (this: ^ID2D1Device2, bitmap: ^ID2D1Bitmap),
	GetDxgiDevice: proc "system" (this: ^ID2D1Device2, dxgiDevice: ^^dxgi.IDevice) -> win32.HRESULT,
}

ID2D1Device3_UUID := &win32.IID{0x852f2087, 0x802c, 0x4037, {0xab, 0x60, 0xff, 0x2e, 0x7e, 0xe6, 0xfc, 0x01}}
ID2D1Device3 :: struct #raw_union {
	#subtype parent: ID2D1Device2,
	using vtable: ^ID2D1Device3_VTable,
}
ID2D1Device3_VTable :: struct {
	using id2d1device2_vtable: ID2D1Device2_VTable,
	CreateDeviceContext3: proc "system" (this: ^ID2D1Device3, options: D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext3: ^^ID2D1DeviceContext3) -> win32.HRESULT,
}

ID2D1Device4_UUID := &win32.IID{0xd7bdb159, 0x5683, 0x4a46, {0xbc, 0x9c, 0x72, 0xdc, 0x72, 0x0b, 0x85, 0x8b}}
ID2D1Device4 :: struct #raw_union {
	#subtype parent: ID2D1Device3,
	using vtable: ^ID2D1Device4_VTable,
}
ID2D1Device4_VTable :: struct {
	using id2d1device3_vtable: ID2D1Device3_VTable,
	CreateDeviceContext4: proc "system" (this: ^ID2D1Device4, options: D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext4: ^^ID2D1DeviceContext4) -> win32.HRESULT,
	SetMaximumColorGlyphCacheMemory: proc "system" (this: ^ID2D1Device4, maximumInBytes: u64),
	GetMaximumColorGlyphCacheMemory: proc "system" (this: ^ID2D1Device4) -> u64,
}

ID2D1Device5_UUID := &win32.IID{0xd55ba0a4, 0x6405, 0x4694, {0xae, 0xf5, 0x08, 0xee, 0x1a, 0x43, 0x58, 0xb4}}
ID2D1Device5 :: struct #raw_union {
	#subtype parent: ID2D1Device4,
	using vtable: ^ID2D1Device5_VTable,
}
ID2D1Device5_VTable :: struct {
	using id2d1device4_vtable: ID2D1Device4_VTable,
	CreateDeviceContext5: proc "system" (this: ^ID2D1Device5, options: D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext5: ^^ID2D1DeviceContext5) -> win32.HRESULT,
}

ID2D1Device6_UUID := &win32.IID{0x7bfef914, 0x2d75, 0x4bad, {0xbe, 0x87, 0xe1, 0x8d, 0xdb, 0x07, 0x7b, 0x6d}}
ID2D1Device6 :: struct #raw_union {
	#subtype parent: ID2D1Device5,
	using vtable: ^ID2D1Device6_VTable,
}
ID2D1Device6_VTable :: struct {
	using id2d1device5_vtable: ID2D1Device5_VTable,
	CreateDeviceContext6: proc "system" (this: ^ID2D1Device6, options: D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext6: ^^ID2D1DeviceContext6) -> win32.HRESULT,
}

ID2D1DeviceContext_UUID := &win32.IID{0xe8f7fe7a, 0x191c, 0x466d, {0xad, 0x95, 0x97, 0x56, 0x78, 0xbd, 0xa9, 0x98}}
ID2D1DeviceContext :: struct #raw_union {
	#subtype parent: ID2D1RenderTarget,
	using vtable: ^ID2D1DeviceContext_VTable,
}
ID2D1DeviceContext_VTable :: struct {
	using id2d1rendertarget_vtable: ID2D1RenderTarget_VTable,
	CreateBitmap1: proc "system" (this: ^ID2D1DeviceContext, size: D2D_SIZE_U, sourceData: rawptr, pitch: u32, bitmapProperties: ^D2D1_BITMAP_PROPERTIES1, bitmap: ^^ID2D1Bitmap1) -> win32.HRESULT,
	CreateBitmapFromWicBitmap1: proc "system" (this: ^ID2D1DeviceContext, wicBitmapSource: ^IWICBitmapSource, bitmapProperties: ^D2D1_BITMAP_PROPERTIES1, bitmap: ^^ID2D1Bitmap1) -> win32.HRESULT,
	CreateColorContext: proc "system" (this: ^ID2D1DeviceContext, space: D2D1_COLOR_SPACE, profile: ^u8, profileSize: u32, colorContext: ^^ID2D1ColorContext) -> win32.HRESULT,
	CreateColorContextFromFilename: proc "system" (this: ^ID2D1DeviceContext, filename: ^win32.WCHAR, colorContext: ^^ID2D1ColorContext) -> win32.HRESULT,
	CreateColorContextFromWicColorContext: proc "system" (this: ^ID2D1DeviceContext, wicColorContext: ^IWICColorContext, colorContext: ^^ID2D1ColorContext) -> win32.HRESULT,
	CreateBitmapFromDxgiSurface: proc "system" (this: ^ID2D1DeviceContext, surface: ^dxgi.ISurface, bitmapProperties: ^D2D1_BITMAP_PROPERTIES1, bitmap: ^^ID2D1Bitmap1) -> win32.HRESULT,
	CreateEffect: proc "system" (this: ^ID2D1DeviceContext, effectId: ^win32.GUID, effect: ^^ID2D1Effect) -> win32.HRESULT,
	CreateGradientStopCollection1: proc "system" (this: ^ID2D1DeviceContext, straightAlphaGradientStops: ^D2D1_GRADIENT_STOP, straightAlphaGradientStopsCount: u32, preInterpolationSpace: D2D1_COLOR_SPACE, postInterpolationSpace: D2D1_COLOR_SPACE, bufferPrecision: D2D1_BUFFER_PRECISION, extendMode: D2D1_EXTEND_MODE, colorInterpolationMode: D2D1_COLOR_INTERPOLATION_MODE, gradientStopCollection1: ^^ID2D1GradientStopCollection1) -> win32.HRESULT,
	CreateImageBrush: proc "system" (this: ^ID2D1DeviceContext, image: ^ID2D1Image, imageBrushProperties: ^D2D1_IMAGE_BRUSH_PROPERTIES, brushProperties: ^D2D1_BRUSH_PROPERTIES, imageBrush: ^^ID2D1ImageBrush) -> win32.HRESULT,
	CreateBitmapBrush1: proc "system" (this: ^ID2D1DeviceContext, bitmap: ^ID2D1Bitmap, bitmapBrushProperties: ^D2D1_BITMAP_BRUSH_PROPERTIES1, brushProperties: ^D2D1_BRUSH_PROPERTIES, bitmapBrush: ^^ID2D1BitmapBrush1) -> win32.HRESULT,
	CreateCommandList: proc "system" (this: ^ID2D1DeviceContext, commandList: ^^ID2D1CommandList) -> win32.HRESULT,
	IsDxgiFormatSupported: proc "system" (this: ^ID2D1DeviceContext, format: dxgi.FORMAT) -> win32.BOOL,
	IsBufferPrecisionSupported: proc "system" (this: ^ID2D1DeviceContext, bufferPrecision: D2D1_BUFFER_PRECISION) -> win32.BOOL,
	GetImageLocalBounds: proc "system" (this: ^ID2D1DeviceContext, image: ^ID2D1Image, localBounds: ^D2D_RECT_F) -> win32.HRESULT,
	GetImageWorldBounds: proc "system" (this: ^ID2D1DeviceContext, image: ^ID2D1Image, worldBounds: ^D2D_RECT_F) -> win32.HRESULT,
	GetGlyphRunWorldBounds: proc "system" (this: ^ID2D1DeviceContext, baselineOrigin: D2D_POINT_2F, glyphRun: ^DWRITE_GLYPH_RUN, measuringMode: DWRITE_MEASURING_MODE, bounds: ^D2D_RECT_F) -> win32.HRESULT,
	GetDevice: proc "system" (this: ^ID2D1DeviceContext, device: ^^ID2D1Device),
	SetTarget: proc "system" (this: ^ID2D1DeviceContext, image: ^ID2D1Image),
	GetTarget: proc "system" (this: ^ID2D1DeviceContext, image: ^^ID2D1Image),
	SetRenderingControls: proc "system" (this: ^ID2D1DeviceContext, renderingControls: ^D2D1_RENDERING_CONTROLS),
	GetRenderingControls: proc "system" (this: ^ID2D1DeviceContext, renderingControls: ^D2D1_RENDERING_CONTROLS),
	SetPrimitiveBlend: proc "system" (this: ^ID2D1DeviceContext, primitiveBlend: D2D1_PRIMITIVE_BLEND),
	GetPrimitiveBlend: proc "system" (this: ^ID2D1DeviceContext) -> D2D1_PRIMITIVE_BLEND,
	SetUnitMode: proc "system" (this: ^ID2D1DeviceContext, unitMode: D2D1_UNIT_MODE),
	GetUnitMode: proc "system" (this: ^ID2D1DeviceContext) -> D2D1_UNIT_MODE,
	DrawGlyphRun1: proc "system" (this: ^ID2D1DeviceContext, baselineOrigin: D2D_POINT_2F, glyphRun: ^DWRITE_GLYPH_RUN, glyphRunDescription: ^DWRITE_GLYPH_RUN_DESCRIPTION, foregroundBrush: ^ID2D1Brush, measuringMode: DWRITE_MEASURING_MODE),
	DrawImage: proc "system" (this: ^ID2D1DeviceContext, image: ^ID2D1Image, targetOffset: ^D2D_POINT_2F, imageRectangle: ^D2D_RECT_F, interpolationMode: D2D1_INTERPOLATION_MODE, compositeMode: D2D1_COMPOSITE_MODE),
	DrawGdiMetafile: proc "system" (this: ^ID2D1DeviceContext, gdiMetafile: ^ID2D1GdiMetafile, targetOffset: ^D2D_POINT_2F),
	DrawBitmap1: proc "system" (this: ^ID2D1DeviceContext, bitmap: ^ID2D1Bitmap, destinationRectangle: ^D2D_RECT_F, opacity: f32, interpolationMode: D2D1_INTERPOLATION_MODE, sourceRectangle: ^D2D_RECT_F, perspectiveTransform: ^D2D_MATRIX_4X4_F),
	PushLayer1: proc "system" (this: ^ID2D1DeviceContext, layerParameters: ^D2D1_LAYER_PARAMETERS1, layer: ^ID2D1Layer),
	InvalidateEffectInputRectangle: proc "system" (this: ^ID2D1DeviceContext, effect: ^ID2D1Effect, input: u32, inputRectangle: ^D2D_RECT_F) -> win32.HRESULT,
	GetEffectInvalidRectangleCount: proc "system" (this: ^ID2D1DeviceContext, effect: ^ID2D1Effect, rectangleCount: ^u32) -> win32.HRESULT,
	GetEffectInvalidRectangles: proc "system" (this: ^ID2D1DeviceContext, effect: ^ID2D1Effect, rectangles: ^D2D_RECT_F, rectanglesCount: u32) -> win32.HRESULT,
	GetEffectRequiredInputRectangles: proc "system" (this: ^ID2D1DeviceContext, renderEffect: ^ID2D1Effect, renderImageRectangle: ^D2D_RECT_F, inputDescriptions: ^D2D1_EFFECT_INPUT_DESCRIPTION, requiredInputRects: ^D2D_RECT_F, inputCount: u32) -> win32.HRESULT,
	FillOpacityMask1: proc "system" (this: ^ID2D1DeviceContext, opacityMask: ^ID2D1Bitmap, brush: ^ID2D1Brush, destinationRectangle: ^D2D_RECT_F, sourceRectangle: ^D2D_RECT_F),
}

ID2D1DeviceContext1_UUID := &win32.IID{0xd37f57e4, 0x6908, 0x459f, {0xa1, 0x99, 0xe7, 0x2f, 0x24, 0xf7, 0x99, 0x87}}
ID2D1DeviceContext1 :: struct #raw_union {
	#subtype parent: ID2D1DeviceContext,
	using vtable: ^ID2D1DeviceContext1_VTable,
}
ID2D1DeviceContext1_VTable :: struct {
	using id2d1devicecontext_vtable: ID2D1DeviceContext_VTable,
	CreateFilledGeometryRealization: proc "system" (this: ^ID2D1DeviceContext1, geometry: ^ID2D1Geometry, flatteningTolerance: f32, geometryRealization: ^^ID2D1GeometryRealization) -> win32.HRESULT,
	CreateStrokedGeometryRealization: proc "system" (this: ^ID2D1DeviceContext1, geometry: ^ID2D1Geometry, flatteningTolerance: f32, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle, geometryRealization: ^^ID2D1GeometryRealization) -> win32.HRESULT,
	DrawGeometryRealization: proc "system" (this: ^ID2D1DeviceContext1, geometryRealization: ^ID2D1GeometryRealization, brush: ^ID2D1Brush),
}

ID2D1DeviceContext2_UUID := &win32.IID{0x394ea6a3, 0x0c34, 0x4321, {0x95, 0x0b, 0x6c, 0xa2, 0x0f, 0x0b, 0xe6, 0xc7}}
ID2D1DeviceContext2 :: struct #raw_union {
	#subtype parent: ID2D1DeviceContext1,
	using vtable: ^ID2D1DeviceContext2_VTable,
}
ID2D1DeviceContext2_VTable :: struct {
	using id2d1devicecontext1_vtable: ID2D1DeviceContext1_VTable,
	CreateInk: proc "system" (this: ^ID2D1DeviceContext2, startPoint: ^D2D1_INK_POINT, ink: ^^ID2D1Ink) -> win32.HRESULT,
	CreateInkStyle: proc "system" (this: ^ID2D1DeviceContext2, inkStyleProperties: ^D2D1_INK_STYLE_PROPERTIES, inkStyle: ^^ID2D1InkStyle) -> win32.HRESULT,
	CreateGradientMesh: proc "system" (this: ^ID2D1DeviceContext2, patches: ^D2D1_GRADIENT_MESH_PATCH, patchesCount: u32, gradientMesh: ^^ID2D1GradientMesh) -> win32.HRESULT,
	CreateImageSourceFromWic: proc "system" (this: ^ID2D1DeviceContext2, wicBitmapSource: ^IWICBitmapSource, loadingOptions: D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphaMode: D2D1_ALPHA_MODE, imageSource: ^^ID2D1ImageSourceFromWic) -> win32.HRESULT,
	CreateLookupTable3D: proc "system" (this: ^ID2D1DeviceContext2, precision: D2D1_BUFFER_PRECISION, extents: ^u32, data: ^u8, dataCount: u32, strides: ^u32, lookupTable: ^^ID2D1LookupTable3D) -> win32.HRESULT,
	CreateImageSourceFromDxgi: proc "system" (this: ^ID2D1DeviceContext2, surfaces: ^^dxgi.ISurface, surfaceCount: u32, colorSpace: dxgi.COLOR_SPACE_TYPE, options: D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imageSource: ^^ID2D1ImageSource) -> win32.HRESULT,
	GetGradientMeshWorldBounds: proc "system" (this: ^ID2D1DeviceContext2, gradientMesh: ^ID2D1GradientMesh, pBounds: ^D2D_RECT_F) -> win32.HRESULT,
	DrawInk: proc "system" (this: ^ID2D1DeviceContext2, ink: ^ID2D1Ink, brush: ^ID2D1Brush, inkStyle: ^ID2D1InkStyle),
	DrawGradientMesh: proc "system" (this: ^ID2D1DeviceContext2, gradientMesh: ^ID2D1GradientMesh),
	DrawGdiMetafile1: proc "system" (this: ^ID2D1DeviceContext2, gdiMetafile: ^ID2D1GdiMetafile, destinationRectangle: ^D2D_RECT_F, sourceRectangle: ^D2D_RECT_F),
	CreateTransformedImageSource: proc "system" (this: ^ID2D1DeviceContext2, imageSource: ^ID2D1ImageSource, properties: ^D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES, transformedImageSource: ^^ID2D1TransformedImageSource) -> win32.HRESULT,
}

ID2D1DeviceContext3_UUID := &win32.IID{0x235a7496, 0x8351, 0x414c, {0xbc, 0xd4, 0x66, 0x72, 0xab, 0x2d, 0x8e, 0x00}}
ID2D1DeviceContext3 :: struct #raw_union {
	#subtype parent: ID2D1DeviceContext2,
	using vtable: ^ID2D1DeviceContext3_VTable,
}
ID2D1DeviceContext3_VTable :: struct {
	using id2d1devicecontext2_vtable: ID2D1DeviceContext2_VTable,
	CreateSpriteBatch: proc "system" (this: ^ID2D1DeviceContext3, spriteBatch: ^^ID2D1SpriteBatch) -> win32.HRESULT,
	DrawSpriteBatch: proc "system" (this: ^ID2D1DeviceContext3, spriteBatch: ^ID2D1SpriteBatch, startIndex: u32, spriteCount: u32, bitmap: ^ID2D1Bitmap, interpolationMode: D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions: D2D1_SPRITE_OPTIONS),
}

ID2D1DeviceContext4_UUID := &win32.IID{0x8c427831, 0x3d90, 0x4476, {0xb6, 0x47, 0xc4, 0xfa, 0xe3, 0x49, 0xe4, 0xdb}}
ID2D1DeviceContext4 :: struct #raw_union {
	#subtype parent: ID2D1DeviceContext3,
	using vtable: ^ID2D1DeviceContext4_VTable,
}
ID2D1DeviceContext4_VTable :: struct {
	using id2d1devicecontext3_vtable: ID2D1DeviceContext3_VTable,
	CreateSvgGlyphStyle: proc "system" (this: ^ID2D1DeviceContext4, svgGlyphStyle: ^^ID2D1SvgGlyphStyle) -> win32.HRESULT,
	DrawText1: proc "system" (this: ^ID2D1DeviceContext4, _string: ^win32.WCHAR, stringLength: u32, textFormat: ^IDWriteTextFormat, layoutRect: ^D2D_RECT_F, defaultFillBrush: ^ID2D1Brush, svgGlyphStyle: ^ID2D1SvgGlyphStyle, colorPaletteIndex: u32, options: D2D1_DRAW_TEXT_OPTIONS, measuringMode: DWRITE_MEASURING_MODE),
	DrawTextLayout1: proc "system" (this: ^ID2D1DeviceContext4, origin: D2D_POINT_2F, textLayout: ^IDWriteTextLayout, defaultFillBrush: ^ID2D1Brush, svgGlyphStyle: ^ID2D1SvgGlyphStyle, colorPaletteIndex: u32, options: D2D1_DRAW_TEXT_OPTIONS),
	DrawColorBitmapGlyphRun: proc "system" (this: ^ID2D1DeviceContext4, glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS, baselineOrigin: D2D_POINT_2F, glyphRun: ^DWRITE_GLYPH_RUN, measuringMode: DWRITE_MEASURING_MODE, bitmapSnapOption: D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION),
	DrawSvgGlyphRun: proc "system" (this: ^ID2D1DeviceContext4, baselineOrigin: D2D_POINT_2F, glyphRun: ^DWRITE_GLYPH_RUN, defaultFillBrush: ^ID2D1Brush, svgGlyphStyle: ^ID2D1SvgGlyphStyle, colorPaletteIndex: u32, measuringMode: DWRITE_MEASURING_MODE),
	GetColorBitmapGlyphImage: proc "system" (this: ^ID2D1DeviceContext4, glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS, glyphOrigin: D2D_POINT_2F, fontFace: ^IDWriteFontFace, fontEmSize: f32, glyphIndex: u16, isSideways: win32.BOOL, worldTransform: ^D2D_MATRIX_3X2_F, dpiX: f32, dpiY: f32, glyphTransform: ^D2D_MATRIX_3X2_F, glyphImage: ^^ID2D1Image) -> win32.HRESULT,
	GetSvgGlyphImage: proc "system" (this: ^ID2D1DeviceContext4, glyphOrigin: D2D_POINT_2F, fontFace: ^IDWriteFontFace, fontEmSize: f32, glyphIndex: u16, isSideways: win32.BOOL, worldTransform: ^D2D_MATRIX_3X2_F, defaultFillBrush: ^ID2D1Brush, svgGlyphStyle: ^ID2D1SvgGlyphStyle, colorPaletteIndex: u32, glyphTransform: ^D2D_MATRIX_3X2_F, glyphImage: ^^ID2D1CommandList) -> win32.HRESULT,
}

ID2D1DeviceContext5_UUID := &win32.IID{0x7836d248, 0x68cc, 0x4df6, {0xb9, 0xe8, 0xde, 0x99, 0x1b, 0xf6, 0x2e, 0xb7}}
ID2D1DeviceContext5 :: struct #raw_union {
	#subtype parent: ID2D1DeviceContext4,
	using vtable: ^ID2D1DeviceContext5_VTable,
}
ID2D1DeviceContext5_VTable :: struct {
	using id2d1devicecontext4_vtable: ID2D1DeviceContext4_VTable,
	CreateSvgDocument: proc "system" (this: ^ID2D1DeviceContext5, inputXmlStream: ^win32.IStream, viewportSize: D2D_SIZE_F, svgDocument: ^^ID2D1SvgDocument) -> win32.HRESULT,
	DrawSvgDocument: proc "system" (this: ^ID2D1DeviceContext5, svgDocument: ^ID2D1SvgDocument),
	CreateColorContextFromDxgiColorSpace: proc "system" (this: ^ID2D1DeviceContext5, colorSpace: dxgi.COLOR_SPACE_TYPE, colorContext: ^^ID2D1ColorContext1) -> win32.HRESULT,
	CreateColorContextFromSimpleColorProfile: proc "system" (this: ^ID2D1DeviceContext5, simpleProfile: ^D2D1_SIMPLE_COLOR_PROFILE, colorContext: ^^ID2D1ColorContext1) -> win32.HRESULT,
}

ID2D1DeviceContext6_UUID := &win32.IID{0x985f7e37, 0x4ed0, 0x4a19, {0x98, 0xa3, 0x15, 0xb0, 0xed, 0xfd, 0xe3, 0x06}}
ID2D1DeviceContext6 :: struct #raw_union {
	#subtype parent: ID2D1DeviceContext5,
	using vtable: ^ID2D1DeviceContext6_VTable,
}
ID2D1DeviceContext6_VTable :: struct {
	using id2d1devicecontext5_vtable: ID2D1DeviceContext5_VTable,
	BlendImage: proc "system" (this: ^ID2D1DeviceContext6, image: ^ID2D1Image, blendMode: D2D1_BLEND_MODE, targetOffset: ^D2D_POINT_2F, imageRectangle: ^D2D_RECT_F, interpolationMode: D2D1_INTERPOLATION_MODE),
}

ID2D1DrawInfo_UUID := &win32.IID{0x693ce632, 0x7f2f, 0x45de, {0x93, 0xfe, 0x18, 0xd8, 0x8b, 0x37, 0xaa, 0x21}}
ID2D1DrawInfo :: struct #raw_union {
	#subtype parent: ID2D1RenderInfo,
	using vtable: ^ID2D1DrawInfo_VTable,
}
ID2D1DrawInfo_VTable :: struct {
	using id2d1renderinfo_vtable: ID2D1RenderInfo_VTable,
	SetPixelShaderConstantBuffer: proc "system" (this: ^ID2D1DrawInfo, buffer: ^u8, bufferCount: u32) -> win32.HRESULT,
	SetResourceTexture: proc "system" (this: ^ID2D1DrawInfo, textureIndex: u32, resourceTexture: ^ID2D1ResourceTexture) -> win32.HRESULT,
	SetVertexShaderConstantBuffer: proc "system" (this: ^ID2D1DrawInfo, buffer: ^u8, bufferCount: u32) -> win32.HRESULT,
	SetPixelShader: proc "system" (this: ^ID2D1DrawInfo, shaderId: ^win32.GUID, pixelOptions: D2D1_PIXEL_OPTIONS) -> win32.HRESULT,
	SetVertexProcessing: proc "system" (this: ^ID2D1DrawInfo, vertexBuffer: ^ID2D1VertexBuffer, vertexOptions: D2D1_VERTEX_OPTIONS, blendDescription: ^D2D1_BLEND_DESCRIPTION, vertexRange: ^D2D1_VERTEX_RANGE, vertexShader: ^win32.GUID) -> win32.HRESULT,
}

ID2D1DrawingStateBlock_UUID := &win32.IID{0x28506e39, 0xebf6, 0x46a1, {0xbb, 0x47, 0xfd, 0x85, 0x56, 0x5a, 0xb9, 0x57}}
ID2D1DrawingStateBlock :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1DrawingStateBlock_VTable,
}
ID2D1DrawingStateBlock_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetDescription: proc "system" (this: ^ID2D1DrawingStateBlock, stateDescription: ^D2D1_DRAWING_STATE_DESCRIPTION),
	SetDescription: proc "system" (this: ^ID2D1DrawingStateBlock, stateDescription: ^D2D1_DRAWING_STATE_DESCRIPTION),
	SetTextRenderingParams: proc "system" (this: ^ID2D1DrawingStateBlock, textRenderingParams: ^IDWriteRenderingParams),
	GetTextRenderingParams: proc "system" (this: ^ID2D1DrawingStateBlock, textRenderingParams: ^^IDWriteRenderingParams),
}

ID2D1DrawingStateBlock1_UUID := &win32.IID{0x689f1f85, 0xc72e, 0x4e33, {0x8f, 0x19, 0x85, 0x75, 0x4e, 0xfd, 0x5a, 0xce}}
ID2D1DrawingStateBlock1 :: struct #raw_union {
	#subtype parent: ID2D1DrawingStateBlock,
	using vtable: ^ID2D1DrawingStateBlock1_VTable,
}
ID2D1DrawingStateBlock1_VTable :: struct {
	using id2d1drawingstateblock_vtable: ID2D1DrawingStateBlock_VTable,
	GetDescription1: proc "system" (this: ^ID2D1DrawingStateBlock1, stateDescription: ^D2D1_DRAWING_STATE_DESCRIPTION1),
	SetDescription1: proc "system" (this: ^ID2D1DrawingStateBlock1, stateDescription: ^D2D1_DRAWING_STATE_DESCRIPTION1),
}

ID2D1DrawTransform_UUID := &win32.IID{0x36bfdcb6, 0x9739, 0x435d, {0xa3, 0x0d, 0xa6, 0x53, 0xbe, 0xff, 0x6a, 0x6f}}
ID2D1DrawTransform :: struct #raw_union {
	#subtype parent: ID2D1Transform,
	using vtable: ^ID2D1DrawTransform_VTable,
}
ID2D1DrawTransform_VTable :: struct {
	using id2d1transform_vtable: ID2D1Transform_VTable,
	SetDrawInfo: proc "system" (this: ^ID2D1DrawTransform, drawInfo: ^ID2D1DrawInfo) -> win32.HRESULT,
}

ID2D1Effect_UUID := &win32.IID{0x28211a43, 0x7d89, 0x476f, {0x81, 0x81, 0x2d, 0x61, 0x59, 0xb2, 0x20, 0xad}}
ID2D1Effect :: struct #raw_union {
	#subtype parent: ID2D1Properties,
	using vtable: ^ID2D1Effect_VTable,
}
ID2D1Effect_VTable :: struct {
	using id2d1properties_vtable: ID2D1Properties_VTable,
	SetInput: proc "system" (this: ^ID2D1Effect, index: u32, input: ^ID2D1Image, invalidate: win32.BOOL),
	SetInputCount: proc "system" (this: ^ID2D1Effect, inputCount: u32) -> win32.HRESULT,
	GetInput: proc "system" (this: ^ID2D1Effect, index: u32, input: ^^ID2D1Image),
	GetInputCount: proc "system" (this: ^ID2D1Effect) -> u32,
	GetOutput: proc "system" (this: ^ID2D1Effect, outputImage: ^^ID2D1Image),
}

ID2D1EffectContext_UUID := &win32.IID{0x3d9f916b, 0x27dc, 0x4ad7, {0xb4, 0xf1, 0x64, 0x94, 0x53, 0x40, 0xf5, 0x63}}
ID2D1EffectContext :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1EffectContext_VTable,
}
ID2D1EffectContext_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetDpi: proc "system" (this: ^ID2D1EffectContext, dpiX: ^f32, dpiY: ^f32),
	CreateEffect: proc "system" (this: ^ID2D1EffectContext, effectId: ^win32.GUID, effect: ^^ID2D1Effect) -> win32.HRESULT,
	GetMaximumSupportedFeatureLevel: proc "system" (this: ^ID2D1EffectContext, featureLevels: ^d3d11.FEATURE_LEVEL, featureLevelsCount: u32, maximumSupportedFeatureLevel: ^d3d11.FEATURE_LEVEL) -> win32.HRESULT,
	CreateTransformNodeFromEffect: proc "system" (this: ^ID2D1EffectContext, effect: ^ID2D1Effect, transformNode: ^^ID2D1TransformNode) -> win32.HRESULT,
	CreateBlendTransform: proc "system" (this: ^ID2D1EffectContext, numInputs: u32, blendDescription: ^D2D1_BLEND_DESCRIPTION, transform: ^^ID2D1BlendTransform) -> win32.HRESULT,
	CreateBorderTransform: proc "system" (this: ^ID2D1EffectContext, extendModeX: D2D1_EXTEND_MODE, extendModeY: D2D1_EXTEND_MODE, transform: ^^ID2D1BorderTransform) -> win32.HRESULT,
	CreateOffsetTransform: proc "system" (this: ^ID2D1EffectContext, offset: win32.POINT, transform: ^^ID2D1OffsetTransform) -> win32.HRESULT,
	CreateBoundsAdjustmentTransform: proc "system" (this: ^ID2D1EffectContext, outputRectangle: ^win32.RECT, transform: ^^ID2D1BoundsAdjustmentTransform) -> win32.HRESULT,
	LoadPixelShader: proc "system" (this: ^ID2D1EffectContext, shaderId: ^win32.GUID, shaderBuffer: ^u8, shaderBufferCount: u32) -> win32.HRESULT,
	LoadVertexShader: proc "system" (this: ^ID2D1EffectContext, resourceId: ^win32.GUID, shaderBuffer: ^u8, shaderBufferCount: u32) -> win32.HRESULT,
	LoadComputeShader: proc "system" (this: ^ID2D1EffectContext, resourceId: ^win32.GUID, shaderBuffer: ^u8, shaderBufferCount: u32) -> win32.HRESULT,
	IsShaderLoaded: proc "system" (this: ^ID2D1EffectContext, shaderId: ^win32.GUID) -> win32.BOOL,
	CreateResourceTexture: proc "system" (this: ^ID2D1EffectContext, resourceId: ^win32.GUID, resourceTextureProperties: ^D2D1_RESOURCE_TEXTURE_PROPERTIES, data: ^u8, strides: ^u32, dataSize: u32, resourceTexture: ^^ID2D1ResourceTexture) -> win32.HRESULT,
	FindResourceTexture: proc "system" (this: ^ID2D1EffectContext, resourceId: ^win32.GUID, resourceTexture: ^^ID2D1ResourceTexture) -> win32.HRESULT,
	CreateVertexBuffer: proc "system" (this: ^ID2D1EffectContext, vertexBufferProperties: ^D2D1_VERTEX_BUFFER_PROPERTIES, resourceId: ^win32.GUID, customVertexBufferProperties: ^D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES, buffer: ^^ID2D1VertexBuffer) -> win32.HRESULT,
	FindVertexBuffer: proc "system" (this: ^ID2D1EffectContext, resourceId: ^win32.GUID, buffer: ^^ID2D1VertexBuffer) -> win32.HRESULT,
	CreateColorContext: proc "system" (this: ^ID2D1EffectContext, space: D2D1_COLOR_SPACE, profile: ^u8, profileSize: u32, colorContext: ^^ID2D1ColorContext) -> win32.HRESULT,
	CreateColorContextFromFilename: proc "system" (this: ^ID2D1EffectContext, filename: ^win32.WCHAR, colorContext: ^^ID2D1ColorContext) -> win32.HRESULT,
	CreateColorContextFromWicColorContext: proc "system" (this: ^ID2D1EffectContext, wicColorContext: ^IWICColorContext, colorContext: ^^ID2D1ColorContext) -> win32.HRESULT,
	CheckFeatureSupport: proc "system" (this: ^ID2D1EffectContext, feature: D2D1_FEATURE, featureSupportData: rawptr, featureSupportDataSize: u32) -> win32.HRESULT,
	IsBufferPrecisionSupported: proc "system" (this: ^ID2D1EffectContext, bufferPrecision: D2D1_BUFFER_PRECISION) -> win32.BOOL,
}

ID2D1EffectContext1_UUID := &win32.IID{0x84ab595a, 0xfc81, 0x4546, {0xba, 0xcd, 0xe8, 0xef, 0x4d, 0x8a, 0xbe, 0x7a}}
ID2D1EffectContext1 :: struct #raw_union {
	#subtype parent: ID2D1EffectContext,
	using vtable: ^ID2D1EffectContext1_VTable,
}
ID2D1EffectContext1_VTable :: struct {
	using id2d1effectcontext_vtable: ID2D1EffectContext_VTable,
	CreateLookupTable3D: proc "system" (this: ^ID2D1EffectContext1, precision: D2D1_BUFFER_PRECISION, extents: ^u32, data: ^u8, dataCount: u32, strides: ^u32, lookupTable: ^^ID2D1LookupTable3D) -> win32.HRESULT,
}

ID2D1EffectContext2_UUID := &win32.IID{0x577ad2a0, 0x9fc7, 0x4dda, {0x8b, 0x18, 0xda, 0xb8, 0x10, 0x14, 0x00, 0x52}}
ID2D1EffectContext2 :: struct #raw_union {
	#subtype parent: ID2D1EffectContext1,
	using vtable: ^ID2D1EffectContext2_VTable,
}
ID2D1EffectContext2_VTable :: struct {
	using id2d1effectcontext1_vtable: ID2D1EffectContext1_VTable,
	CreateColorContextFromDxgiColorSpace: proc "system" (this: ^ID2D1EffectContext2, colorSpace: dxgi.COLOR_SPACE_TYPE, colorContext: ^^ID2D1ColorContext1) -> win32.HRESULT,
	CreateColorContextFromSimpleColorProfile: proc "system" (this: ^ID2D1EffectContext2, simpleProfile: ^D2D1_SIMPLE_COLOR_PROFILE, colorContext: ^^ID2D1ColorContext1) -> win32.HRESULT,
}

ID2D1EffectImpl_UUID := &win32.IID{0xa248fd3f, 0x3e6c, 0x4e63, {0x9f, 0x03, 0x7f, 0x68, 0xec, 0xc9, 0x1d, 0xb9}}
ID2D1EffectImpl :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1EffectImpl_VTable,
}
ID2D1EffectImpl_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	Initialize: proc "system" (this: ^ID2D1EffectImpl, effectContext: ^ID2D1EffectContext, transformGraph: ^ID2D1TransformGraph) -> win32.HRESULT,
	PrepareForRender: proc "system" (this: ^ID2D1EffectImpl, changeType: D2D1_CHANGE_TYPE) -> win32.HRESULT,
	SetGraph: proc "system" (this: ^ID2D1EffectImpl, transformGraph: ^ID2D1TransformGraph) -> win32.HRESULT,
}

ID2D1EllipseGeometry_UUID := &win32.IID{0x2cd906a4, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1EllipseGeometry :: struct #raw_union {
	#subtype parent: ID2D1Geometry,
	using vtable: ^ID2D1EllipseGeometry_VTable,
}
ID2D1EllipseGeometry_VTable :: struct {
	using id2d1geometry_vtable: ID2D1Geometry_VTable,
	GetEllipse: proc "system" (this: ^ID2D1EllipseGeometry, ellipse: ^D2D1_ELLIPSE),
}

ID2D1Factory_UUID := &win32.IID{0x06152247, 0x6f50, 0x465a, {0x92, 0x45, 0x11, 0x8b, 0xfd, 0x3b, 0x60, 0x07}}
ID2D1Factory :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1Factory_VTable,
}
ID2D1Factory_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	ReloadSystemMetrics: proc "system" (this: ^ID2D1Factory) -> win32.HRESULT,
	GetDesktopDpi: proc "system" (this: ^ID2D1Factory, dpiX: ^f32, dpiY: ^f32),
	CreateRectangleGeometry: proc "system" (this: ^ID2D1Factory, rectangle: ^D2D_RECT_F, rectangleGeometry: ^^ID2D1RectangleGeometry) -> win32.HRESULT,
	CreateRoundedRectangleGeometry: proc "system" (this: ^ID2D1Factory, roundedRectangle: ^D2D1_ROUNDED_RECT, roundedRectangleGeometry: ^^ID2D1RoundedRectangleGeometry) -> win32.HRESULT,
	CreateEllipseGeometry: proc "system" (this: ^ID2D1Factory, ellipse: ^D2D1_ELLIPSE, ellipseGeometry: ^^ID2D1EllipseGeometry) -> win32.HRESULT,
	CreateGeometryGroup: proc "system" (this: ^ID2D1Factory, fillMode: D2D1_FILL_MODE, geometries: ^^ID2D1Geometry, geometriesCount: u32, geometryGroup: ^^ID2D1GeometryGroup) -> win32.HRESULT,
	CreateTransformedGeometry: proc "system" (this: ^ID2D1Factory, sourceGeometry: ^ID2D1Geometry, transform: ^D2D_MATRIX_3X2_F, transformedGeometry: ^^ID2D1TransformedGeometry) -> win32.HRESULT,
	CreatePathGeometry: proc "system" (this: ^ID2D1Factory, pathGeometry: ^^ID2D1PathGeometry) -> win32.HRESULT,
	CreateStrokeStyle: proc "system" (this: ^ID2D1Factory, strokeStyleProperties: ^D2D1_STROKE_STYLE_PROPERTIES, dashes: ^f32, dashesCount: u32, strokeStyle: ^^ID2D1StrokeStyle) -> win32.HRESULT,
	CreateDrawingStateBlock: proc "system" (this: ^ID2D1Factory, drawingStateDescription: ^D2D1_DRAWING_STATE_DESCRIPTION, textRenderingParams: ^IDWriteRenderingParams, drawingStateBlock: ^^ID2D1DrawingStateBlock) -> win32.HRESULT,
	CreateWicBitmapRenderTarget: proc "system" (this: ^ID2D1Factory, target: ^IWICBitmap, renderTargetProperties: ^D2D1_RENDER_TARGET_PROPERTIES, renderTarget: ^^ID2D1RenderTarget) -> win32.HRESULT,
	CreateHwndRenderTarget: proc "system" (this: ^ID2D1Factory, renderTargetProperties: ^D2D1_RENDER_TARGET_PROPERTIES, hwndRenderTargetProperties: ^D2D1_HWND_RENDER_TARGET_PROPERTIES, hwndRenderTarget: ^^ID2D1HwndRenderTarget) -> win32.HRESULT,
	CreateDxgiSurfaceRenderTarget: proc "system" (this: ^ID2D1Factory, dxgiSurface: ^dxgi.ISurface, renderTargetProperties: ^D2D1_RENDER_TARGET_PROPERTIES, renderTarget: ^^ID2D1RenderTarget) -> win32.HRESULT,
	CreateDCRenderTarget: proc "system" (this: ^ID2D1Factory, renderTargetProperties: ^D2D1_RENDER_TARGET_PROPERTIES, dcRenderTarget: ^^ID2D1DCRenderTarget) -> win32.HRESULT,
}

ID2D1Factory1_UUID := &win32.IID{0xbb12d362, 0xdaee, 0x4b9a, {0xaa, 0x1d, 0x14, 0xba, 0x40, 0x1c, 0xfa, 0x1f}}
ID2D1Factory1 :: struct #raw_union {
	#subtype parent: ID2D1Factory,
	using vtable: ^ID2D1Factory1_VTable,
}
ID2D1Factory1_VTable :: struct {
	using id2d1factory_vtable: ID2D1Factory_VTable,
	CreateDevice: proc "system" (this: ^ID2D1Factory1, dxgiDevice: ^dxgi.IDevice, d2dDevice: ^^ID2D1Device) -> win32.HRESULT,
	CreateStrokeStyle1: proc "system" (this: ^ID2D1Factory1, strokeStyleProperties: ^D2D1_STROKE_STYLE_PROPERTIES1, dashes: ^f32, dashesCount: u32, strokeStyle: ^^ID2D1StrokeStyle1) -> win32.HRESULT,
	CreatePathGeometry1: proc "system" (this: ^ID2D1Factory1, pathGeometry: ^^ID2D1PathGeometry1) -> win32.HRESULT,
	CreateDrawingStateBlock1: proc "system" (this: ^ID2D1Factory1, drawingStateDescription: ^D2D1_DRAWING_STATE_DESCRIPTION1, textRenderingParams: ^IDWriteRenderingParams, drawingStateBlock: ^^ID2D1DrawingStateBlock1) -> win32.HRESULT,
	CreateGdiMetafile: proc "system" (this: ^ID2D1Factory1, metafileStream: ^win32.IStream, metafile: ^^ID2D1GdiMetafile) -> win32.HRESULT,
	RegisterEffectFromStream: proc "system" (this: ^ID2D1Factory1, classId: ^win32.GUID, propertyXml: ^win32.IStream, bindings: ^D2D1_PROPERTY_BINDING, bindingsCount: u32, effectFactory: PD2D1_EFFECT_FACTORY) -> win32.HRESULT,
	RegisterEffectFromString: proc "system" (this: ^ID2D1Factory1, classId: ^win32.GUID, propertyXml: ^win32.WCHAR, bindings: ^D2D1_PROPERTY_BINDING, bindingsCount: u32, effectFactory: PD2D1_EFFECT_FACTORY) -> win32.HRESULT,
	UnregisterEffect: proc "system" (this: ^ID2D1Factory1, classId: ^win32.GUID) -> win32.HRESULT,
	GetRegisteredEffects: proc "system" (this: ^ID2D1Factory1, effects: ^win32.GUID, effectsCount: u32, effectsReturned: ^u32, effectsRegistered: ^u32) -> win32.HRESULT,
	GetEffectProperties: proc "system" (this: ^ID2D1Factory1, effectId: ^win32.GUID, properties: ^^ID2D1Properties) -> win32.HRESULT,
}

ID2D1Factory2_UUID := &win32.IID{0x94f81a73, 0x9212, 0x4376, {0x9c, 0x58, 0xb1, 0x6a, 0x3a, 0x0d, 0x39, 0x92}}
ID2D1Factory2 :: struct #raw_union {
	#subtype parent: ID2D1Factory1,
	using vtable: ^ID2D1Factory2_VTable,
}
ID2D1Factory2_VTable :: struct {
	using id2d1factory1_vtable: ID2D1Factory1_VTable,
	CreateDevice1: proc "system" (this: ^ID2D1Factory2, dxgiDevice: ^dxgi.IDevice, d2dDevice1: ^^ID2D1Device1) -> win32.HRESULT,
}

ID2D1Factory3_UUID := &win32.IID{0x0869759f, 0x4f00, 0x413f, {0xb0, 0x3e, 0x2b, 0xda, 0x45, 0x40, 0x4d, 0x0f}}
ID2D1Factory3 :: struct #raw_union {
	#subtype parent: ID2D1Factory2,
	using vtable: ^ID2D1Factory3_VTable,
}
ID2D1Factory3_VTable :: struct {
	using id2d1factory2_vtable: ID2D1Factory2_VTable,
	CreateDevice2: proc "system" (this: ^ID2D1Factory3, dxgiDevice: ^dxgi.IDevice, d2dDevice2: ^^ID2D1Device2) -> win32.HRESULT,
}

ID2D1Factory4_UUID := &win32.IID{0xbd4ec2d2, 0x0662, 0x4bee, {0xba, 0x8e, 0x6f, 0x29, 0xf0, 0x32, 0xe0, 0x96}}
ID2D1Factory4 :: struct #raw_union {
	#subtype parent: ID2D1Factory3,
	using vtable: ^ID2D1Factory4_VTable,
}
ID2D1Factory4_VTable :: struct {
	using id2d1factory3_vtable: ID2D1Factory3_VTable,
	CreateDevice3: proc "system" (this: ^ID2D1Factory4, dxgiDevice: ^dxgi.IDevice, d2dDevice3: ^^ID2D1Device3) -> win32.HRESULT,
}

ID2D1Factory5_UUID := &win32.IID{0xc4349994, 0x838e, 0x4b0f, {0x8c, 0xab, 0x44, 0x99, 0x7d, 0x9e, 0xea, 0xcc}}
ID2D1Factory5 :: struct #raw_union {
	#subtype parent: ID2D1Factory4,
	using vtable: ^ID2D1Factory5_VTable,
}
ID2D1Factory5_VTable :: struct {
	using id2d1factory4_vtable: ID2D1Factory4_VTable,
	CreateDevice4: proc "system" (this: ^ID2D1Factory5, dxgiDevice: ^dxgi.IDevice, d2dDevice4: ^^ID2D1Device4) -> win32.HRESULT,
}

ID2D1Factory6_UUID := &win32.IID{0xf9976f46, 0xf642, 0x44c1, {0x97, 0xca, 0xda, 0x32, 0xea, 0x2a, 0x26, 0x35}}
ID2D1Factory6 :: struct #raw_union {
	#subtype parent: ID2D1Factory5,
	using vtable: ^ID2D1Factory6_VTable,
}
ID2D1Factory6_VTable :: struct {
	using id2d1factory5_vtable: ID2D1Factory5_VTable,
	CreateDevice5: proc "system" (this: ^ID2D1Factory6, dxgiDevice: ^dxgi.IDevice, d2dDevice5: ^^ID2D1Device5) -> win32.HRESULT,
}

ID2D1Factory7_UUID := &win32.IID{0xbdc2bdd3, 0xb96c, 0x4de6, {0xbd, 0xf7, 0x99, 0xd4, 0x74, 0x54, 0x54, 0xde}}
ID2D1Factory7 :: struct #raw_union {
	#subtype parent: ID2D1Factory6,
	using vtable: ^ID2D1Factory7_VTable,
}
ID2D1Factory7_VTable :: struct {
	using id2d1factory6_vtable: ID2D1Factory6_VTable,
	CreateDevice6: proc "system" (this: ^ID2D1Factory7, dxgiDevice: ^dxgi.IDevice, d2dDevice6: ^^ID2D1Device6) -> win32.HRESULT,
}

ID2D1GdiInteropRenderTarget_UUID := &win32.IID{0xe0db51c3, 0x6f77, 0x4bae, {0xb3, 0xd5, 0xe4, 0x75, 0x09, 0xb3, 0x58, 0x38}}
ID2D1GdiInteropRenderTarget :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1GdiInteropRenderTarget_VTable,
}
ID2D1GdiInteropRenderTarget_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetDC: proc "system" (this: ^ID2D1GdiInteropRenderTarget, mode: D2D1_DC_INITIALIZE_MODE, hdc: ^win32.HDC) -> win32.HRESULT,
	ReleaseDC: proc "system" (this: ^ID2D1GdiInteropRenderTarget, update: ^win32.RECT) -> win32.HRESULT,
}

ID2D1GdiMetafile_UUID := &win32.IID{0x2f543dc3, 0xcfc1, 0x4211, {0x86, 0x4f, 0xcf, 0xd9, 0x1c, 0x6f, 0x33, 0x95}}
ID2D1GdiMetafile :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1GdiMetafile_VTable,
}
ID2D1GdiMetafile_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	Stream: proc "system" (this: ^ID2D1GdiMetafile, sink: ^ID2D1GdiMetafileSink) -> win32.HRESULT,
	GetBounds: proc "system" (this: ^ID2D1GdiMetafile, bounds: ^D2D_RECT_F) -> win32.HRESULT,
}

ID2D1GdiMetafile1_UUID := &win32.IID{0x2e69f9e8, 0xdd3f, 0x4bf9, {0x95, 0xba, 0xc0, 0x4f, 0x49, 0xd7, 0x88, 0xdf}}
ID2D1GdiMetafile1 :: struct #raw_union {
	#subtype parent: ID2D1GdiMetafile,
	using vtable: ^ID2D1GdiMetafile1_VTable,
}
ID2D1GdiMetafile1_VTable :: struct {
	using id2d1gdimetafile_vtable: ID2D1GdiMetafile_VTable,
	GetDpi: proc "system" (this: ^ID2D1GdiMetafile1, dpiX: ^f32, dpiY: ^f32) -> win32.HRESULT,
	GetSourceBounds: proc "system" (this: ^ID2D1GdiMetafile1, bounds: ^D2D_RECT_F) -> win32.HRESULT,
}

ID2D1GdiMetafileSink_UUID := &win32.IID{0x82237326, 0x8111, 0x4f7c, {0xbc, 0xf4, 0xb5, 0xc1, 0x17, 0x55, 0x64, 0xfe}}
ID2D1GdiMetafileSink :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1GdiMetafileSink_VTable,
}
ID2D1GdiMetafileSink_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	ProcessRecord: proc "system" (this: ^ID2D1GdiMetafileSink, recordType: u32, recordData: rawptr, recordDataSize: u32) -> win32.HRESULT,
}

ID2D1GdiMetafileSink1_UUID := &win32.IID{0xfd0ecb6b, 0x91e6, 0x411e, {0x86, 0x55, 0x39, 0x5e, 0x76, 0x0f, 0x91, 0xb4}}
ID2D1GdiMetafileSink1 :: struct #raw_union {
	#subtype parent: ID2D1GdiMetafileSink,
	using vtable: ^ID2D1GdiMetafileSink1_VTable,
}
ID2D1GdiMetafileSink1_VTable :: struct {
	using id2d1gdimetafilesink_vtable: ID2D1GdiMetafileSink_VTable,
	ProcessRecord1: proc "system" (this: ^ID2D1GdiMetafileSink1, recordType: u32, recordData: rawptr, recordDataSize: u32, flags: u32) -> win32.HRESULT,
}

ID2D1Geometry_UUID := &win32.IID{0x2cd906a1, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1Geometry :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1Geometry_VTable,
}
ID2D1Geometry_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetBounds: proc "system" (this: ^ID2D1Geometry, worldTransform: ^D2D_MATRIX_3X2_F, bounds: ^D2D_RECT_F) -> win32.HRESULT,
	GetWidenedBounds: proc "system" (this: ^ID2D1Geometry, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, bounds: ^D2D_RECT_F) -> win32.HRESULT,
	StrokeContainsPoint: proc "system" (this: ^ID2D1Geometry, point: D2D_POINT_2F, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, contains: ^win32.BOOL) -> win32.HRESULT,
	FillContainsPoint: proc "system" (this: ^ID2D1Geometry, point: D2D_POINT_2F, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, contains: ^win32.BOOL) -> win32.HRESULT,
	CompareWithGeometry: proc "system" (this: ^ID2D1Geometry, inputGeometry: ^ID2D1Geometry, inputGeometryTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, relation: ^D2D1_GEOMETRY_RELATION) -> win32.HRESULT,
	Simplify: proc "system" (this: ^ID2D1Geometry, simplificationOption: D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, geometrySink: ^ID2D1SimplifiedGeometrySink) -> win32.HRESULT,
	Tessellate: proc "system" (this: ^ID2D1Geometry, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, tessellationSink: ^ID2D1TessellationSink) -> win32.HRESULT,
	CombineWithGeometry: proc "system" (this: ^ID2D1Geometry, inputGeometry: ^ID2D1Geometry, combineMode: D2D1_COMBINE_MODE, inputGeometryTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, geometrySink: ^ID2D1SimplifiedGeometrySink) -> win32.HRESULT,
	Outline: proc "system" (this: ^ID2D1Geometry, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, geometrySink: ^ID2D1SimplifiedGeometrySink) -> win32.HRESULT,
	ComputeArea: proc "system" (this: ^ID2D1Geometry, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, area: ^f32) -> win32.HRESULT,
	ComputeLength: proc "system" (this: ^ID2D1Geometry, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, length: ^f32) -> win32.HRESULT,
	ComputePointAtLength: proc "system" (this: ^ID2D1Geometry, length: f32, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, point: ^D2D_POINT_2F, unitTangentVector: ^D2D_POINT_2F) -> win32.HRESULT,
	Widen: proc "system" (this: ^ID2D1Geometry, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, geometrySink: ^ID2D1SimplifiedGeometrySink) -> win32.HRESULT,
}

ID2D1GeometryGroup_UUID := &win32.IID{0x2cd906a6, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1GeometryGroup :: struct #raw_union {
	#subtype parent: ID2D1Geometry,
	using vtable: ^ID2D1GeometryGroup_VTable,
}
ID2D1GeometryGroup_VTable :: struct {
	using id2d1geometry_vtable: ID2D1Geometry_VTable,
	GetFillMode: proc "system" (this: ^ID2D1GeometryGroup) -> D2D1_FILL_MODE,
	GetSourceGeometryCount: proc "system" (this: ^ID2D1GeometryGroup) -> u32,
	GetSourceGeometries: proc "system" (this: ^ID2D1GeometryGroup, geometries: ^^ID2D1Geometry, geometriesCount: u32),
}

ID2D1GeometryRealization_UUID := &win32.IID{0xa16907d7, 0xbc02, 0x4801, {0x99, 0xe8, 0x8c, 0xf7, 0xf4, 0x85, 0xf7, 0x74}}
ID2D1GeometryRealization :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1GeometryRealization_VTable,
}
ID2D1GeometryRealization_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
}

ID2D1GeometrySink_UUID := &win32.IID{0x2cd9069f, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1GeometrySink :: struct #raw_union {
	#subtype parent: ID2D1SimplifiedGeometrySink,
	using vtable: ^ID2D1GeometrySink_VTable,
}
ID2D1GeometrySink_VTable :: struct {
	using id2d1simplifiedgeometrysink_vtable: ID2D1SimplifiedGeometrySink_VTable,
	AddLine: proc "system" (this: ^ID2D1GeometrySink, point: D2D_POINT_2F),
	AddBezier: proc "system" (this: ^ID2D1GeometrySink, bezier: ^D2D1_BEZIER_SEGMENT),
	AddQuadraticBezier: proc "system" (this: ^ID2D1GeometrySink, bezier: ^D2D1_QUADRATIC_BEZIER_SEGMENT),
	AddQuadraticBeziers: proc "system" (this: ^ID2D1GeometrySink, beziers: ^D2D1_QUADRATIC_BEZIER_SEGMENT, beziersCount: u32),
	AddArc: proc "system" (this: ^ID2D1GeometrySink, arc: ^D2D1_ARC_SEGMENT),
}

ID2D1GradientMesh_UUID := &win32.IID{0xf292e401, 0xc050, 0x4cde, {0x83, 0xd7, 0x04, 0x96, 0x2d, 0x3b, 0x23, 0xc2}}
ID2D1GradientMesh :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1GradientMesh_VTable,
}
ID2D1GradientMesh_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetPatchCount: proc "system" (this: ^ID2D1GradientMesh) -> u32,
	GetPatches: proc "system" (this: ^ID2D1GradientMesh, startIndex: u32, patches: ^D2D1_GRADIENT_MESH_PATCH, patchesCount: u32) -> win32.HRESULT,
}

ID2D1GradientStopCollection_UUID := &win32.IID{0x2cd906a7, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1GradientStopCollection :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1GradientStopCollection_VTable,
}
ID2D1GradientStopCollection_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetGradientStopCount: proc "system" (this: ^ID2D1GradientStopCollection) -> u32,
	GetGradientStops: proc "system" (this: ^ID2D1GradientStopCollection, gradientStops: ^D2D1_GRADIENT_STOP, gradientStopsCount: u32),
	GetColorInterpolationGamma: proc "system" (this: ^ID2D1GradientStopCollection) -> D2D1_GAMMA,
	GetExtendMode: proc "system" (this: ^ID2D1GradientStopCollection) -> D2D1_EXTEND_MODE,
}

ID2D1GradientStopCollection1_UUID := &win32.IID{0xae1572f4, 0x5dd0, 0x4777, {0x99, 0x8b, 0x92, 0x79, 0x47, 0x2a, 0xe6, 0x3b}}
ID2D1GradientStopCollection1 :: struct #raw_union {
	#subtype parent: ID2D1GradientStopCollection,
	using vtable: ^ID2D1GradientStopCollection1_VTable,
}
ID2D1GradientStopCollection1_VTable :: struct {
	using id2d1gradientstopcollection_vtable: ID2D1GradientStopCollection_VTable,
	GetGradientStops1: proc "system" (this: ^ID2D1GradientStopCollection1, gradientStops: ^D2D1_GRADIENT_STOP, gradientStopsCount: u32),
	GetPreInterpolationSpace: proc "system" (this: ^ID2D1GradientStopCollection1) -> D2D1_COLOR_SPACE,
	GetPostInterpolationSpace: proc "system" (this: ^ID2D1GradientStopCollection1) -> D2D1_COLOR_SPACE,
	GetBufferPrecision: proc "system" (this: ^ID2D1GradientStopCollection1) -> D2D1_BUFFER_PRECISION,
	GetColorInterpolationMode: proc "system" (this: ^ID2D1GradientStopCollection1) -> D2D1_COLOR_INTERPOLATION_MODE,
}

ID2D1HwndRenderTarget_UUID := &win32.IID{0x2cd90698, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1HwndRenderTarget :: struct #raw_union {
	#subtype parent: ID2D1RenderTarget,
	using vtable: ^ID2D1HwndRenderTarget_VTable,
}
ID2D1HwndRenderTarget_VTable :: struct {
	using id2d1rendertarget_vtable: ID2D1RenderTarget_VTable,
	CheckWindowState: proc "system" (this: ^ID2D1HwndRenderTarget) -> D2D1_WINDOW_STATE,
	Resize: proc "system" (this: ^ID2D1HwndRenderTarget, pixelSize: ^D2D_SIZE_U) -> win32.HRESULT,
	GetHwnd: proc "system" (this: ^ID2D1HwndRenderTarget) -> win32.HWND,
}

ID2D1Image_UUID := &win32.IID{0x65019f75, 0x8da2, 0x497c, {0xb3, 0x2c, 0xdf, 0xa3, 0x4e, 0x48, 0xed, 0xe6}}
ID2D1Image :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1Image_VTable,
}
ID2D1Image_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
}

ID2D1ImageBrush_UUID := &win32.IID{0xfe9e984d, 0x3f95, 0x407c, {0xb5, 0xdb, 0xcb, 0x94, 0xd4, 0xe8, 0xf8, 0x7c}}
ID2D1ImageBrush :: struct #raw_union {
	#subtype parent: ID2D1Brush,
	using vtable: ^ID2D1ImageBrush_VTable,
}
ID2D1ImageBrush_VTable :: struct {
	using id2d1brush_vtable: ID2D1Brush_VTable,
	SetImage: proc "system" (this: ^ID2D1ImageBrush, image: ^ID2D1Image),
	SetExtendModeX: proc "system" (this: ^ID2D1ImageBrush, extendModeX: D2D1_EXTEND_MODE),
	SetExtendModeY: proc "system" (this: ^ID2D1ImageBrush, extendModeY: D2D1_EXTEND_MODE),
	SetInterpolationMode: proc "system" (this: ^ID2D1ImageBrush, interpolationMode: D2D1_INTERPOLATION_MODE),
	SetSourceRectangle: proc "system" (this: ^ID2D1ImageBrush, sourceRectangle: ^D2D_RECT_F),
	GetImage: proc "system" (this: ^ID2D1ImageBrush, image: ^^ID2D1Image),
	GetExtendModeX: proc "system" (this: ^ID2D1ImageBrush) -> D2D1_EXTEND_MODE,
	GetExtendModeY: proc "system" (this: ^ID2D1ImageBrush) -> D2D1_EXTEND_MODE,
	GetInterpolationMode: proc "system" (this: ^ID2D1ImageBrush) -> D2D1_INTERPOLATION_MODE,
	GetSourceRectangle: proc "system" (this: ^ID2D1ImageBrush, sourceRectangle: ^D2D_RECT_F),
}

ID2D1ImageSource_UUID := &win32.IID{0xc9b664e5, 0x74a1, 0x4378, {0x9a, 0xc2, 0xee, 0xfc, 0x37, 0xa3, 0xf4, 0xd8}}
ID2D1ImageSource :: struct #raw_union {
	#subtype parent: ID2D1Image,
	using vtable: ^ID2D1ImageSource_VTable,
}
ID2D1ImageSource_VTable :: struct {
	using id2d1image_vtable: ID2D1Image_VTable,
	OfferResources: proc "system" (this: ^ID2D1ImageSource) -> win32.HRESULT,
	TryReclaimResources: proc "system" (this: ^ID2D1ImageSource, resourcesDiscarded: ^win32.BOOL) -> win32.HRESULT,
}

ID2D1ImageSourceFromWic_UUID := &win32.IID{0x77395441, 0x1c8f, 0x4555, {0x86, 0x83, 0xf5, 0x0d, 0xab, 0x0f, 0xe7, 0x92}}
ID2D1ImageSourceFromWic :: struct #raw_union {
	#subtype parent: ID2D1ImageSource,
	using vtable: ^ID2D1ImageSourceFromWic_VTable,
}
ID2D1ImageSourceFromWic_VTable :: struct {
	using id2d1imagesource_vtable: ID2D1ImageSource_VTable,
	EnsureCached: proc "system" (this: ^ID2D1ImageSourceFromWic, rectangleToFill: ^D2D_RECT_U) -> win32.HRESULT,
	TrimCache: proc "system" (this: ^ID2D1ImageSourceFromWic, rectangleToPreserve: ^D2D_RECT_U) -> win32.HRESULT,
	GetSource: proc "system" (this: ^ID2D1ImageSourceFromWic, wicBitmapSource: ^^IWICBitmapSource),
}

ID2D1Ink_UUID := &win32.IID{0xb499923b, 0x7029, 0x478f, {0xa8, 0xb3, 0x43, 0x2c, 0x7c, 0x5f, 0x53, 0x12}}
ID2D1Ink :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1Ink_VTable,
}
ID2D1Ink_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	SetStartPoint: proc "system" (this: ^ID2D1Ink, startPoint: ^D2D1_INK_POINT),
	GetStartPoint: proc "system" (this: ^ID2D1Ink, _return: ^D2D1_INK_POINT),
	AddSegments: proc "system" (this: ^ID2D1Ink, segments: ^D2D1_INK_BEZIER_SEGMENT, segmentsCount: u32) -> win32.HRESULT,
	RemoveSegmentsAtEnd: proc "system" (this: ^ID2D1Ink, segmentsCount: u32) -> win32.HRESULT,
	SetSegments: proc "system" (this: ^ID2D1Ink, startSegment: u32, segments: ^D2D1_INK_BEZIER_SEGMENT, segmentsCount: u32) -> win32.HRESULT,
	SetSegmentAtEnd: proc "system" (this: ^ID2D1Ink, segment: ^D2D1_INK_BEZIER_SEGMENT) -> win32.HRESULT,
	GetSegmentCount: proc "system" (this: ^ID2D1Ink) -> u32,
	GetSegments: proc "system" (this: ^ID2D1Ink, startSegment: u32, segments: ^D2D1_INK_BEZIER_SEGMENT, segmentsCount: u32) -> win32.HRESULT,
	StreamAsGeometry: proc "system" (this: ^ID2D1Ink, inkStyle: ^ID2D1InkStyle, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, geometrySink: ^ID2D1SimplifiedGeometrySink) -> win32.HRESULT,
	GetBounds: proc "system" (this: ^ID2D1Ink, inkStyle: ^ID2D1InkStyle, worldTransform: ^D2D_MATRIX_3X2_F, bounds: ^D2D_RECT_F) -> win32.HRESULT,
}

ID2D1InkStyle_UUID := &win32.IID{0xbae8b344, 0x23fc, 0x4071, {0x8c, 0xb5, 0xd0, 0x5d, 0x6f, 0x07, 0x38, 0x48}}
ID2D1InkStyle :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1InkStyle_VTable,
}
ID2D1InkStyle_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	SetNibTransform: proc "system" (this: ^ID2D1InkStyle, transform: ^D2D_MATRIX_3X2_F),
	GetNibTransform: proc "system" (this: ^ID2D1InkStyle, transform: ^D2D_MATRIX_3X2_F),
	SetNibShape: proc "system" (this: ^ID2D1InkStyle, nibShape: D2D1_INK_NIB_SHAPE),
	GetNibShape: proc "system" (this: ^ID2D1InkStyle) -> D2D1_INK_NIB_SHAPE,
}

ID2D1Layer_UUID := &win32.IID{0x2cd9069b, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1Layer :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1Layer_VTable,
}
ID2D1Layer_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetSize: proc "system" (this: ^ID2D1Layer, _return: ^D2D_SIZE_F),
}

ID2D1LinearGradientBrush_UUID := &win32.IID{0x2cd906ab, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1LinearGradientBrush :: struct #raw_union {
	#subtype parent: ID2D1Brush,
	using vtable: ^ID2D1LinearGradientBrush_VTable,
}
ID2D1LinearGradientBrush_VTable :: struct {
	using id2d1brush_vtable: ID2D1Brush_VTable,
	SetStartPoint: proc "system" (this: ^ID2D1LinearGradientBrush, startPoint: D2D_POINT_2F),
	SetEndPoint: proc "system" (this: ^ID2D1LinearGradientBrush, endPoint: D2D_POINT_2F),
	GetStartPoint: proc "system" (this: ^ID2D1LinearGradientBrush, _return: ^D2D_POINT_2F),
	GetEndPoint: proc "system" (this: ^ID2D1LinearGradientBrush, _return: ^D2D_POINT_2F),
	GetGradientStopCollection: proc "system" (this: ^ID2D1LinearGradientBrush, gradientStopCollection: ^^ID2D1GradientStopCollection),
}

ID2D1LookupTable3D_UUID := &win32.IID{0x53dd9855, 0xa3b0, 0x4d5b, {0x82, 0xe1, 0x26, 0xe2, 0x5c, 0x5e, 0x57, 0x97}}
ID2D1LookupTable3D :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1LookupTable3D_VTable,
}
ID2D1LookupTable3D_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
}

ID2D1Mesh_UUID := &win32.IID{0x2cd906c2, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1Mesh :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1Mesh_VTable,
}
ID2D1Mesh_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	Open: proc "system" (this: ^ID2D1Mesh, tessellationSink: ^^ID2D1TessellationSink) -> win32.HRESULT,
}

ID2D1Multithread_UUID := &win32.IID{0x31e6e7bc, 0xe0ff, 0x4d46, {0x8c, 0x64, 0xa0, 0xa8, 0xc4, 0x1c, 0x15, 0xd3}}
ID2D1Multithread :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1Multithread_VTable,
}
ID2D1Multithread_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetMultithreadProtected: proc "system" (this: ^ID2D1Multithread) -> win32.BOOL,
	Enter: proc "system" (this: ^ID2D1Multithread),
	Leave: proc "system" (this: ^ID2D1Multithread),
}

ID2D1OffsetTransform_UUID := &win32.IID{0x3fe6adea, 0x7643, 0x4f53, {0xbd, 0x14, 0xa0, 0xce, 0x63, 0xf2, 0x40, 0x42}}
ID2D1OffsetTransform :: struct #raw_union {
	#subtype parent: ID2D1TransformNode,
	using vtable: ^ID2D1OffsetTransform_VTable,
}
ID2D1OffsetTransform_VTable :: struct {
	using id2d1transformnode_vtable: ID2D1TransformNode_VTable,
	SetOffset: proc "system" (this: ^ID2D1OffsetTransform, offset: win32.POINT),
	GetOffset: proc "system" (this: ^ID2D1OffsetTransform, _return: ^win32.POINT),
}

ID2D1PathGeometry_UUID := &win32.IID{0x2cd906a5, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1PathGeometry :: struct #raw_union {
	#subtype parent: ID2D1Geometry,
	using vtable: ^ID2D1PathGeometry_VTable,
}
ID2D1PathGeometry_VTable :: struct {
	using id2d1geometry_vtable: ID2D1Geometry_VTable,
	Open: proc "system" (this: ^ID2D1PathGeometry, geometrySink: ^^ID2D1GeometrySink) -> win32.HRESULT,
	Stream: proc "system" (this: ^ID2D1PathGeometry, geometrySink: ^ID2D1GeometrySink) -> win32.HRESULT,
	GetSegmentCount: proc "system" (this: ^ID2D1PathGeometry, count: ^u32) -> win32.HRESULT,
	GetFigureCount: proc "system" (this: ^ID2D1PathGeometry, count: ^u32) -> win32.HRESULT,
}

ID2D1PathGeometry1_UUID := &win32.IID{0x62baa2d2, 0xab54, 0x41b7, {0xb8, 0x72, 0x78, 0x7e, 0x01, 0x06, 0xa4, 0x21}}
ID2D1PathGeometry1 :: struct #raw_union {
	#subtype parent: ID2D1PathGeometry,
	using vtable: ^ID2D1PathGeometry1_VTable,
}
ID2D1PathGeometry1_VTable :: struct {
	using id2d1pathgeometry_vtable: ID2D1PathGeometry_VTable,
	ComputePointAndSegmentAtLength: proc "system" (this: ^ID2D1PathGeometry1, length: f32, startSegment: u32, worldTransform: ^D2D_MATRIX_3X2_F, flatteningTolerance: f32, pointDescription: ^D2D1_POINT_DESCRIPTION) -> win32.HRESULT,
}

ID2D1PrintControl_UUID := &win32.IID{0x2c1d867d, 0xc290, 0x41c8, {0xae, 0x7e, 0x34, 0xa9, 0x87, 0x02, 0xe9, 0xa5}}
ID2D1PrintControl :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1PrintControl_VTable,
}
ID2D1PrintControl_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	AddPage: proc "system" (this: ^ID2D1PrintControl, commandList: ^ID2D1CommandList, pageSize: D2D_SIZE_F, pagePrintTicketStream: ^win32.IStream, tag1: ^u64, tag2: ^u64) -> win32.HRESULT,
	Close: proc "system" (this: ^ID2D1PrintControl) -> win32.HRESULT,
}

ID2D1Properties_UUID := &win32.IID{0x483473d7, 0xcd46, 0x4f9d, {0x9d, 0x3a, 0x31, 0x12, 0xaa, 0x80, 0x15, 0x9d}}
ID2D1Properties :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1Properties_VTable,
}
ID2D1Properties_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetPropertyCount: proc "system" (this: ^ID2D1Properties) -> u32,
	GetPropertyName: proc "system" (this: ^ID2D1Properties, index: u32, name: ^win32.WCHAR, nameCount: u32) -> win32.HRESULT,
	GetPropertyNameLength: proc "system" (this: ^ID2D1Properties, index: u32) -> u32,
	GetType: proc "system" (this: ^ID2D1Properties, index: u32) -> D2D1_PROPERTY_TYPE,
	GetPropertyIndex: proc "system" (this: ^ID2D1Properties, name: ^win32.WCHAR) -> u32,
	SetValueByName: proc "system" (this: ^ID2D1Properties, name: ^win32.WCHAR, type: D2D1_PROPERTY_TYPE, data: ^u8, dataSize: u32) -> win32.HRESULT,
	SetValue: proc "system" (this: ^ID2D1Properties, index: u32, type: D2D1_PROPERTY_TYPE, data: ^u8, dataSize: u32) -> win32.HRESULT,
	GetValueByName: proc "system" (this: ^ID2D1Properties, name: ^win32.WCHAR, type: D2D1_PROPERTY_TYPE, data: ^u8, dataSize: u32) -> win32.HRESULT,
	GetValue: proc "system" (this: ^ID2D1Properties, index: u32, type: D2D1_PROPERTY_TYPE, data: ^u8, dataSize: u32) -> win32.HRESULT,
	GetValueSize: proc "system" (this: ^ID2D1Properties, index: u32) -> u32,
	GetSubProperties: proc "system" (this: ^ID2D1Properties, index: u32, subProperties: ^^ID2D1Properties) -> win32.HRESULT,
}

ID2D1RadialGradientBrush_UUID := &win32.IID{0x2cd906ac, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1RadialGradientBrush :: struct #raw_union {
	#subtype parent: ID2D1Brush,
	using vtable: ^ID2D1RadialGradientBrush_VTable,
}
ID2D1RadialGradientBrush_VTable :: struct {
	using id2d1brush_vtable: ID2D1Brush_VTable,
	SetCenter: proc "system" (this: ^ID2D1RadialGradientBrush, center: D2D_POINT_2F),
	SetGradientOriginOffset: proc "system" (this: ^ID2D1RadialGradientBrush, gradientOriginOffset: D2D_POINT_2F),
	SetRadiusX: proc "system" (this: ^ID2D1RadialGradientBrush, radiusX: f32),
	SetRadiusY: proc "system" (this: ^ID2D1RadialGradientBrush, radiusY: f32),
	GetCenter: proc "system" (this: ^ID2D1RadialGradientBrush, _return: ^D2D_POINT_2F),
	GetGradientOriginOffset: proc "system" (this: ^ID2D1RadialGradientBrush, _return: ^D2D_POINT_2F),
	GetRadiusX: proc "system" (this: ^ID2D1RadialGradientBrush) -> f32,
	GetRadiusY: proc "system" (this: ^ID2D1RadialGradientBrush) -> f32,
	GetGradientStopCollection: proc "system" (this: ^ID2D1RadialGradientBrush, gradientStopCollection: ^^ID2D1GradientStopCollection),
}

ID2D1RectangleGeometry_UUID := &win32.IID{0x2cd906a2, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1RectangleGeometry :: struct #raw_union {
	#subtype parent: ID2D1Geometry,
	using vtable: ^ID2D1RectangleGeometry_VTable,
}
ID2D1RectangleGeometry_VTable :: struct {
	using id2d1geometry_vtable: ID2D1Geometry_VTable,
	GetRect: proc "system" (this: ^ID2D1RectangleGeometry, rect: ^D2D_RECT_F),
}

ID2D1RenderInfo_UUID := &win32.IID{0x519ae1bd, 0xd19a, 0x420d, {0xb8, 0x49, 0x36, 0x4f, 0x59, 0x47, 0x76, 0xb7}}
ID2D1RenderInfo :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1RenderInfo_VTable,
}
ID2D1RenderInfo_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	SetInputDescription: proc "system" (this: ^ID2D1RenderInfo, inputIndex: u32, inputDescription: D2D1_INPUT_DESCRIPTION) -> win32.HRESULT,
	SetOutputBuffer: proc "system" (this: ^ID2D1RenderInfo, bufferPrecision: D2D1_BUFFER_PRECISION, channelDepth: D2D1_CHANNEL_DEPTH) -> win32.HRESULT,
	SetCached: proc "system" (this: ^ID2D1RenderInfo, isCached: win32.BOOL),
	SetInstructionCountHint: proc "system" (this: ^ID2D1RenderInfo, instructionCount: u32),
}

ID2D1RenderTarget_UUID := &win32.IID{0x2cd90694, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1RenderTarget :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1RenderTarget_VTable,
}
ID2D1RenderTarget_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	CreateBitmap: proc "system" (this: ^ID2D1RenderTarget, size: D2D_SIZE_U, srcData: rawptr, pitch: u32, bitmapProperties: ^D2D1_BITMAP_PROPERTIES, bitmap: ^^ID2D1Bitmap) -> win32.HRESULT,
	CreateBitmapFromWicBitmap: proc "system" (this: ^ID2D1RenderTarget, wicBitmapSource: ^IWICBitmapSource, bitmapProperties: ^D2D1_BITMAP_PROPERTIES, bitmap: ^^ID2D1Bitmap) -> win32.HRESULT,
	CreateSharedBitmap: proc "system" (this: ^ID2D1RenderTarget, riid: ^win32.GUID, data: rawptr, bitmapProperties: ^D2D1_BITMAP_PROPERTIES, bitmap: ^^ID2D1Bitmap) -> win32.HRESULT,
	CreateBitmapBrush: proc "system" (this: ^ID2D1RenderTarget, bitmap: ^ID2D1Bitmap, bitmapBrushProperties: ^D2D1_BITMAP_BRUSH_PROPERTIES, brushProperties: ^D2D1_BRUSH_PROPERTIES, bitmapBrush: ^^ID2D1BitmapBrush) -> win32.HRESULT,
	CreateSolidColorBrush: proc "system" (this: ^ID2D1RenderTarget, color: ^D2D1_COLOR_F, brushProperties: ^D2D1_BRUSH_PROPERTIES, solidColorBrush: ^^ID2D1SolidColorBrush) -> win32.HRESULT,
	CreateGradientStopCollection: proc "system" (this: ^ID2D1RenderTarget, gradientStops: ^D2D1_GRADIENT_STOP, gradientStopsCount: u32, colorInterpolationGamma: D2D1_GAMMA, extendMode: D2D1_EXTEND_MODE, gradientStopCollection: ^^ID2D1GradientStopCollection) -> win32.HRESULT,
	CreateLinearGradientBrush: proc "system" (this: ^ID2D1RenderTarget, linearGradientBrushProperties: ^D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES, brushProperties: ^D2D1_BRUSH_PROPERTIES, gradientStopCollection: ^ID2D1GradientStopCollection, linearGradientBrush: ^^ID2D1LinearGradientBrush) -> win32.HRESULT,
	CreateRadialGradientBrush: proc "system" (this: ^ID2D1RenderTarget, radialGradientBrushProperties: ^D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES, brushProperties: ^D2D1_BRUSH_PROPERTIES, gradientStopCollection: ^ID2D1GradientStopCollection, radialGradientBrush: ^^ID2D1RadialGradientBrush) -> win32.HRESULT,
	CreateCompatibleRenderTarget: proc "system" (this: ^ID2D1RenderTarget, desiredSize: ^D2D_SIZE_F, desiredPixelSize: ^D2D_SIZE_U, desiredFormat: ^D2D1_PIXEL_FORMAT, options: D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget: ^^ID2D1BitmapRenderTarget) -> win32.HRESULT,
	CreateLayer: proc "system" (this: ^ID2D1RenderTarget, size: ^D2D_SIZE_F, layer: ^^ID2D1Layer) -> win32.HRESULT,
	CreateMesh: proc "system" (this: ^ID2D1RenderTarget, mesh: ^^ID2D1Mesh) -> win32.HRESULT,
	DrawLine: proc "system" (this: ^ID2D1RenderTarget, point0: D2D_POINT_2F, point1: D2D_POINT_2F, brush: ^ID2D1Brush, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle),
	DrawRectangle: proc "system" (this: ^ID2D1RenderTarget, rect: ^D2D_RECT_F, brush: ^ID2D1Brush, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle),
	FillRectangle: proc "system" (this: ^ID2D1RenderTarget, rect: ^D2D_RECT_F, brush: ^ID2D1Brush),
	DrawRoundedRectangle: proc "system" (this: ^ID2D1RenderTarget, roundedRect: ^D2D1_ROUNDED_RECT, brush: ^ID2D1Brush, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle),
	FillRoundedRectangle: proc "system" (this: ^ID2D1RenderTarget, roundedRect: ^D2D1_ROUNDED_RECT, brush: ^ID2D1Brush),
	DrawEllipse: proc "system" (this: ^ID2D1RenderTarget, ellipse: ^D2D1_ELLIPSE, brush: ^ID2D1Brush, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle),
	FillEllipse: proc "system" (this: ^ID2D1RenderTarget, ellipse: ^D2D1_ELLIPSE, brush: ^ID2D1Brush),
	DrawGeometry: proc "system" (this: ^ID2D1RenderTarget, geometry: ^ID2D1Geometry, brush: ^ID2D1Brush, strokeWidth: f32, strokeStyle: ^ID2D1StrokeStyle),
	FillGeometry: proc "system" (this: ^ID2D1RenderTarget, geometry: ^ID2D1Geometry, brush: ^ID2D1Brush, opacityBrush: ^ID2D1Brush),
	FillMesh: proc "system" (this: ^ID2D1RenderTarget, mesh: ^ID2D1Mesh, brush: ^ID2D1Brush),
	FillOpacityMask: proc "system" (this: ^ID2D1RenderTarget, opacityMask: ^ID2D1Bitmap, brush: ^ID2D1Brush, content: D2D1_OPACITY_MASK_CONTENT, destinationRectangle: ^D2D_RECT_F, sourceRectangle: ^D2D_RECT_F),
	DrawBitmap: proc "system" (this: ^ID2D1RenderTarget, bitmap: ^ID2D1Bitmap, destinationRectangle: ^D2D_RECT_F, opacity: f32, interpolationMode: D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle: ^D2D_RECT_F),
	DrawText: proc "system" (this: ^ID2D1RenderTarget, _string: ^win32.WCHAR, stringLength: u32, textFormat: ^IDWriteTextFormat, layoutRect: ^D2D_RECT_F, defaultFillBrush: ^ID2D1Brush, options: D2D1_DRAW_TEXT_OPTIONS, measuringMode: DWRITE_MEASURING_MODE),
	DrawTextLayout: proc "system" (this: ^ID2D1RenderTarget, origin: D2D_POINT_2F, textLayout: ^IDWriteTextLayout, defaultFillBrush: ^ID2D1Brush, options: D2D1_DRAW_TEXT_OPTIONS),
	DrawGlyphRun: proc "system" (this: ^ID2D1RenderTarget, baselineOrigin: D2D_POINT_2F, glyphRun: ^DWRITE_GLYPH_RUN, foregroundBrush: ^ID2D1Brush, measuringMode: DWRITE_MEASURING_MODE),
	SetTransform: proc "system" (this: ^ID2D1RenderTarget, transform: ^D2D_MATRIX_3X2_F),
	GetTransform: proc "system" (this: ^ID2D1RenderTarget, transform: ^D2D_MATRIX_3X2_F),
	SetAntialiasMode: proc "system" (this: ^ID2D1RenderTarget, antialiasMode: D2D1_ANTIALIAS_MODE),
	GetAntialiasMode: proc "system" (this: ^ID2D1RenderTarget) -> D2D1_ANTIALIAS_MODE,
	SetTextAntialiasMode: proc "system" (this: ^ID2D1RenderTarget, textAntialiasMode: D2D1_TEXT_ANTIALIAS_MODE),
	GetTextAntialiasMode: proc "system" (this: ^ID2D1RenderTarget) -> D2D1_TEXT_ANTIALIAS_MODE,
	SetTextRenderingParams: proc "system" (this: ^ID2D1RenderTarget, textRenderingParams: ^IDWriteRenderingParams),
	GetTextRenderingParams: proc "system" (this: ^ID2D1RenderTarget, textRenderingParams: ^^IDWriteRenderingParams),
	SetTags: proc "system" (this: ^ID2D1RenderTarget, tag1: u64, tag2: u64),
	GetTags: proc "system" (this: ^ID2D1RenderTarget, tag1: ^u64, tag2: ^u64),
	PushLayer: proc "system" (this: ^ID2D1RenderTarget, layerParameters: ^D2D1_LAYER_PARAMETERS, layer: ^ID2D1Layer),
	PopLayer: proc "system" (this: ^ID2D1RenderTarget),
	Flush: proc "system" (this: ^ID2D1RenderTarget, tag1: ^u64, tag2: ^u64) -> win32.HRESULT,
	SaveDrawingState: proc "system" (this: ^ID2D1RenderTarget, drawingStateBlock: ^ID2D1DrawingStateBlock),
	RestoreDrawingState: proc "system" (this: ^ID2D1RenderTarget, drawingStateBlock: ^ID2D1DrawingStateBlock),
	PushAxisAlignedClip: proc "system" (this: ^ID2D1RenderTarget, clipRect: ^D2D_RECT_F, antialiasMode: D2D1_ANTIALIAS_MODE),
	PopAxisAlignedClip: proc "system" (this: ^ID2D1RenderTarget),
	Clear: proc "system" (this: ^ID2D1RenderTarget, clearColor: ^D2D1_COLOR_F),
	BeginDraw: proc "system" (this: ^ID2D1RenderTarget),
	EndDraw: proc "system" (this: ^ID2D1RenderTarget, tag1: ^u64, tag2: ^u64) -> win32.HRESULT,
	GetPixelFormat: proc "system" (this: ^ID2D1RenderTarget, _return: ^D2D1_PIXEL_FORMAT),
	SetDpi: proc "system" (this: ^ID2D1RenderTarget, dpiX: f32, dpiY: f32),
	GetDpi: proc "system" (this: ^ID2D1RenderTarget, dpiX: ^f32, dpiY: ^f32),
	GetSize: proc "system" (this: ^ID2D1RenderTarget, _return: ^D2D_SIZE_F),
	GetPixelSize: proc "system" (this: ^ID2D1RenderTarget, _return: ^D2D_SIZE_U),
	GetMaximumBitmapSize: proc "system" (this: ^ID2D1RenderTarget) -> u32,
	IsSupported: proc "system" (this: ^ID2D1RenderTarget, renderTargetProperties: ^D2D1_RENDER_TARGET_PROPERTIES) -> win32.BOOL,
}

ID2D1Resource_UUID := &win32.IID{0x2cd90691, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1Resource :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1Resource_VTable,
}
ID2D1Resource_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetFactory: proc "system" (this: ^ID2D1Resource, factory: ^^ID2D1Factory),
}

ID2D1ResourceTexture_UUID := &win32.IID{0x688d15c3, 0x02b0, 0x438d, {0xb1, 0x3a, 0xd1, 0xb4, 0x4c, 0x32, 0xc3, 0x9a}}
ID2D1ResourceTexture :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1ResourceTexture_VTable,
}
ID2D1ResourceTexture_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	Update: proc "system" (this: ^ID2D1ResourceTexture, minimumExtents: ^u32, maximimumExtents: ^u32, strides: ^u32, dimensions: u32, data: ^u8, dataCount: u32) -> win32.HRESULT,
}

ID2D1RoundedRectangleGeometry_UUID := &win32.IID{0x2cd906a3, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1RoundedRectangleGeometry :: struct #raw_union {
	#subtype parent: ID2D1Geometry,
	using vtable: ^ID2D1RoundedRectangleGeometry_VTable,
}
ID2D1RoundedRectangleGeometry_VTable :: struct {
	using id2d1geometry_vtable: ID2D1Geometry_VTable,
	GetRoundedRect: proc "system" (this: ^ID2D1RoundedRectangleGeometry, roundedRect: ^D2D1_ROUNDED_RECT),
}

ID2D1SimplifiedGeometrySink_UUID := &win32.IID{0x2cd9069e, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1SimplifiedGeometrySink :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1SimplifiedGeometrySink_VTable,
}
ID2D1SimplifiedGeometrySink_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	SetFillMode: proc "system" (this: ^ID2D1SimplifiedGeometrySink, fillMode: D2D1_FILL_MODE),
	SetSegmentFlags: proc "system" (this: ^ID2D1SimplifiedGeometrySink, vertexFlags: D2D1_PATH_SEGMENT),
	BeginFigure: proc "system" (this: ^ID2D1SimplifiedGeometrySink, startPoint: D2D_POINT_2F, figureBegin: D2D1_FIGURE_BEGIN),
	AddLines: proc "system" (this: ^ID2D1SimplifiedGeometrySink, points: ^D2D_POINT_2F, pointsCount: u32),
	AddBeziers: proc "system" (this: ^ID2D1SimplifiedGeometrySink, beziers: ^D2D1_BEZIER_SEGMENT, beziersCount: u32),
	EndFigure: proc "system" (this: ^ID2D1SimplifiedGeometrySink, figureEnd: D2D1_FIGURE_END),
	Close: proc "system" (this: ^ID2D1SimplifiedGeometrySink) -> win32.HRESULT,
}

ID2D1SolidColorBrush_UUID := &win32.IID{0x2cd906a9, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1SolidColorBrush :: struct #raw_union {
	#subtype parent: ID2D1Brush,
	using vtable: ^ID2D1SolidColorBrush_VTable,
}
ID2D1SolidColorBrush_VTable :: struct {
	using id2d1brush_vtable: ID2D1Brush_VTable,
	SetColor: proc "system" (this: ^ID2D1SolidColorBrush, color: ^D2D1_COLOR_F),
	GetColor: proc "system" (this: ^ID2D1SolidColorBrush, _return: ^D2D1_COLOR_F),
}

ID2D1SourceTransform_UUID := &win32.IID{0xdb1800dd, 0x0c34, 0x4cf9, {0xbe, 0x90, 0x31, 0xcc, 0x0a, 0x56, 0x53, 0xe1}}
ID2D1SourceTransform :: struct #raw_union {
	#subtype parent: ID2D1Transform,
	using vtable: ^ID2D1SourceTransform_VTable,
}
ID2D1SourceTransform_VTable :: struct {
	using id2d1transform_vtable: ID2D1Transform_VTable,
	SetRenderInfo: proc "system" (this: ^ID2D1SourceTransform, renderInfo: ^ID2D1RenderInfo) -> win32.HRESULT,
	Draw: proc "system" (this: ^ID2D1SourceTransform, target: ^ID2D1Bitmap1, drawRect: ^win32.RECT, targetOrigin: D2D_POINT_2U) -> win32.HRESULT,
}

ID2D1SpriteBatch_UUID := &win32.IID{0x4dc583bf, 0x3a10, 0x438a, {0x87, 0x22, 0xe9, 0x76, 0x52, 0x24, 0xf1, 0xf1}}
ID2D1SpriteBatch :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1SpriteBatch_VTable,
}
ID2D1SpriteBatch_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	AddSprites: proc "system" (this: ^ID2D1SpriteBatch, spriteCount: u32, destinationRectangles: ^D2D_RECT_F, sourceRectangles: ^D2D_RECT_U, colors: ^D2D1_COLOR_F, transforms: ^D2D_MATRIX_3X2_F, destinationRectanglesStride: u32, sourceRectanglesStride: u32, colorsStride: u32, transformsStride: u32) -> win32.HRESULT,
	SetSprites: proc "system" (this: ^ID2D1SpriteBatch, startIndex: u32, spriteCount: u32, destinationRectangles: ^D2D_RECT_F, sourceRectangles: ^D2D_RECT_U, colors: ^D2D1_COLOR_F, transforms: ^D2D_MATRIX_3X2_F, destinationRectanglesStride: u32, sourceRectanglesStride: u32, colorsStride: u32, transformsStride: u32) -> win32.HRESULT,
	GetSprites: proc "system" (this: ^ID2D1SpriteBatch, startIndex: u32, spriteCount: u32, destinationRectangles: ^D2D_RECT_F, sourceRectangles: ^D2D_RECT_U, colors: ^D2D1_COLOR_F, transforms: ^D2D_MATRIX_3X2_F) -> win32.HRESULT,
	GetSpriteCount: proc "system" (this: ^ID2D1SpriteBatch) -> u32,
	Clear: proc "system" (this: ^ID2D1SpriteBatch),
}

ID2D1StrokeStyle_UUID := &win32.IID{0x2cd9069d, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1StrokeStyle :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1StrokeStyle_VTable,
}
ID2D1StrokeStyle_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetStartCap: proc "system" (this: ^ID2D1StrokeStyle) -> D2D1_CAP_STYLE,
	GetEndCap: proc "system" (this: ^ID2D1StrokeStyle) -> D2D1_CAP_STYLE,
	GetDashCap: proc "system" (this: ^ID2D1StrokeStyle) -> D2D1_CAP_STYLE,
	GetMiterLimit: proc "system" (this: ^ID2D1StrokeStyle) -> f32,
	GetLineJoin: proc "system" (this: ^ID2D1StrokeStyle) -> D2D1_LINE_JOIN,
	GetDashOffset: proc "system" (this: ^ID2D1StrokeStyle) -> f32,
	GetDashStyle: proc "system" (this: ^ID2D1StrokeStyle) -> D2D1_DASH_STYLE,
	GetDashesCount: proc "system" (this: ^ID2D1StrokeStyle) -> u32,
	GetDashes: proc "system" (this: ^ID2D1StrokeStyle, dashes: ^f32, dashesCount: u32),
}

ID2D1StrokeStyle1_UUID := &win32.IID{0x10a72a66, 0xe91c, 0x43f4, {0x99, 0x3f, 0xdd, 0xf4, 0xb8, 0x2b, 0x0b, 0x4a}}
ID2D1StrokeStyle1 :: struct #raw_union {
	#subtype parent: ID2D1StrokeStyle,
	using vtable: ^ID2D1StrokeStyle1_VTable,
}
ID2D1StrokeStyle1_VTable :: struct {
	using id2d1strokestyle_vtable: ID2D1StrokeStyle_VTable,
	GetStrokeTransformType: proc "system" (this: ^ID2D1StrokeStyle1) -> D2D1_STROKE_TRANSFORM_TYPE,
}

ID2D1SvgAttribute_UUID := &win32.IID{0xc9cdb0dd, 0xf8c9, 0x4e70, {0xb7, 0xc2, 0x30, 0x1c, 0x80, 0x29, 0x2c, 0x5e}}
ID2D1SvgAttribute :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1SvgAttribute_VTable,
}
ID2D1SvgAttribute_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetElement: proc "system" (this: ^ID2D1SvgAttribute, element: ^^ID2D1SvgElement),
	Clone: proc "system" (this: ^ID2D1SvgAttribute, attribute: ^^ID2D1SvgAttribute) -> win32.HRESULT,
}

ID2D1SvgDocument_UUID := &win32.IID{0x86b88e4d, 0xafa4, 0x4d7b, {0x88, 0xe4, 0x68, 0xa5, 0x1c, 0x4a, 0x0a, 0xec}}
ID2D1SvgDocument :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1SvgDocument_VTable,
}
ID2D1SvgDocument_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	SetViewportSize: proc "system" (this: ^ID2D1SvgDocument, viewportSize: D2D_SIZE_F) -> win32.HRESULT,
	GetViewportSize: proc "system" (this: ^ID2D1SvgDocument, _return: ^D2D_SIZE_F),
	SetRoot: proc "system" (this: ^ID2D1SvgDocument, root: ^ID2D1SvgElement) -> win32.HRESULT,
	GetRoot: proc "system" (this: ^ID2D1SvgDocument, root: ^^ID2D1SvgElement),
	FindElementById: proc "system" (this: ^ID2D1SvgDocument, id: ^win32.WCHAR, svgElement: ^^ID2D1SvgElement) -> win32.HRESULT,
	Serialize: proc "system" (this: ^ID2D1SvgDocument, outputXmlStream: ^win32.IStream, subtree: ^ID2D1SvgElement) -> win32.HRESULT,
	Deserialize: proc "system" (this: ^ID2D1SvgDocument, inputXmlStream: ^win32.IStream, subtree: ^^ID2D1SvgElement) -> win32.HRESULT,
	CreatePaint: proc "system" (this: ^ID2D1SvgDocument, paintType: D2D1_SVG_PAINT_TYPE, color: ^D2D1_COLOR_F, id: ^win32.WCHAR, paint: ^^ID2D1SvgPaint) -> win32.HRESULT,
	CreateStrokeDashArray: proc "system" (this: ^ID2D1SvgDocument, dashes: ^D2D1_SVG_LENGTH, dashesCount: u32, strokeDashArray: ^^ID2D1SvgStrokeDashArray) -> win32.HRESULT,
	CreatePointCollection: proc "system" (this: ^ID2D1SvgDocument, points: ^D2D_POINT_2F, pointsCount: u32, pointCollection: ^^ID2D1SvgPointCollection) -> win32.HRESULT,
	CreatePathData: proc "system" (this: ^ID2D1SvgDocument, segmentData: ^f32, segmentDataCount: u32, commands: ^D2D1_SVG_PATH_COMMAND, commandsCount: u32, pathData: ^^ID2D1SvgPathData) -> win32.HRESULT,
}

ID2D1SvgElement_UUID := &win32.IID{0xac7b67a6, 0x183e, 0x49c1, {0xa8, 0x23, 0x0e, 0xbe, 0x40, 0xb0, 0xdb, 0x29}}
ID2D1SvgElement :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1SvgElement_VTable,
}
ID2D1SvgElement_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	GetDocument: proc "system" (this: ^ID2D1SvgElement, document: ^^ID2D1SvgDocument),
	GetTagName: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, nameCount: u32) -> win32.HRESULT,
	GetTagNameLength: proc "system" (this: ^ID2D1SvgElement) -> u32,
	IsTextContent: proc "system" (this: ^ID2D1SvgElement) -> win32.BOOL,
	GetParent: proc "system" (this: ^ID2D1SvgElement, parent: ^^ID2D1SvgElement),
	HasChildren: proc "system" (this: ^ID2D1SvgElement) -> win32.BOOL,
	GetFirstChild: proc "system" (this: ^ID2D1SvgElement, child: ^^ID2D1SvgElement),
	GetLastChild: proc "system" (this: ^ID2D1SvgElement, child: ^^ID2D1SvgElement),
	GetPreviousChild: proc "system" (this: ^ID2D1SvgElement, referenceChild: ^ID2D1SvgElement, previousChild: ^^ID2D1SvgElement) -> win32.HRESULT,
	GetNextChild: proc "system" (this: ^ID2D1SvgElement, referenceChild: ^ID2D1SvgElement, nextChild: ^^ID2D1SvgElement) -> win32.HRESULT,
	InsertChildBefore: proc "system" (this: ^ID2D1SvgElement, newChild: ^ID2D1SvgElement, referenceChild: ^ID2D1SvgElement) -> win32.HRESULT,
	AppendChild: proc "system" (this: ^ID2D1SvgElement, newChild: ^ID2D1SvgElement) -> win32.HRESULT,
	ReplaceChild: proc "system" (this: ^ID2D1SvgElement, newChild: ^ID2D1SvgElement, oldChild: ^ID2D1SvgElement) -> win32.HRESULT,
	RemoveChild: proc "system" (this: ^ID2D1SvgElement, oldChild: ^ID2D1SvgElement) -> win32.HRESULT,
	CreateChild: proc "system" (this: ^ID2D1SvgElement, tagName: ^win32.WCHAR, newChild: ^^ID2D1SvgElement) -> win32.HRESULT,
	IsAttributeSpecified: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, inherited: ^win32.BOOL) -> win32.BOOL,
	GetSpecifiedAttributeCount: proc "system" (this: ^ID2D1SvgElement) -> u32,
	GetSpecifiedAttributeName: proc "system" (this: ^ID2D1SvgElement, index: u32, name: ^win32.WCHAR, nameCount: u32, inherited: ^win32.BOOL) -> win32.HRESULT,
	GetSpecifiedAttributeNameLength: proc "system" (this: ^ID2D1SvgElement, index: u32, nameLength: ^u32, inherited: ^win32.BOOL) -> win32.HRESULT,
	RemoveAttribute: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR) -> win32.HRESULT,
	SetTextValue: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, nameCount: u32) -> win32.HRESULT,
	GetTextValue: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, nameCount: u32) -> win32.HRESULT,
	GetTextValueLength: proc "system" (this: ^ID2D1SvgElement) -> u32,
	SetAttributeValue: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, value: ^ID2D1SvgAttribute) -> win32.HRESULT,
	SetAttributeValue1: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, type: D2D1_SVG_ATTRIBUTE_POD_TYPE, value: rawptr, valueSizeInBytes: u32) -> win32.HRESULT,
	SetAttributeValue2: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, type: D2D1_SVG_ATTRIBUTE_STRING_TYPE, value: ^win32.WCHAR) -> win32.HRESULT,
	GetAttributeValue: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, riid: ^win32.GUID, value: ^rawptr) -> win32.HRESULT,
	GetAttributeValue1: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, type: D2D1_SVG_ATTRIBUTE_POD_TYPE, value: rawptr, valueSizeInBytes: u32) -> win32.HRESULT,
	GetAttributeValue2: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, type: D2D1_SVG_ATTRIBUTE_STRING_TYPE, value: ^win32.WCHAR, valueCount: u32) -> win32.HRESULT,
	GetAttributeValueLength: proc "system" (this: ^ID2D1SvgElement, name: ^win32.WCHAR, type: D2D1_SVG_ATTRIBUTE_STRING_TYPE, valueLength: ^u32) -> win32.HRESULT,
}

ID2D1SvgGlyphStyle_UUID := &win32.IID{0xaf671749, 0xd241, 0x4db8, {0x8e, 0x41, 0xdc, 0xc2, 0xe5, 0xc1, 0xa4, 0x38}}
ID2D1SvgGlyphStyle :: struct #raw_union {
	#subtype parent: ID2D1Resource,
	using vtable: ^ID2D1SvgGlyphStyle_VTable,
}
ID2D1SvgGlyphStyle_VTable :: struct {
	using id2d1resource_vtable: ID2D1Resource_VTable,
	SetFill: proc "system" (this: ^ID2D1SvgGlyphStyle, brush: ^ID2D1Brush) -> win32.HRESULT,
	GetFill: proc "system" (this: ^ID2D1SvgGlyphStyle, brush: ^^ID2D1Brush),
	SetStroke: proc "system" (this: ^ID2D1SvgGlyphStyle, brush: ^ID2D1Brush, strokeWidth: f32, dashes: ^f32, dashesCount: u32, dashOffset: f32) -> win32.HRESULT,
	GetStrokeDashesCount: proc "system" (this: ^ID2D1SvgGlyphStyle) -> u32,
	GetStroke: proc "system" (this: ^ID2D1SvgGlyphStyle, brush: ^^ID2D1Brush, strokeWidth: ^f32, dashes: ^f32, dashesCount: u32, dashOffset: ^f32),
}

ID2D1SvgPaint_UUID := &win32.IID{0xd59bab0a, 0x68a2, 0x455b, {0xa5, 0xdc, 0x9e, 0xb2, 0x85, 0x4e, 0x24, 0x90}}
ID2D1SvgPaint :: struct #raw_union {
	#subtype parent: ID2D1SvgAttribute,
	using vtable: ^ID2D1SvgPaint_VTable,
}
ID2D1SvgPaint_VTable :: struct {
	using id2d1svgattribute_vtable: ID2D1SvgAttribute_VTable,
	SetPaintType: proc "system" (this: ^ID2D1SvgPaint, paintType: D2D1_SVG_PAINT_TYPE) -> win32.HRESULT,
	GetPaintType: proc "system" (this: ^ID2D1SvgPaint) -> D2D1_SVG_PAINT_TYPE,
	SetColor: proc "system" (this: ^ID2D1SvgPaint, color: ^D2D1_COLOR_F) -> win32.HRESULT,
	GetColor: proc "system" (this: ^ID2D1SvgPaint, color: ^D2D1_COLOR_F),
	SetId: proc "system" (this: ^ID2D1SvgPaint, id: ^win32.WCHAR) -> win32.HRESULT,
	GetId: proc "system" (this: ^ID2D1SvgPaint, id: ^win32.WCHAR, idCount: u32) -> win32.HRESULT,
	GetIdLength: proc "system" (this: ^ID2D1SvgPaint) -> u32,
}

ID2D1SvgPathData_UUID := &win32.IID{0xc095e4f4, 0xbb98, 0x43d6, {0x97, 0x45, 0x4d, 0x1b, 0x84, 0xec, 0x98, 0x88}}
ID2D1SvgPathData :: struct #raw_union {
	#subtype parent: ID2D1SvgAttribute,
	using vtable: ^ID2D1SvgPathData_VTable,
}
ID2D1SvgPathData_VTable :: struct {
	using id2d1svgattribute_vtable: ID2D1SvgAttribute_VTable,
	RemoveSegmentDataAtEnd: proc "system" (this: ^ID2D1SvgPathData, dataCount: u32) -> win32.HRESULT,
	UpdateSegmentData: proc "system" (this: ^ID2D1SvgPathData, data: ^f32, dataCount: u32, startIndex: u32) -> win32.HRESULT,
	GetSegmentData: proc "system" (this: ^ID2D1SvgPathData, data: ^f32, dataCount: u32, startIndex: u32) -> win32.HRESULT,
	GetSegmentDataCount: proc "system" (this: ^ID2D1SvgPathData) -> u32,
	RemoveCommandsAtEnd: proc "system" (this: ^ID2D1SvgPathData, commandsCount: u32) -> win32.HRESULT,
	UpdateCommands: proc "system" (this: ^ID2D1SvgPathData, commands: ^D2D1_SVG_PATH_COMMAND, commandsCount: u32, startIndex: u32) -> win32.HRESULT,
	GetCommands: proc "system" (this: ^ID2D1SvgPathData, commands: ^D2D1_SVG_PATH_COMMAND, commandsCount: u32, startIndex: u32) -> win32.HRESULT,
	GetCommandsCount: proc "system" (this: ^ID2D1SvgPathData) -> u32,
	CreatePathGeometry: proc "system" (this: ^ID2D1SvgPathData, fillMode: D2D1_FILL_MODE, pathGeometry: ^^ID2D1PathGeometry1) -> win32.HRESULT,
}

ID2D1SvgPointCollection_UUID := &win32.IID{0x9dbe4c0d, 0x3572, 0x4dd9, {0x98, 0x25, 0x55, 0x30, 0x81, 0x3b, 0xb7, 0x12}}
ID2D1SvgPointCollection :: struct #raw_union {
	#subtype parent: ID2D1SvgAttribute,
	using vtable: ^ID2D1SvgPointCollection_VTable,
}
ID2D1SvgPointCollection_VTable :: struct {
	using id2d1svgattribute_vtable: ID2D1SvgAttribute_VTable,
	RemovePointsAtEnd: proc "system" (this: ^ID2D1SvgPointCollection, pointsCount: u32) -> win32.HRESULT,
	UpdatePoints: proc "system" (this: ^ID2D1SvgPointCollection, points: ^D2D_POINT_2F, pointsCount: u32, startIndex: u32) -> win32.HRESULT,
	GetPoints: proc "system" (this: ^ID2D1SvgPointCollection, points: ^D2D_POINT_2F, pointsCount: u32, startIndex: u32) -> win32.HRESULT,
	GetPointsCount: proc "system" (this: ^ID2D1SvgPointCollection) -> u32,
}

ID2D1SvgStrokeDashArray_UUID := &win32.IID{0xf1c0ca52, 0x92a3, 0x4f00, {0xb4, 0xce, 0xf3, 0x56, 0x91, 0xef, 0xd9, 0xd9}}
ID2D1SvgStrokeDashArray :: struct #raw_union {
	#subtype parent: ID2D1SvgAttribute,
	using vtable: ^ID2D1SvgStrokeDashArray_VTable,
}
ID2D1SvgStrokeDashArray_VTable :: struct {
	using id2d1svgattribute_vtable: ID2D1SvgAttribute_VTable,
	RemoveDashesAtEnd: proc "system" (this: ^ID2D1SvgStrokeDashArray, dashesCount: u32) -> win32.HRESULT,
	UpdateDashes: proc "system" (this: ^ID2D1SvgStrokeDashArray, dashes: ^D2D1_SVG_LENGTH, dashesCount: u32, startIndex: u32) -> win32.HRESULT,
	UpdateDashes1: proc "system" (this: ^ID2D1SvgStrokeDashArray, dashes: ^f32, dashesCount: u32, startIndex: u32) -> win32.HRESULT,
	GetDashes: proc "system" (this: ^ID2D1SvgStrokeDashArray, dashes: ^D2D1_SVG_LENGTH, dashesCount: u32, startIndex: u32) -> win32.HRESULT,
	GetDashes1: proc "system" (this: ^ID2D1SvgStrokeDashArray, dashes: ^f32, dashesCount: u32, startIndex: u32) -> win32.HRESULT,
	GetDashesCount: proc "system" (this: ^ID2D1SvgStrokeDashArray) -> u32,
}

ID2D1TessellationSink_UUID := &win32.IID{0x2cd906c1, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1TessellationSink :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1TessellationSink_VTable,
}
ID2D1TessellationSink_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	AddTriangles: proc "system" (this: ^ID2D1TessellationSink, triangles: ^D2D1_TRIANGLE, trianglesCount: u32),
	Close: proc "system" (this: ^ID2D1TessellationSink) -> win32.HRESULT,
}

ID2D1Transform_UUID := &win32.IID{0xef1a287d, 0x342a, 0x4f76, {0x8f, 0xdb, 0xda, 0x0d, 0x6e, 0xa9, 0xf9, 0x2b}}
ID2D1Transform :: struct #raw_union {
	#subtype parent: ID2D1TransformNode,
	using vtable: ^ID2D1Transform_VTable,
}
ID2D1Transform_VTable :: struct {
	using id2d1transformnode_vtable: ID2D1TransformNode_VTable,
	MapOutputRectToInputRects: proc "system" (this: ^ID2D1Transform, outputRect: ^win32.RECT, inputRects: ^win32.RECT, inputRectsCount: u32) -> win32.HRESULT,
	MapInputRectsToOutputRect: proc "system" (this: ^ID2D1Transform, inputRects: ^win32.RECT, inputOpaqueSubRects: ^win32.RECT, inputRectCount: u32, outputRect: ^win32.RECT, outputOpaqueSubRect: ^win32.RECT) -> win32.HRESULT,
	MapInvalidRect: proc "system" (this: ^ID2D1Transform, inputIndex: u32, invalidInputRect: win32.RECT, invalidOutputRect: ^win32.RECT) -> win32.HRESULT,
}

ID2D1TransformedGeometry_UUID := &win32.IID{0x2cd906bb, 0x12e2, 0x11dc, {0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9}}
ID2D1TransformedGeometry :: struct #raw_union {
	#subtype parent: ID2D1Geometry,
	using vtable: ^ID2D1TransformedGeometry_VTable,
}
ID2D1TransformedGeometry_VTable :: struct {
	using id2d1geometry_vtable: ID2D1Geometry_VTable,
	GetSourceGeometry: proc "system" (this: ^ID2D1TransformedGeometry, sourceGeometry: ^^ID2D1Geometry),
	GetTransform: proc "system" (this: ^ID2D1TransformedGeometry, transform: ^D2D_MATRIX_3X2_F),
}

ID2D1TransformedImageSource_UUID := &win32.IID{0x7f1f79e5, 0x2796, 0x416c, {0x8f, 0x55, 0x70, 0x0f, 0x91, 0x14, 0x45, 0xe5}}
ID2D1TransformedImageSource :: struct #raw_union {
	#subtype parent: ID2D1Image,
	using vtable: ^ID2D1TransformedImageSource_VTable,
}
ID2D1TransformedImageSource_VTable :: struct {
	using id2d1image_vtable: ID2D1Image_VTable,
	GetSource: proc "system" (this: ^ID2D1TransformedImageSource, imageSource: ^^ID2D1ImageSource),
	GetProperties: proc "system" (this: ^ID2D1TransformedImageSource, properties: ^D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES),
}

ID2D1TransformGraph_UUID := &win32.IID{0x13d29038, 0xc3e6, 0x4034, {0x90, 0x81, 0x13, 0xb5, 0x3a, 0x41, 0x79, 0x92}}
ID2D1TransformGraph :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1TransformGraph_VTable,
}
ID2D1TransformGraph_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetInputCount: proc "system" (this: ^ID2D1TransformGraph) -> u32,
	SetSingleTransformNode: proc "system" (this: ^ID2D1TransformGraph, node: ^ID2D1TransformNode) -> win32.HRESULT,
	AddNode: proc "system" (this: ^ID2D1TransformGraph, node: ^ID2D1TransformNode) -> win32.HRESULT,
	RemoveNode: proc "system" (this: ^ID2D1TransformGraph, node: ^ID2D1TransformNode) -> win32.HRESULT,
	SetOutputNode: proc "system" (this: ^ID2D1TransformGraph, node: ^ID2D1TransformNode) -> win32.HRESULT,
	ConnectNode: proc "system" (this: ^ID2D1TransformGraph, fromNode: ^ID2D1TransformNode, toNode: ^ID2D1TransformNode, toNodeInputIndex: u32) -> win32.HRESULT,
	ConnectToEffectInput: proc "system" (this: ^ID2D1TransformGraph, toEffectInputIndex: u32, node: ^ID2D1TransformNode, toNodeInputIndex: u32) -> win32.HRESULT,
	Clear: proc "system" (this: ^ID2D1TransformGraph),
	SetPassthroughGraph: proc "system" (this: ^ID2D1TransformGraph, effectInputIndex: u32) -> win32.HRESULT,
}

ID2D1TransformNode_UUID := &win32.IID{0xb2efe1e7, 0x729f, 0x4102, {0x94, 0x9f, 0x50, 0x5f, 0xa2, 0x1b, 0xf6, 0x66}}
ID2D1TransformNode :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1TransformNode_VTable,
}
ID2D1TransformNode_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetInputCount: proc "system" (this: ^ID2D1TransformNode) -> u32,
}

ID2D1VertexBuffer_UUID := &win32.IID{0x9b8b1336, 0x00a5, 0x4668, {0x92, 0xb7, 0xce, 0xd5, 0xd8, 0xbf, 0x9b, 0x7b}}
ID2D1VertexBuffer :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^ID2D1VertexBuffer_VTable,
}
ID2D1VertexBuffer_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	Map: proc "system" (this: ^ID2D1VertexBuffer, data: ^^u8, bufferSize: u32) -> win32.HRESULT,
	Unmap: proc "system" (this: ^ID2D1VertexBuffer) -> win32.HRESULT,
}

IDWriteAsyncResult_UUID := &win32.IID{0xce25f8fd, 0x863b, 0x4d13, {0x96, 0x51, 0xc1, 0xf8, 0x8d, 0xc7, 0x3f, 0xe2}}
IDWriteAsyncResult :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteAsyncResult_VTable,
}
IDWriteAsyncResult_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetWaitHandle: proc "system" (this: ^IDWriteAsyncResult) -> win32.HANDLE,
	GetResult: proc "system" (this: ^IDWriteAsyncResult) -> win32.HRESULT,
}

IDWriteBitmapRenderTarget_UUID := &win32.IID{0x5e5a32a3, 0x8dff, 0x4773, {0x9f, 0xf6, 0x06, 0x96, 0xea, 0xb7, 0x72, 0x67}}
IDWriteBitmapRenderTarget :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteBitmapRenderTarget_VTable,
}
IDWriteBitmapRenderTarget_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	DrawGlyphRun: proc "system" (this: ^IDWriteBitmapRenderTarget, baselineOriginX: f32, baselineOriginY: f32, measuringMode: DWRITE_MEASURING_MODE, glyphRun: ^DWRITE_GLYPH_RUN, renderingParams: ^IDWriteRenderingParams, textColor: win32.COLORREF, blackBoxRect: ^win32.RECT) -> win32.HRESULT,
	GetMemoryDC: proc "system" (this: ^IDWriteBitmapRenderTarget) -> win32.HDC,
	GetPixelsPerDip: proc "system" (this: ^IDWriteBitmapRenderTarget) -> f32,
	SetPixelsPerDip: proc "system" (this: ^IDWriteBitmapRenderTarget, pixelsPerDip: f32) -> win32.HRESULT,
	GetCurrentTransform: proc "system" (this: ^IDWriteBitmapRenderTarget, transform: ^DWRITE_MATRIX) -> win32.HRESULT,
	SetCurrentTransform: proc "system" (this: ^IDWriteBitmapRenderTarget, transform: ^DWRITE_MATRIX) -> win32.HRESULT,
	GetSize: proc "system" (this: ^IDWriteBitmapRenderTarget, size: ^win32.SIZE) -> win32.HRESULT,
	Resize: proc "system" (this: ^IDWriteBitmapRenderTarget, width: u32, height: u32) -> win32.HRESULT,
}

IDWriteBitmapRenderTarget1_UUID := &win32.IID{0x791e8298, 0x3ef3, 0x4230, {0x98, 0x80, 0xc9, 0xbd, 0xec, 0xc4, 0x20, 0x64}}
IDWriteBitmapRenderTarget1 :: struct #raw_union {
	#subtype parent: IDWriteBitmapRenderTarget,
	using vtable: ^IDWriteBitmapRenderTarget1_VTable,
}
IDWriteBitmapRenderTarget1_VTable :: struct {
	using idwritebitmaprendertarget_vtable: IDWriteBitmapRenderTarget_VTable,
	GetTextAntialiasMode: proc "system" (this: ^IDWriteBitmapRenderTarget1) -> DWRITE_TEXT_ANTIALIAS_MODE,
	SetTextAntialiasMode: proc "system" (this: ^IDWriteBitmapRenderTarget1, antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE) -> win32.HRESULT,
}

IDWriteColorGlyphRunEnumerator_UUID := &win32.IID{0xd31fbe17, 0xf157, 0x41a2, {0x8d, 0x24, 0xcb, 0x77, 0x9e, 0x05, 0x60, 0xe8}}
IDWriteColorGlyphRunEnumerator :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteColorGlyphRunEnumerator_VTable,
}
IDWriteColorGlyphRunEnumerator_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	MoveNext: proc "system" (this: ^IDWriteColorGlyphRunEnumerator, hasRun: ^win32.BOOL) -> win32.HRESULT,
	GetCurrentRun: proc "system" (this: ^IDWriteColorGlyphRunEnumerator, colorGlyphRun: ^^DWRITE_COLOR_GLYPH_RUN) -> win32.HRESULT,
}

IDWriteColorGlyphRunEnumerator1_UUID := &win32.IID{0x7c5f86da, 0xc7a1, 0x4f05, {0xb8, 0xe1, 0x55, 0xa1, 0x79, 0xfe, 0x5a, 0x35}}
IDWriteColorGlyphRunEnumerator1 :: struct #raw_union {
	#subtype parent: IDWriteColorGlyphRunEnumerator,
	using vtable: ^IDWriteColorGlyphRunEnumerator1_VTable,
}
IDWriteColorGlyphRunEnumerator1_VTable :: struct {
	using idwritecolorglyphrunenumerator_vtable: IDWriteColorGlyphRunEnumerator_VTable,
	GetCurrentRun1: proc "system" (this: ^IDWriteColorGlyphRunEnumerator1, colorGlyphRun: ^^DWRITE_COLOR_GLYPH_RUN1) -> win32.HRESULT,
}

IDWriteFactory_UUID := &win32.IID{0xb859ee5a, 0xd838, 0x4b5b, {0xa2, 0xe8, 0x1a, 0xdc, 0x7d, 0x93, 0xdb, 0x48}}
IDWriteFactory :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFactory_VTable,
}
IDWriteFactory_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetSystemFontCollection: proc "system" (this: ^IDWriteFactory, fontCollection: ^^IDWriteFontCollection, checkForUpdates: win32.BOOL) -> win32.HRESULT,
	CreateCustomFontCollection: proc "system" (this: ^IDWriteFactory, collectionLoader: ^IDWriteFontCollectionLoader, collectionKey: rawptr, collectionKeySize: u32, fontCollection: ^^IDWriteFontCollection) -> win32.HRESULT,
	RegisterFontCollectionLoader: proc "system" (this: ^IDWriteFactory, fontCollectionLoader: ^IDWriteFontCollectionLoader) -> win32.HRESULT,
	UnregisterFontCollectionLoader: proc "system" (this: ^IDWriteFactory, fontCollectionLoader: ^IDWriteFontCollectionLoader) -> win32.HRESULT,
	CreateFontFileReference: proc "system" (this: ^IDWriteFactory, filePath: ^win32.WCHAR, lastWriteTime: ^win32.FILETIME, fontFile: ^^IDWriteFontFile) -> win32.HRESULT,
	CreateCustomFontFileReference: proc "system" (this: ^IDWriteFactory, fontFileReferenceKey: rawptr, fontFileReferenceKeySize: u32, fontFileLoader: ^IDWriteFontFileLoader, fontFile: ^^IDWriteFontFile) -> win32.HRESULT,
	CreateFontFace: proc "system" (this: ^IDWriteFactory, fontFaceType: DWRITE_FONT_FACE_TYPE, numberOfFiles: u32, fontFiles: ^^IDWriteFontFile, faceIndex: u32, fontFaceSimulationFlags: DWRITE_FONT_SIMULATIONS, fontFace: ^^IDWriteFontFace) -> win32.HRESULT,
	CreateRenderingParams: proc "system" (this: ^IDWriteFactory, renderingParams: ^^IDWriteRenderingParams) -> win32.HRESULT,
	CreateMonitorRenderingParams: proc "system" (this: ^IDWriteFactory, monitor: win32.HMONITOR, renderingParams: ^^IDWriteRenderingParams) -> win32.HRESULT,
	CreateCustomRenderingParams: proc "system" (this: ^IDWriteFactory, gamma: f32, enhancedContrast: f32, clearTypeLevel: f32, pixelGeometry: DWRITE_PIXEL_GEOMETRY, renderingMode: DWRITE_RENDERING_MODE, renderingParams: ^^IDWriteRenderingParams) -> win32.HRESULT,
	RegisterFontFileLoader: proc "system" (this: ^IDWriteFactory, fontFileLoader: ^IDWriteFontFileLoader) -> win32.HRESULT,
	UnregisterFontFileLoader: proc "system" (this: ^IDWriteFactory, fontFileLoader: ^IDWriteFontFileLoader) -> win32.HRESULT,
	CreateTextFormat: proc "system" (this: ^IDWriteFactory, fontFamilyName: ^win32.WCHAR, fontCollection: ^IDWriteFontCollection, fontWeight: DWRITE_FONT_WEIGHT, fontStyle: DWRITE_FONT_STYLE, fontStretch: DWRITE_FONT_STRETCH, fontSize: f32, localeName: ^win32.WCHAR, textFormat: ^^IDWriteTextFormat) -> win32.HRESULT,
	CreateTypography: proc "system" (this: ^IDWriteFactory, typography: ^^IDWriteTypography) -> win32.HRESULT,
	GetGdiInterop: proc "system" (this: ^IDWriteFactory, gdiInterop: ^^IDWriteGdiInterop) -> win32.HRESULT,
	CreateTextLayout: proc "system" (this: ^IDWriteFactory, _string: ^win32.WCHAR, stringLength: u32, textFormat: ^IDWriteTextFormat, maxWidth: f32, maxHeight: f32, textLayout: ^^IDWriteTextLayout) -> win32.HRESULT,
	CreateGdiCompatibleTextLayout: proc "system" (this: ^IDWriteFactory, _string: ^win32.WCHAR, stringLength: u32, textFormat: ^IDWriteTextFormat, layoutWidth: f32, layoutHeight: f32, pixelsPerDip: f32, transform: ^DWRITE_MATRIX, useGdiNatural: win32.BOOL, textLayout: ^^IDWriteTextLayout) -> win32.HRESULT,
	CreateEllipsisTrimmingSign: proc "system" (this: ^IDWriteFactory, textFormat: ^IDWriteTextFormat, trimmingSign: ^^IDWriteInlineObject) -> win32.HRESULT,
	CreateTextAnalyzer: proc "system" (this: ^IDWriteFactory, textAnalyzer: ^^IDWriteTextAnalyzer) -> win32.HRESULT,
	CreateNumberSubstitution: proc "system" (this: ^IDWriteFactory, substitutionMethod: DWRITE_NUMBER_SUBSTITUTION_METHOD, localeName: ^win32.WCHAR, ignoreUserOverride: win32.BOOL, numberSubstitution: ^^IDWriteNumberSubstitution) -> win32.HRESULT,
	CreateGlyphRunAnalysis: proc "system" (this: ^IDWriteFactory, glyphRun: ^DWRITE_GLYPH_RUN, pixelsPerDip: f32, transform: ^DWRITE_MATRIX, renderingMode: DWRITE_RENDERING_MODE, measuringMode: DWRITE_MEASURING_MODE, baselineOriginX: f32, baselineOriginY: f32, glyphRunAnalysis: ^^IDWriteGlyphRunAnalysis) -> win32.HRESULT,
}

IDWriteFactory1_UUID := &win32.IID{0x30572f99, 0xdac6, 0x41db, {0xa1, 0x6e, 0x04, 0x86, 0x30, 0x7e, 0x60, 0x6a}}
IDWriteFactory1 :: struct #raw_union {
	#subtype parent: IDWriteFactory,
	using vtable: ^IDWriteFactory1_VTable,
}
IDWriteFactory1_VTable :: struct {
	using idwritefactory_vtable: IDWriteFactory_VTable,
	GetEudcFontCollection: proc "system" (this: ^IDWriteFactory1, fontCollection: ^^IDWriteFontCollection, checkForUpdates: win32.BOOL) -> win32.HRESULT,
	CreateCustomRenderingParams1: proc "system" (this: ^IDWriteFactory1, gamma: f32, enhancedContrast: f32, enhancedContrastGrayscale: f32, clearTypeLevel: f32, pixelGeometry: DWRITE_PIXEL_GEOMETRY, renderingMode: DWRITE_RENDERING_MODE, renderingParams: ^^IDWriteRenderingParams1) -> win32.HRESULT,
}

IDWriteFactory2_UUID := &win32.IID{0x0439fc60, 0xca44, 0x4994, {0x8d, 0xee, 0x3a, 0x9a, 0xf7, 0xb7, 0x32, 0xec}}
IDWriteFactory2 :: struct #raw_union {
	#subtype parent: IDWriteFactory1,
	using vtable: ^IDWriteFactory2_VTable,
}
IDWriteFactory2_VTable :: struct {
	using idwritefactory1_vtable: IDWriteFactory1_VTable,
	GetSystemFontFallback: proc "system" (this: ^IDWriteFactory2, fontFallback: ^^IDWriteFontFallback) -> win32.HRESULT,
	CreateFontFallbackBuilder: proc "system" (this: ^IDWriteFactory2, fontFallbackBuilder: ^^IDWriteFontFallbackBuilder) -> win32.HRESULT,
	TranslateColorGlyphRun: proc "system" (this: ^IDWriteFactory2, baselineOriginX: f32, baselineOriginY: f32, glyphRun: ^DWRITE_GLYPH_RUN, glyphRunDescription: ^DWRITE_GLYPH_RUN_DESCRIPTION, measuringMode: DWRITE_MEASURING_MODE, worldToDeviceTransform: ^DWRITE_MATRIX, colorPaletteIndex: u32, colorLayers: ^^IDWriteColorGlyphRunEnumerator) -> win32.HRESULT,
	CreateCustomRenderingParams2: proc "system" (this: ^IDWriteFactory2, gamma: f32, enhancedContrast: f32, grayscaleEnhancedContrast: f32, clearTypeLevel: f32, pixelGeometry: DWRITE_PIXEL_GEOMETRY, renderingMode: DWRITE_RENDERING_MODE, gridFitMode: DWRITE_GRID_FIT_MODE, renderingParams: ^^IDWriteRenderingParams2) -> win32.HRESULT,
	CreateGlyphRunAnalysis1: proc "system" (this: ^IDWriteFactory2, glyphRun: ^DWRITE_GLYPH_RUN, transform: ^DWRITE_MATRIX, renderingMode: DWRITE_RENDERING_MODE, measuringMode: DWRITE_MEASURING_MODE, gridFitMode: DWRITE_GRID_FIT_MODE, antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE, baselineOriginX: f32, baselineOriginY: f32, glyphRunAnalysis: ^^IDWriteGlyphRunAnalysis) -> win32.HRESULT,
}

IDWriteFactory3_UUID := &win32.IID{0x9a1b41c3, 0xd3bb, 0x466a, {0x87, 0xfc, 0xfe, 0x67, 0x55, 0x6a, 0x3b, 0x65}}
IDWriteFactory3 :: struct #raw_union {
	#subtype parent: IDWriteFactory2,
	using vtable: ^IDWriteFactory3_VTable,
}
IDWriteFactory3_VTable :: struct {
	using idwritefactory2_vtable: IDWriteFactory2_VTable,
	CreateGlyphRunAnalysis2: proc "system" (this: ^IDWriteFactory3, glyphRun: ^DWRITE_GLYPH_RUN, transform: ^DWRITE_MATRIX, renderingMode: DWRITE_RENDERING_MODE1, measuringMode: DWRITE_MEASURING_MODE, gridFitMode: DWRITE_GRID_FIT_MODE, antialiasMode: DWRITE_TEXT_ANTIALIAS_MODE, baselineOriginX: f32, baselineOriginY: f32, glyphRunAnalysis: ^^IDWriteGlyphRunAnalysis) -> win32.HRESULT,
	CreateCustomRenderingParams3: proc "system" (this: ^IDWriteFactory3, gamma: f32, enhancedContrast: f32, grayscaleEnhancedContrast: f32, clearTypeLevel: f32, pixelGeometry: DWRITE_PIXEL_GEOMETRY, renderingMode: DWRITE_RENDERING_MODE1, gridFitMode: DWRITE_GRID_FIT_MODE, renderingParams: ^^IDWriteRenderingParams3) -> win32.HRESULT,
	CreateFontFaceReference: proc "system" (this: ^IDWriteFactory3, fontFile: ^IDWriteFontFile, faceIndex: u32, fontSimulations: DWRITE_FONT_SIMULATIONS, fontFaceReference: ^^IDWriteFontFaceReference) -> win32.HRESULT,
	CreateFontFaceReference1: proc "system" (this: ^IDWriteFactory3, filePath: ^win32.WCHAR, lastWriteTime: ^win32.FILETIME, faceIndex: u32, fontSimulations: DWRITE_FONT_SIMULATIONS, fontFaceReference: ^^IDWriteFontFaceReference) -> win32.HRESULT,
	GetSystemFontSet: proc "system" (this: ^IDWriteFactory3, fontSet: ^^IDWriteFontSet) -> win32.HRESULT,
	CreateFontSetBuilder: proc "system" (this: ^IDWriteFactory3, fontSetBuilder: ^^IDWriteFontSetBuilder) -> win32.HRESULT,
	CreateFontCollectionFromFontSet: proc "system" (this: ^IDWriteFactory3, fontSet: ^IDWriteFontSet, fontCollection: ^^IDWriteFontCollection1) -> win32.HRESULT,
	GetSystemFontCollection1: proc "system" (this: ^IDWriteFactory3, includeDownloadableFonts: win32.BOOL, fontCollection: ^^IDWriteFontCollection1, checkForUpdates: win32.BOOL) -> win32.HRESULT,
	GetFontDownloadQueue: proc "system" (this: ^IDWriteFactory3, fontDownloadQueue: ^^IDWriteFontDownloadQueue) -> win32.HRESULT,
}

IDWriteFactory4_UUID := &win32.IID{0x4b0b5bd3, 0x0797, 0x4549, {0x8a, 0xc5, 0xfe, 0x91, 0x5c, 0xc5, 0x38, 0x56}}
IDWriteFactory4 :: struct #raw_union {
	#subtype parent: IDWriteFactory3,
	using vtable: ^IDWriteFactory4_VTable,
}
IDWriteFactory4_VTable :: struct {
	using idwritefactory3_vtable: IDWriteFactory3_VTable,
	TranslateColorGlyphRun1: proc "system" (this: ^IDWriteFactory4, baselineOrigin: D2D_POINT_2F, glyphRun: ^DWRITE_GLYPH_RUN, glyphRunDescription: ^DWRITE_GLYPH_RUN_DESCRIPTION, desiredGlyphImageFormats: DWRITE_GLYPH_IMAGE_FORMATS, measuringMode: DWRITE_MEASURING_MODE, worldAndDpiTransform: ^DWRITE_MATRIX, colorPaletteIndex: u32, colorLayers: ^^IDWriteColorGlyphRunEnumerator1) -> win32.HRESULT,
	ComputeGlyphOrigins: proc "system" (this: ^IDWriteFactory4, glyphRun: ^DWRITE_GLYPH_RUN, baselineOrigin: D2D_POINT_2F, glyphOrigins: ^D2D_POINT_2F) -> win32.HRESULT,
	ComputeGlyphOrigins1: proc "system" (this: ^IDWriteFactory4, glyphRun: ^DWRITE_GLYPH_RUN, measuringMode: DWRITE_MEASURING_MODE, baselineOrigin: D2D_POINT_2F, worldAndDpiTransform: ^DWRITE_MATRIX, glyphOrigins: ^D2D_POINT_2F) -> win32.HRESULT,
}

IDWriteFactory5_UUID := &win32.IID{0x958db99a, 0xbe2a, 0x4f09, {0xaf, 0x7d, 0x65, 0x18, 0x98, 0x03, 0xd1, 0xd3}}
IDWriteFactory5 :: struct #raw_union {
	#subtype parent: IDWriteFactory4,
	using vtable: ^IDWriteFactory5_VTable,
}
IDWriteFactory5_VTable :: struct {
	using idwritefactory4_vtable: IDWriteFactory4_VTable,
	CreateFontSetBuilder1: proc "system" (this: ^IDWriteFactory5, fontSetBuilder: ^^IDWriteFontSetBuilder1) -> win32.HRESULT,
	CreateInMemoryFontFileLoader: proc "system" (this: ^IDWriteFactory5, newLoader: ^^IDWriteInMemoryFontFileLoader) -> win32.HRESULT,
	CreateHttpFontFileLoader: proc "system" (this: ^IDWriteFactory5, referrerUrl: ^win32.WCHAR, extraHeaders: ^win32.WCHAR, newLoader: ^^IDWriteRemoteFontFileLoader) -> win32.HRESULT,
	AnalyzeContainerType: proc "system" (this: ^IDWriteFactory5, fileData: rawptr, fileDataSize: u32) -> DWRITE_CONTAINER_TYPE,
	UnpackFontFile: proc "system" (this: ^IDWriteFactory5, containerType: DWRITE_CONTAINER_TYPE, fileData: rawptr, fileDataSize: u32, unpackedFontStream: ^^IDWriteFontFileStream) -> win32.HRESULT,
}

IDWriteFactory6_UUID := &win32.IID{0xf3744d80, 0x21f7, 0x42eb, {0xb3, 0x5d, 0x99, 0x5b, 0xc7, 0x2f, 0xc2, 0x23}}
IDWriteFactory6 :: struct #raw_union {
	#subtype parent: IDWriteFactory5,
	using vtable: ^IDWriteFactory6_VTable,
}
IDWriteFactory6_VTable :: struct {
	using idwritefactory5_vtable: IDWriteFactory5_VTable,
	CreateFontFaceReference2: proc "system" (this: ^IDWriteFactory6, fontFile: ^IDWriteFontFile, faceIndex: u32, fontSimulations: DWRITE_FONT_SIMULATIONS, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontFaceReference: ^^IDWriteFontFaceReference1) -> win32.HRESULT,
	CreateFontResource: proc "system" (this: ^IDWriteFactory6, fontFile: ^IDWriteFontFile, faceIndex: u32, fontResource: ^^IDWriteFontResource) -> win32.HRESULT,
	GetSystemFontSet1: proc "system" (this: ^IDWriteFactory6, includeDownloadableFonts: win32.BOOL, fontSet: ^^IDWriteFontSet1) -> win32.HRESULT,
	GetSystemFontCollection2: proc "system" (this: ^IDWriteFactory6, includeDownloadableFonts: win32.BOOL, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, fontCollection: ^^IDWriteFontCollection2) -> win32.HRESULT,
	CreateFontCollectionFromFontSet1: proc "system" (this: ^IDWriteFactory6, fontSet: ^IDWriteFontSet, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, fontCollection: ^^IDWriteFontCollection2) -> win32.HRESULT,
	CreateFontSetBuilder2: proc "system" (this: ^IDWriteFactory6, fontSetBuilder: ^^IDWriteFontSetBuilder2) -> win32.HRESULT,
	CreateTextFormat1: proc "system" (this: ^IDWriteFactory6, fontFamilyName: ^win32.WCHAR, fontCollection: ^IDWriteFontCollection, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontSize: f32, localeName: ^win32.WCHAR, textFormat: ^^IDWriteTextFormat3) -> win32.HRESULT,
}

IDWriteFactory7_UUID := &win32.IID{0x35d0e0b3, 0x9076, 0x4d2e, {0xa0, 0x16, 0xa9, 0x1b, 0x56, 0x8a, 0x06, 0xb4}}
IDWriteFactory7 :: struct #raw_union {
	#subtype parent: IDWriteFactory6,
	using vtable: ^IDWriteFactory7_VTable,
}
IDWriteFactory7_VTable :: struct {
	using idwritefactory6_vtable: IDWriteFactory6_VTable,
	GetSystemFontSet2: proc "system" (this: ^IDWriteFactory7, includeDownloadableFonts: win32.BOOL, fontSet: ^^IDWriteFontSet2) -> win32.HRESULT,
	GetSystemFontCollection3: proc "system" (this: ^IDWriteFactory7, includeDownloadableFonts: win32.BOOL, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, fontCollection: ^^IDWriteFontCollection3) -> win32.HRESULT,
}

IDWriteFont_UUID := &win32.IID{0xacd16696, 0x8c14, 0x4f5d, {0x87, 0x7e, 0xfe, 0x3f, 0xc1, 0xd3, 0x27, 0x37}}
IDWriteFont :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFont_VTable,
}
IDWriteFont_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetFontFamily: proc "system" (this: ^IDWriteFont, fontFamily: ^^IDWriteFontFamily) -> win32.HRESULT,
	GetWeight: proc "system" (this: ^IDWriteFont) -> DWRITE_FONT_WEIGHT,
	GetStretch: proc "system" (this: ^IDWriteFont) -> DWRITE_FONT_STRETCH,
	GetStyle: proc "system" (this: ^IDWriteFont) -> DWRITE_FONT_STYLE,
	IsSymbolFont: proc "system" (this: ^IDWriteFont) -> win32.BOOL,
	GetFaceNames: proc "system" (this: ^IDWriteFont, names: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
	GetInformationalStrings: proc "system" (this: ^IDWriteFont, informationalStringID: DWRITE_INFORMATIONAL_STRING_ID, informationalStrings: ^^IDWriteLocalizedStrings, exists: ^win32.BOOL) -> win32.HRESULT,
	GetSimulations: proc "system" (this: ^IDWriteFont) -> DWRITE_FONT_SIMULATIONS,
	GetMetrics: proc "system" (this: ^IDWriteFont, fontMetrics: ^DWRITE_FONT_METRICS),
	HasCharacter: proc "system" (this: ^IDWriteFont, unicodeValue: u32, exists: ^win32.BOOL) -> win32.HRESULT,
	CreateFontFace: proc "system" (this: ^IDWriteFont, fontFace: ^^IDWriteFontFace) -> win32.HRESULT,
}

IDWriteFont1_UUID := &win32.IID{0xacd16696, 0x8c14, 0x4f5d, {0x87, 0x7e, 0xfe, 0x3f, 0xc1, 0xd3, 0x27, 0x38}}
IDWriteFont1 :: struct #raw_union {
	#subtype parent: IDWriteFont,
	using vtable: ^IDWriteFont1_VTable,
}
IDWriteFont1_VTable :: struct {
	using idwritefont_vtable: IDWriteFont_VTable,
	GetMetrics1: proc "system" (this: ^IDWriteFont1, fontMetrics: ^DWRITE_FONT_METRICS1),
	GetPanose: proc "system" (this: ^IDWriteFont1, panose: ^DWRITE_PANOSE),
	GetUnicodeRanges: proc "system" (this: ^IDWriteFont1, maxRangeCount: u32, unicodeRanges: ^DWRITE_UNICODE_RANGE, actualRangeCount: ^u32) -> win32.HRESULT,
	IsMonospacedFont: proc "system" (this: ^IDWriteFont1) -> win32.BOOL,
}

IDWriteFont2_UUID := &win32.IID{0x29748ed6, 0x8c9c, 0x4a6a, {0xbe, 0x0b, 0xd9, 0x12, 0xe8, 0x53, 0x89, 0x44}}
IDWriteFont2 :: struct #raw_union {
	#subtype parent: IDWriteFont1,
	using vtable: ^IDWriteFont2_VTable,
}
IDWriteFont2_VTable :: struct {
	using idwritefont1_vtable: IDWriteFont1_VTable,
	IsColorFont: proc "system" (this: ^IDWriteFont2) -> win32.BOOL,
}

IDWriteFont3_UUID := &win32.IID{0x29748ed6, 0x8c9c, 0x4a6a, {0xbe, 0x0b, 0xd9, 0x12, 0xe8, 0x53, 0x89, 0x44}}
IDWriteFont3 :: struct #raw_union {
	#subtype parent: IDWriteFont2,
	using vtable: ^IDWriteFont3_VTable,
}
IDWriteFont3_VTable :: struct {
	using idwritefont2_vtable: IDWriteFont2_VTable,
	CreateFontFace1: proc "system" (this: ^IDWriteFont3, fontFace: ^^IDWriteFontFace3) -> win32.HRESULT,
	Equals: proc "system" (this: ^IDWriteFont3, font: ^IDWriteFont) -> win32.BOOL,
	GetFontFaceReference: proc "system" (this: ^IDWriteFont3, fontFaceReference: ^^IDWriteFontFaceReference) -> win32.HRESULT,
	HasCharacter1: proc "system" (this: ^IDWriteFont3, unicodeValue: u32) -> win32.BOOL,
	GetLocality: proc "system" (this: ^IDWriteFont3) -> DWRITE_LOCALITY,
}

IDWriteFontCollection_UUID := &win32.IID{0xa84cee02, 0x3eea, 0x4eee, {0xa8, 0x27, 0x87, 0xc1, 0xa0, 0x2a, 0x0f, 0xcc}}
IDWriteFontCollection :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontCollection_VTable,
}
IDWriteFontCollection_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetFontFamilyCount: proc "system" (this: ^IDWriteFontCollection) -> u32,
	GetFontFamily: proc "system" (this: ^IDWriteFontCollection, index: u32, fontFamily: ^^IDWriteFontFamily) -> win32.HRESULT,
	FindFamilyName: proc "system" (this: ^IDWriteFontCollection, familyName: ^win32.WCHAR, index: ^u32, exists: ^win32.BOOL) -> win32.HRESULT,
	GetFontFromFontFace: proc "system" (this: ^IDWriteFontCollection, fontFace: ^IDWriteFontFace, font: ^^IDWriteFont) -> win32.HRESULT,
}

IDWriteFontCollection1_UUID := &win32.IID{0x53585141, 0xd9f8, 0x4095, {0x83, 0x21, 0xd7, 0x3c, 0xf6, 0xbd, 0x11, 0x6c}}
IDWriteFontCollection1 :: struct #raw_union {
	#subtype parent: IDWriteFontCollection,
	using vtable: ^IDWriteFontCollection1_VTable,
}
IDWriteFontCollection1_VTable :: struct {
	using idwritefontcollection_vtable: IDWriteFontCollection_VTable,
	GetFontSet: proc "system" (this: ^IDWriteFontCollection1, fontSet: ^^IDWriteFontSet) -> win32.HRESULT,
	GetFontFamily1: proc "system" (this: ^IDWriteFontCollection1, index: u32, fontFamily: ^^IDWriteFontFamily1) -> win32.HRESULT,
}

IDWriteFontCollection2_UUID := &win32.IID{0x514039c6, 0x4617, 0x4064, {0xbf, 0x8b, 0x92, 0xea, 0x83, 0xe5, 0x06, 0xe0}}
IDWriteFontCollection2 :: struct #raw_union {
	#subtype parent: IDWriteFontCollection1,
	using vtable: ^IDWriteFontCollection2_VTable,
}
IDWriteFontCollection2_VTable :: struct {
	using idwritefontcollection1_vtable: IDWriteFontCollection1_VTable,
	GetFontFamily2: proc "system" (this: ^IDWriteFontCollection2, index: u32, fontFamily: ^^IDWriteFontFamily2) -> win32.HRESULT,
	GetMatchingFonts: proc "system" (this: ^IDWriteFontCollection2, familyName: ^win32.WCHAR, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontList: ^^IDWriteFontList2) -> win32.HRESULT,
	GetFontFamilyModel: proc "system" (this: ^IDWriteFontCollection2) -> DWRITE_FONT_FAMILY_MODEL,
	GetFontSet1: proc "system" (this: ^IDWriteFontCollection2, fontSet: ^^IDWriteFontSet1) -> win32.HRESULT,
}

IDWriteFontCollection3_UUID := &win32.IID{0xa4d055a6, 0xf9e3, 0x4e25, {0x93, 0xb7, 0x9e, 0x30, 0x9f, 0x3a, 0xf8, 0xe9}}
IDWriteFontCollection3 :: struct #raw_union {
	#subtype parent: IDWriteFontCollection2,
	using vtable: ^IDWriteFontCollection3_VTable,
}
IDWriteFontCollection3_VTable :: struct {
	using idwritefontcollection2_vtable: IDWriteFontCollection2_VTable,
	GetExpirationEvent: proc "system" (this: ^IDWriteFontCollection3) -> win32.HANDLE,
}

IDWriteFontCollectionLoader_UUID := &win32.IID{0xcca920e4, 0x52f0, 0x492b, {0xbf, 0xa8, 0x29, 0xc7, 0x2e, 0xe0, 0xa4, 0x68}}
IDWriteFontCollectionLoader :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontCollectionLoader_VTable,
}
IDWriteFontCollectionLoader_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	CreateEnumeratorFromKey: proc "system" (this: ^IDWriteFontCollectionLoader, factory: ^IDWriteFactory, collectionKey: rawptr, collectionKeySize: u32, fontFileEnumerator: ^^IDWriteFontFileEnumerator) -> win32.HRESULT,
}

IDWriteFontDownloadListener_UUID := &win32.IID{0xb06fe5b9, 0x43ec, 0x4393, {0x88, 0x1b, 0xdb, 0xe4, 0xdc, 0x72, 0xfd, 0xa7}}
IDWriteFontDownloadListener :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontDownloadListener_VTable,
}
IDWriteFontDownloadListener_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	DownloadCompleted: proc "system" (this: ^IDWriteFontDownloadListener, downloadQueue: ^IDWriteFontDownloadQueue, _context: ^win32.IUnknown, downloadResult: win32.HRESULT),
}

IDWriteFontDownloadQueue_UUID := &win32.IID{0xb71e6052, 0x5aea, 0x4fa3, {0x83, 0x2e, 0xf6, 0x0d, 0x43, 0x1f, 0x7e, 0x91}}
IDWriteFontDownloadQueue :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontDownloadQueue_VTable,
}
IDWriteFontDownloadQueue_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	AddListener: proc "system" (this: ^IDWriteFontDownloadQueue, listener: ^IDWriteFontDownloadListener, token: ^u32) -> win32.HRESULT,
	RemoveListener: proc "system" (this: ^IDWriteFontDownloadQueue, token: u32) -> win32.HRESULT,
	IsEmpty: proc "system" (this: ^IDWriteFontDownloadQueue) -> win32.BOOL,
	BeginDownload: proc "system" (this: ^IDWriteFontDownloadQueue, _context: ^win32.IUnknown) -> win32.HRESULT,
	CancelDownload: proc "system" (this: ^IDWriteFontDownloadQueue) -> win32.HRESULT,
	GetGenerationCount: proc "system" (this: ^IDWriteFontDownloadQueue) -> u64,
}

IDWriteFontFace_UUID := &win32.IID{0x5f49804d, 0x7024, 0x4d43, {0xbf, 0xa9, 0xd2, 0x59, 0x84, 0xf5, 0x38, 0x49}}
IDWriteFontFace :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontFace_VTable,
}
IDWriteFontFace_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetType: proc "system" (this: ^IDWriteFontFace) -> DWRITE_FONT_FACE_TYPE,
	GetFiles: proc "system" (this: ^IDWriteFontFace, numberOfFiles: ^u32, fontFiles: ^^IDWriteFontFile) -> win32.HRESULT,
	GetIndex: proc "system" (this: ^IDWriteFontFace) -> u32,
	GetSimulations: proc "system" (this: ^IDWriteFontFace) -> DWRITE_FONT_SIMULATIONS,
	IsSymbolFont: proc "system" (this: ^IDWriteFontFace) -> win32.BOOL,
	GetMetrics: proc "system" (this: ^IDWriteFontFace, fontFaceMetrics: ^DWRITE_FONT_METRICS),
	GetGlyphCount: proc "system" (this: ^IDWriteFontFace) -> u16,
	GetDesignGlyphMetrics: proc "system" (this: ^IDWriteFontFace, glyphIndices: ^u16, glyphCount: u32, glyphMetrics: ^DWRITE_GLYPH_METRICS, isSideways: win32.BOOL) -> win32.HRESULT,
	GetGlyphIndices: proc "system" (this: ^IDWriteFontFace, codePoints: ^u32, codePointCount: u32, glyphIndices: ^u16) -> win32.HRESULT,
	TryGetFontTable: proc "system" (this: ^IDWriteFontFace, openTypeTableTag: u32, tableData: ^rawptr, tableSize: ^u32, tableContext: ^rawptr, exists: ^win32.BOOL) -> win32.HRESULT,
	ReleaseFontTable: proc "system" (this: ^IDWriteFontFace, tableContext: rawptr),
	GetGlyphRunOutline: proc "system" (this: ^IDWriteFontFace, emSize: f32, glyphIndices: ^u16, glyphAdvances: ^f32, glyphOffsets: ^DWRITE_GLYPH_OFFSET, glyphCount: u32, isSideways: win32.BOOL, isRightToLeft: win32.BOOL, geometrySink: ^ID2D1SimplifiedGeometrySink) -> win32.HRESULT,
	GetRecommendedRenderingMode: proc "system" (this: ^IDWriteFontFace, emSize: f32, pixelsPerDip: f32, measuringMode: DWRITE_MEASURING_MODE, renderingParams: ^IDWriteRenderingParams, renderingMode: ^DWRITE_RENDERING_MODE) -> win32.HRESULT,
	GetGdiCompatibleMetrics: proc "system" (this: ^IDWriteFontFace, emSize: f32, pixelsPerDip: f32, transform: ^DWRITE_MATRIX, fontFaceMetrics: ^DWRITE_FONT_METRICS) -> win32.HRESULT,
	GetGdiCompatibleGlyphMetrics: proc "system" (this: ^IDWriteFontFace, emSize: f32, pixelsPerDip: f32, transform: ^DWRITE_MATRIX, useGdiNatural: win32.BOOL, glyphIndices: ^u16, glyphCount: u32, glyphMetrics: ^DWRITE_GLYPH_METRICS, isSideways: win32.BOOL) -> win32.HRESULT,
}

IDWriteFontFace1_UUID := &win32.IID{0xa71efdb4, 0x9fdb, 0x4838, {0xad, 0x90, 0xcf, 0xc3, 0xbe, 0x8c, 0x3d, 0xaf}}
IDWriteFontFace1 :: struct #raw_union {
	#subtype parent: IDWriteFontFace,
	using vtable: ^IDWriteFontFace1_VTable,
}
IDWriteFontFace1_VTable :: struct {
	using idwritefontface_vtable: IDWriteFontFace_VTable,
	GetMetrics1: proc "system" (this: ^IDWriteFontFace1, fontMetrics: ^DWRITE_FONT_METRICS1),
	GetGdiCompatibleMetrics1: proc "system" (this: ^IDWriteFontFace1, emSize: f32, pixelsPerDip: f32, transform: ^DWRITE_MATRIX, fontMetrics: ^DWRITE_FONT_METRICS1) -> win32.HRESULT,
	GetCaretMetrics: proc "system" (this: ^IDWriteFontFace1, caretMetrics: ^DWRITE_CARET_METRICS),
	GetUnicodeRanges: proc "system" (this: ^IDWriteFontFace1, maxRangeCount: u32, unicodeRanges: ^DWRITE_UNICODE_RANGE, actualRangeCount: ^u32) -> win32.HRESULT,
	IsMonospacedFont: proc "system" (this: ^IDWriteFontFace1) -> win32.BOOL,
	GetDesignGlyphAdvances: proc "system" (this: ^IDWriteFontFace1, glyphCount: u32, glyphIndices: ^u16, glyphAdvances: ^i32, isSideways: win32.BOOL) -> win32.HRESULT,
	GetGdiCompatibleGlyphAdvances: proc "system" (this: ^IDWriteFontFace1, emSize: f32, pixelsPerDip: f32, transform: ^DWRITE_MATRIX, useGdiNatural: win32.BOOL, isSideways: win32.BOOL, glyphCount: u32, glyphIndices: ^u16, glyphAdvances: ^i32) -> win32.HRESULT,
	GetKerningPairAdjustments: proc "system" (this: ^IDWriteFontFace1, glyphCount: u32, glyphIndices: ^u16, glyphAdvanceAdjustments: ^i32) -> win32.HRESULT,
	HasKerningPairs: proc "system" (this: ^IDWriteFontFace1) -> win32.BOOL,
	GetRecommendedRenderingMode1: proc "system" (this: ^IDWriteFontFace1, fontEmSize: f32, dpiX: f32, dpiY: f32, transform: ^DWRITE_MATRIX, isSideways: win32.BOOL, outlineThreshold: DWRITE_OUTLINE_THRESHOLD, measuringMode: DWRITE_MEASURING_MODE, renderingMode: ^DWRITE_RENDERING_MODE) -> win32.HRESULT,
	GetVerticalGlyphVariants: proc "system" (this: ^IDWriteFontFace1, glyphCount: u32, nominalGlyphIndices: ^u16, verticalGlyphIndices: ^u16) -> win32.HRESULT,
	HasVerticalGlyphVariants: proc "system" (this: ^IDWriteFontFace1) -> win32.BOOL,
}

IDWriteFontFace2_UUID := &win32.IID{0xd8b768ff, 0x64bc, 0x4e66, {0x98, 0x2b, 0xec, 0x8e, 0x87, 0xf6, 0x93, 0xf7}}
IDWriteFontFace2 :: struct #raw_union {
	#subtype parent: IDWriteFontFace1,
	using vtable: ^IDWriteFontFace2_VTable,
}
IDWriteFontFace2_VTable :: struct {
	using idwritefontface1_vtable: IDWriteFontFace1_VTable,
	IsColorFont: proc "system" (this: ^IDWriteFontFace2) -> win32.BOOL,
	GetColorPaletteCount: proc "system" (this: ^IDWriteFontFace2) -> u32,
	GetPaletteEntryCount: proc "system" (this: ^IDWriteFontFace2) -> u32,
	GetPaletteEntries: proc "system" (this: ^IDWriteFontFace2, colorPaletteIndex: u32, firstEntryIndex: u32, entryCount: u32, paletteEntries: ^DWRITE_COLOR_F) -> win32.HRESULT,
	GetRecommendedRenderingMode2: proc "system" (this: ^IDWriteFontFace2, fontEmSize: f32, dpiX: f32, dpiY: f32, transform: ^DWRITE_MATRIX, isSideways: win32.BOOL, outlineThreshold: DWRITE_OUTLINE_THRESHOLD, measuringMode: DWRITE_MEASURING_MODE, renderingParams: ^IDWriteRenderingParams, renderingMode: ^DWRITE_RENDERING_MODE, gridFitMode: ^DWRITE_GRID_FIT_MODE) -> win32.HRESULT,
}

IDWriteFontFace3_UUID := &win32.IID{0xd37d7598, 0x09be, 0x4222, {0xa2, 0x36, 0x20, 0x81, 0x34, 0x1c, 0xc1, 0xf2}}
IDWriteFontFace3 :: struct #raw_union {
	#subtype parent: IDWriteFontFace2,
	using vtable: ^IDWriteFontFace3_VTable,
}
IDWriteFontFace3_VTable :: struct {
	using idwritefontface2_vtable: IDWriteFontFace2_VTable,
	GetFontFaceReference: proc "system" (this: ^IDWriteFontFace3, fontFaceReference: ^^IDWriteFontFaceReference) -> win32.HRESULT,
	GetPanose: proc "system" (this: ^IDWriteFontFace3, panose: ^DWRITE_PANOSE),
	GetWeight: proc "system" (this: ^IDWriteFontFace3) -> DWRITE_FONT_WEIGHT,
	GetStretch: proc "system" (this: ^IDWriteFontFace3) -> DWRITE_FONT_STRETCH,
	GetStyle: proc "system" (this: ^IDWriteFontFace3) -> DWRITE_FONT_STYLE,
	GetFamilyNames: proc "system" (this: ^IDWriteFontFace3, names: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
	GetFaceNames: proc "system" (this: ^IDWriteFontFace3, names: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
	GetInformationalStrings: proc "system" (this: ^IDWriteFontFace3, informationalStringID: DWRITE_INFORMATIONAL_STRING_ID, informationalStrings: ^^IDWriteLocalizedStrings, exists: ^win32.BOOL) -> win32.HRESULT,
	HasCharacter: proc "system" (this: ^IDWriteFontFace3, unicodeValue: u32) -> win32.BOOL,
	GetRecommendedRenderingMode3: proc "system" (this: ^IDWriteFontFace3, fontEmSize: f32, dpiX: f32, dpiY: f32, transform: ^DWRITE_MATRIX, isSideways: win32.BOOL, outlineThreshold: DWRITE_OUTLINE_THRESHOLD, measuringMode: DWRITE_MEASURING_MODE, renderingParams: ^IDWriteRenderingParams, renderingMode: ^DWRITE_RENDERING_MODE1, gridFitMode: ^DWRITE_GRID_FIT_MODE) -> win32.HRESULT,
	IsCharacterLocal: proc "system" (this: ^IDWriteFontFace3, unicodeValue: u32) -> win32.BOOL,
	IsGlyphLocal: proc "system" (this: ^IDWriteFontFace3, glyphId: u16) -> win32.BOOL,
	AreCharactersLocal: proc "system" (this: ^IDWriteFontFace3, characters: ^win32.WCHAR, characterCount: u32, enqueueIfNotLocal: win32.BOOL, isLocal: ^win32.BOOL) -> win32.HRESULT,
	AreGlyphsLocal: proc "system" (this: ^IDWriteFontFace3, glyphIndices: ^u16, glyphCount: u32, enqueueIfNotLocal: win32.BOOL, isLocal: ^win32.BOOL) -> win32.HRESULT,
}

IDWriteFontFace4_UUID := &win32.IID{0x27f2a904, 0x4eb8, 0x441d, {0x96, 0x78, 0x05, 0x63, 0xf5, 0x3e, 0x3e, 0x2f}}
IDWriteFontFace4 :: struct #raw_union {
	#subtype parent: IDWriteFontFace3,
	using vtable: ^IDWriteFontFace4_VTable,
}
IDWriteFontFace4_VTable :: struct {
	using idwritefontface3_vtable: IDWriteFontFace3_VTable,
	GetGlyphImageFormats: proc "system" (this: ^IDWriteFontFace4, glyphId: u16, pixelsPerEmFirst: u32, pixelsPerEmLast: u32, glyphImageFormats: ^DWRITE_GLYPH_IMAGE_FORMATS) -> win32.HRESULT,
	GetGlyphImageFormats1: proc "system" (this: ^IDWriteFontFace4) -> DWRITE_GLYPH_IMAGE_FORMATS,
	GetGlyphImageData: proc "system" (this: ^IDWriteFontFace4, glyphId: u16, pixelsPerEm: u32, glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS, glyphData: ^DWRITE_GLYPH_IMAGE_DATA, glyphDataContext: ^rawptr) -> win32.HRESULT,
	ReleaseGlyphImageData: proc "system" (this: ^IDWriteFontFace4, glyphDataContext: rawptr),
}

IDWriteFontFace5_UUID := &win32.IID{0x98eff3a5, 0xb667, 0x479a, {0xb1, 0x45, 0xe2, 0xfa, 0x5b, 0x9f, 0xdc, 0x29}}
IDWriteFontFace5 :: struct #raw_union {
	#subtype parent: IDWriteFontFace4,
	using vtable: ^IDWriteFontFace5_VTable,
}
IDWriteFontFace5_VTable :: struct {
	using idwritefontface4_vtable: IDWriteFontFace4_VTable,
	GetFontAxisValueCount: proc "system" (this: ^IDWriteFontFace5) -> u32,
	GetFontAxisValues: proc "system" (this: ^IDWriteFontFace5, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) -> win32.HRESULT,
	HasVariations: proc "system" (this: ^IDWriteFontFace5) -> win32.BOOL,
	GetFontResource: proc "system" (this: ^IDWriteFontFace5, fontResource: ^^IDWriteFontResource) -> win32.HRESULT,
	Equals: proc "system" (this: ^IDWriteFontFace5, fontFace: ^IDWriteFontFace) -> win32.BOOL,
}

IDWriteFontFace6_UUID := &win32.IID{0xc4b1fe1b, 0x6e84, 0x47d5, {0xb5, 0x4c, 0xa5, 0x97, 0x98, 0x1b, 0x06, 0xad}}
IDWriteFontFace6 :: struct #raw_union {
	#subtype parent: IDWriteFontFace5,
	using vtable: ^IDWriteFontFace6_VTable,
}
IDWriteFontFace6_VTable :: struct {
	using idwritefontface5_vtable: IDWriteFontFace5_VTable,
	GetFamilyNames1: proc "system" (this: ^IDWriteFontFace6, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, names: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
	GetFaceNames1: proc "system" (this: ^IDWriteFontFace6, fontFamilyModel: DWRITE_FONT_FAMILY_MODEL, names: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
}

IDWriteFontFaceReference_UUID := &win32.IID{0x5e7fa7ca, 0xdde3, 0x424c, {0x89, 0xf0, 0x9f, 0xcd, 0x6f, 0xed, 0x58, 0xcd}}
IDWriteFontFaceReference :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontFaceReference_VTable,
}
IDWriteFontFaceReference_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	CreateFontFace: proc "system" (this: ^IDWriteFontFaceReference, fontFace: ^^IDWriteFontFace3) -> win32.HRESULT,
	CreateFontFaceWithSimulations: proc "system" (this: ^IDWriteFontFaceReference, fontFaceSimulationFlags: DWRITE_FONT_SIMULATIONS, fontFace: ^^IDWriteFontFace3) -> win32.HRESULT,
	Equals: proc "system" (this: ^IDWriteFontFaceReference, fontFaceReference: ^IDWriteFontFaceReference) -> win32.BOOL,
	GetFontFaceIndex: proc "system" (this: ^IDWriteFontFaceReference) -> u32,
	GetSimulations: proc "system" (this: ^IDWriteFontFaceReference) -> DWRITE_FONT_SIMULATIONS,
	GetFontFile: proc "system" (this: ^IDWriteFontFaceReference, fontFile: ^^IDWriteFontFile) -> win32.HRESULT,
	GetLocalFileSize: proc "system" (this: ^IDWriteFontFaceReference) -> u64,
	GetFileSize: proc "system" (this: ^IDWriteFontFaceReference) -> u64,
	GetFileTime: proc "system" (this: ^IDWriteFontFaceReference, lastWriteTime: ^win32.FILETIME) -> win32.HRESULT,
	GetLocality: proc "system" (this: ^IDWriteFontFaceReference) -> DWRITE_LOCALITY,
	EnqueueFontDownloadRequest: proc "system" (this: ^IDWriteFontFaceReference) -> win32.HRESULT,
	EnqueueCharacterDownloadRequest: proc "system" (this: ^IDWriteFontFaceReference, characters: ^win32.WCHAR, characterCount: u32) -> win32.HRESULT,
	EnqueueGlyphDownloadRequest: proc "system" (this: ^IDWriteFontFaceReference, glyphIndices: ^u16, glyphCount: u32) -> win32.HRESULT,
	EnqueueFileFragmentDownloadRequest: proc "system" (this: ^IDWriteFontFaceReference, fileOffset: u64, fragmentSize: u64) -> win32.HRESULT,
}

IDWriteFontFaceReference1_UUID := &win32.IID{0xc081fe77, 0x2fd1, 0x41ac, {0xa5, 0xa3, 0x34, 0x98, 0x3c, 0x4b, 0xa6, 0x1a}}
IDWriteFontFaceReference1 :: struct #raw_union {
	#subtype parent: IDWriteFontFaceReference,
	using vtable: ^IDWriteFontFaceReference1_VTable,
}
IDWriteFontFaceReference1_VTable :: struct {
	using idwritefontfacereference_vtable: IDWriteFontFaceReference_VTable,
	CreateFontFace1: proc "system" (this: ^IDWriteFontFaceReference1, fontFace: ^^IDWriteFontFace5) -> win32.HRESULT,
	GetFontAxisValueCount: proc "system" (this: ^IDWriteFontFaceReference1) -> u32,
	GetFontAxisValues: proc "system" (this: ^IDWriteFontFaceReference1, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) -> win32.HRESULT,
}

IDWriteFontFallback_UUID := &win32.IID{0xefa008f9, 0xf7a1, 0x48bf, {0xb0, 0x5c, 0xf2, 0x24, 0x71, 0x3c, 0xc0, 0xff}}
IDWriteFontFallback :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontFallback_VTable,
}
IDWriteFontFallback_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	MapCharacters: proc "system" (this: ^IDWriteFontFallback, analysisSource: ^IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, baseFontCollection: ^IDWriteFontCollection, baseFamilyName: ^win32.WCHAR, baseWeight: DWRITE_FONT_WEIGHT, baseStyle: DWRITE_FONT_STYLE, baseStretch: DWRITE_FONT_STRETCH, mappedLength: ^u32, mappedFont: ^^IDWriteFont, scale: ^f32) -> win32.HRESULT,
}

IDWriteFontFallback1_UUID := &win32.IID{0x2397599d, 0xdd0d, 0x4681, {0xbd, 0x6a, 0xf4, 0xf3, 0x1e, 0xaa, 0xde, 0x77}}
IDWriteFontFallback1 :: struct #raw_union {
	#subtype parent: IDWriteFontFallback,
	using vtable: ^IDWriteFontFallback1_VTable,
}
IDWriteFontFallback1_VTable :: struct {
	using idwritefontfallback_vtable: IDWriteFontFallback_VTable,
	MapCharacters1: proc "system" (this: ^IDWriteFontFallback1, analysisSource: ^IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, baseFontCollection: ^IDWriteFontCollection, baseFamilyName: ^win32.WCHAR, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, mappedLength: ^u32, scale: ^f32, mappedFontFace: ^^IDWriteFontFace5) -> win32.HRESULT,
}

IDWriteFontFallbackBuilder_UUID := &win32.IID{0xfd882d06, 0x8aba, 0x4fb8, {0xb8, 0x49, 0x8b, 0xe8, 0xb7, 0x3e, 0x14, 0xde}}
IDWriteFontFallbackBuilder :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontFallbackBuilder_VTable,
}
IDWriteFontFallbackBuilder_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	AddMapping: proc "system" (this: ^IDWriteFontFallbackBuilder, ranges: ^DWRITE_UNICODE_RANGE, rangesCount: u32, targetFamilyNames: ^^u16, targetFamilyNamesCount: u32, fontCollection: ^IDWriteFontCollection, localeName: ^win32.WCHAR, baseFamilyName: ^win32.WCHAR, scale: f32) -> win32.HRESULT,
	AddMappings: proc "system" (this: ^IDWriteFontFallbackBuilder, fontFallback: ^IDWriteFontFallback) -> win32.HRESULT,
	CreateFontFallback: proc "system" (this: ^IDWriteFontFallbackBuilder, fontFallback: ^^IDWriteFontFallback) -> win32.HRESULT,
}

IDWriteFontFamily_UUID := &win32.IID{0xda20d8ef, 0x812a, 0x4c43, {0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xdd}}
IDWriteFontFamily :: struct #raw_union {
	#subtype parent: IDWriteFontList,
	using vtable: ^IDWriteFontFamily_VTable,
}
IDWriteFontFamily_VTable :: struct {
	using idwritefontlist_vtable: IDWriteFontList_VTable,
	GetFamilyNames: proc "system" (this: ^IDWriteFontFamily, names: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
	GetFirstMatchingFont: proc "system" (this: ^IDWriteFontFamily, weight: DWRITE_FONT_WEIGHT, stretch: DWRITE_FONT_STRETCH, style: DWRITE_FONT_STYLE, matchingFont: ^^IDWriteFont) -> win32.HRESULT,
	GetMatchingFonts: proc "system" (this: ^IDWriteFontFamily, weight: DWRITE_FONT_WEIGHT, stretch: DWRITE_FONT_STRETCH, style: DWRITE_FONT_STYLE, matchingFonts: ^^IDWriteFontList) -> win32.HRESULT,
}

IDWriteFontFamily1_UUID := &win32.IID{0xda20d8ef, 0x812a, 0x4c43, {0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xdf}}
IDWriteFontFamily1 :: struct #raw_union {
	#subtype parent: IDWriteFontFamily,
	using vtable: ^IDWriteFontFamily1_VTable,
}
IDWriteFontFamily1_VTable :: struct {
	using idwritefontfamily_vtable: IDWriteFontFamily_VTable,
	GetFontLocality: proc "system" (this: ^IDWriteFontFamily1, listIndex: u32) -> DWRITE_LOCALITY,
	GetFont1: proc "system" (this: ^IDWriteFontFamily1, listIndex: u32, font: ^^IDWriteFont3) -> win32.HRESULT,
	GetFontFaceReference: proc "system" (this: ^IDWriteFontFamily1, listIndex: u32, fontFaceReference: ^^IDWriteFontFaceReference) -> win32.HRESULT,
}

IDWriteFontFamily2_UUID := &win32.IID{0x3ed49e77, 0xa398, 0x4261, {0xb9, 0xcf, 0xc1, 0x26, 0xc2, 0x13, 0x1e, 0xf3}}
IDWriteFontFamily2 :: struct #raw_union {
	#subtype parent: IDWriteFontFamily1,
	using vtable: ^IDWriteFontFamily2_VTable,
}
IDWriteFontFamily2_VTable :: struct {
	using idwritefontfamily1_vtable: IDWriteFontFamily1_VTable,
	GetMatchingFonts1: proc "system" (this: ^IDWriteFontFamily2, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, matchingFonts: ^^IDWriteFontList2) -> win32.HRESULT,
	GetFontSet: proc "system" (this: ^IDWriteFontFamily2, fontSet: ^^IDWriteFontSet1) -> win32.HRESULT,
}

IDWriteFontFile_UUID := &win32.IID{0x739d886a, 0xcef5, 0x47dc, {0x87, 0x69, 0x1a, 0x8b, 0x41, 0xbe, 0xbb, 0xb0}}
IDWriteFontFile :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontFile_VTable,
}
IDWriteFontFile_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetReferenceKey: proc "system" (this: ^IDWriteFontFile, fontFileReferenceKey: ^rawptr, fontFileReferenceKeySize: ^u32) -> win32.HRESULT,
	GetLoader: proc "system" (this: ^IDWriteFontFile, fontFileLoader: ^^IDWriteFontFileLoader) -> win32.HRESULT,
	Analyze: proc "system" (this: ^IDWriteFontFile, isSupportedFontType: ^win32.BOOL, fontFileType: ^DWRITE_FONT_FILE_TYPE, fontFaceType: ^DWRITE_FONT_FACE_TYPE, numberOfFaces: ^u32) -> win32.HRESULT,
}

IDWriteFontFileEnumerator_UUID := &win32.IID{0x72755049, 0x5ff7, 0x435d, {0x83, 0x48, 0x4b, 0xe9, 0x7c, 0xfa, 0x6c, 0x7c}}
IDWriteFontFileEnumerator :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontFileEnumerator_VTable,
}
IDWriteFontFileEnumerator_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	MoveNext: proc "system" (this: ^IDWriteFontFileEnumerator, hasCurrentFile: ^win32.BOOL) -> win32.HRESULT,
	GetCurrentFontFile: proc "system" (this: ^IDWriteFontFileEnumerator, fontFile: ^^IDWriteFontFile) -> win32.HRESULT,
}

IDWriteFontFileLoader_UUID := &win32.IID{0x727cad4e, 0xd6af, 0x4c9e, {0x8a, 0x08, 0xd6, 0x95, 0xb1, 0x1c, 0xaa, 0x49}}
IDWriteFontFileLoader :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontFileLoader_VTable,
}
IDWriteFontFileLoader_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	CreateStreamFromKey: proc "system" (this: ^IDWriteFontFileLoader, fontFileReferenceKey: rawptr, fontFileReferenceKeySize: u32, fontFileStream: ^^IDWriteFontFileStream) -> win32.HRESULT,
}

IDWriteFontFileStream_UUID := &win32.IID{0x6d4865fe, 0x0ab8, 0x4d91, {0x8f, 0x62, 0x5d, 0xd6, 0xbe, 0x34, 0xa3, 0xe0}}
IDWriteFontFileStream :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontFileStream_VTable,
}
IDWriteFontFileStream_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	ReadFileFragment: proc "system" (this: ^IDWriteFontFileStream, fragmentStart: ^rawptr, fileOffset: u64, fragmentSize: u64, fragmentContext: ^rawptr) -> win32.HRESULT,
	ReleaseFileFragment: proc "system" (this: ^IDWriteFontFileStream, fragmentContext: rawptr),
	GetFileSize: proc "system" (this: ^IDWriteFontFileStream, fileSize: ^u64) -> win32.HRESULT,
	GetLastWriteTime: proc "system" (this: ^IDWriteFontFileStream, lastWriteTime: ^u64) -> win32.HRESULT,
}

IDWriteFontList_UUID := &win32.IID{0x1a0d8438, 0x1d97, 0x4ec1, {0xae, 0xf9, 0xa2, 0xfb, 0x86, 0xed, 0x6a, 0xcb}}
IDWriteFontList :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontList_VTable,
}
IDWriteFontList_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetFontCollection: proc "system" (this: ^IDWriteFontList, fontCollection: ^^IDWriteFontCollection) -> win32.HRESULT,
	GetFontCount: proc "system" (this: ^IDWriteFontList) -> u32,
	GetFont: proc "system" (this: ^IDWriteFontList, index: u32, font: ^^IDWriteFont) -> win32.HRESULT,
}

IDWriteFontList1_UUID := &win32.IID{0xda20d8ef, 0x812a, 0x4c43, {0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xde}}
IDWriteFontList1 :: struct #raw_union {
	#subtype parent: IDWriteFontList,
	using vtable: ^IDWriteFontList1_VTable,
}
IDWriteFontList1_VTable :: struct {
	using idwritefontlist_vtable: IDWriteFontList_VTable,
	GetFontLocality: proc "system" (this: ^IDWriteFontList1, listIndex: u32) -> DWRITE_LOCALITY,
	GetFont1: proc "system" (this: ^IDWriteFontList1, listIndex: u32, font: ^^IDWriteFont3) -> win32.HRESULT,
	GetFontFaceReference: proc "system" (this: ^IDWriteFontList1, listIndex: u32, fontFaceReference: ^^IDWriteFontFaceReference) -> win32.HRESULT,
}

IDWriteFontList2_UUID := &win32.IID{0xc0763a34, 0x77af, 0x445a, {0xb7, 0x35, 0x08, 0xc3, 0x7b, 0x0a, 0x5b, 0xf5}}
IDWriteFontList2 :: struct #raw_union {
	#subtype parent: IDWriteFontList1,
	using vtable: ^IDWriteFontList2_VTable,
}
IDWriteFontList2_VTable :: struct {
	using idwritefontlist1_vtable: IDWriteFontList1_VTable,
	GetFontSet: proc "system" (this: ^IDWriteFontList2, fontSet: ^^IDWriteFontSet1) -> win32.HRESULT,
}

IDWriteFontResource_UUID := &win32.IID{0x1f803a76, 0x6871, 0x48e8, {0x98, 0x7f, 0xb9, 0x75, 0x55, 0x1c, 0x50, 0xf2}}
IDWriteFontResource :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontResource_VTable,
}
IDWriteFontResource_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetFontFile: proc "system" (this: ^IDWriteFontResource, fontFile: ^^IDWriteFontFile) -> win32.HRESULT,
	GetFontFaceIndex: proc "system" (this: ^IDWriteFontResource) -> u32,
	GetFontAxisCount: proc "system" (this: ^IDWriteFontResource) -> u32,
	GetDefaultFontAxisValues: proc "system" (this: ^IDWriteFontResource, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) -> win32.HRESULT,
	GetFontAxisRanges: proc "system" (this: ^IDWriteFontResource, fontAxisRanges: ^DWRITE_FONT_AXIS_RANGE, fontAxisRangeCount: u32) -> win32.HRESULT,
	GetFontAxisAttributes: proc "system" (this: ^IDWriteFontResource, axisIndex: u32) -> DWRITE_FONT_AXIS_ATTRIBUTES,
	GetAxisNames: proc "system" (this: ^IDWriteFontResource, axisIndex: u32, names: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
	GetAxisValueNameCount: proc "system" (this: ^IDWriteFontResource, axisIndex: u32) -> u32,
	GetAxisValueNames: proc "system" (this: ^IDWriteFontResource, axisIndex: u32, axisValueIndex: u32, fontAxisRange: ^DWRITE_FONT_AXIS_RANGE, names: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
	HasVariations: proc "system" (this: ^IDWriteFontResource) -> win32.BOOL,
	CreateFontFace: proc "system" (this: ^IDWriteFontResource, fontSimulations: DWRITE_FONT_SIMULATIONS, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontFace: ^^IDWriteFontFace5) -> win32.HRESULT,
	CreateFontFaceReference: proc "system" (this: ^IDWriteFontResource, fontSimulations: DWRITE_FONT_SIMULATIONS, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontFaceReference: ^^IDWriteFontFaceReference1) -> win32.HRESULT,
}

IDWriteFontSet_UUID := &win32.IID{0x53585141, 0xd9f8, 0x4095, {0x83, 0x21, 0xd7, 0x3c, 0xf6, 0xbd, 0x11, 0x6b}}
IDWriteFontSet :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontSet_VTable,
}
IDWriteFontSet_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetFontCount: proc "system" (this: ^IDWriteFontSet) -> u32,
	GetFontFaceReference: proc "system" (this: ^IDWriteFontSet, listIndex: u32, fontFaceReference: ^^IDWriteFontFaceReference) -> win32.HRESULT,
	FindFontFaceReference: proc "system" (this: ^IDWriteFontSet, fontFaceReference: ^IDWriteFontFaceReference, listIndex: ^u32, exists: ^win32.BOOL) -> win32.HRESULT,
	FindFontFace: proc "system" (this: ^IDWriteFontSet, fontFace: ^IDWriteFontFace, listIndex: ^u32, exists: ^win32.BOOL) -> win32.HRESULT,
	GetPropertyValues: proc "system" (this: ^IDWriteFontSet, propertyID: DWRITE_FONT_PROPERTY_ID, values: ^^IDWriteStringList) -> win32.HRESULT,
	GetPropertyValues1: proc "system" (this: ^IDWriteFontSet, propertyID: DWRITE_FONT_PROPERTY_ID, preferredLocaleNames: ^win32.WCHAR, values: ^^IDWriteStringList) -> win32.HRESULT,
	GetPropertyValues2: proc "system" (this: ^IDWriteFontSet, listIndex: u32, propertyId: DWRITE_FONT_PROPERTY_ID, exists: ^win32.BOOL, values: ^^IDWriteLocalizedStrings) -> win32.HRESULT,
	GetPropertyOccurrenceCount: proc "system" (this: ^IDWriteFontSet, property: ^DWRITE_FONT_PROPERTY, propertyOccurrenceCount: ^u32) -> win32.HRESULT,
	GetMatchingFonts: proc "system" (this: ^IDWriteFontSet, familyName: ^win32.WCHAR, fontWeight: DWRITE_FONT_WEIGHT, fontStretch: DWRITE_FONT_STRETCH, fontStyle: DWRITE_FONT_STYLE, filteredSet: ^^IDWriteFontSet) -> win32.HRESULT,
	GetMatchingFonts1: proc "system" (this: ^IDWriteFontSet, properties: ^DWRITE_FONT_PROPERTY, propertyCount: u32, filteredSet: ^^IDWriteFontSet) -> win32.HRESULT,
}

IDWriteFontSet1_UUID := &win32.IID{0x7e9fda85, 0x6c92, 0x4053, {0xbc, 0x47, 0x7a, 0xe3, 0x53, 0x0d, 0xb4, 0xd3}}
IDWriteFontSet1 :: struct #raw_union {
	#subtype parent: IDWriteFontSet,
	using vtable: ^IDWriteFontSet1_VTable,
}
IDWriteFontSet1_VTable :: struct {
	using idwritefontset_vtable: IDWriteFontSet_VTable,
	GetMatchingFonts2: proc "system" (this: ^IDWriteFontSet1, fontProperty: ^DWRITE_FONT_PROPERTY, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, matchingFonts: ^^IDWriteFontSet1) -> win32.HRESULT,
	GetFirstFontResources: proc "system" (this: ^IDWriteFontSet1, filteredFontSet: ^^IDWriteFontSet1) -> win32.HRESULT,
	GetFilteredFonts: proc "system" (this: ^IDWriteFontSet1, indices: ^u32, indexCount: u32, filteredFontSet: ^^IDWriteFontSet1) -> win32.HRESULT,
	GetFilteredFonts1: proc "system" (this: ^IDWriteFontSet1, fontAxisRanges: ^DWRITE_FONT_AXIS_RANGE, fontAxisRangeCount: u32, selectAnyRange: win32.BOOL, filteredFontSet: ^^IDWriteFontSet1) -> win32.HRESULT,
	GetFilteredFonts2: proc "system" (this: ^IDWriteFontSet1, properties: ^DWRITE_FONT_PROPERTY, propertyCount: u32, selectAnyProperty: win32.BOOL, filteredFontSet: ^^IDWriteFontSet1) -> win32.HRESULT,
	GetFilteredFontIndices: proc "system" (this: ^IDWriteFontSet1, fontAxisRanges: ^DWRITE_FONT_AXIS_RANGE, fontAxisRangeCount: u32, selectAnyRange: win32.BOOL, indices: ^u32, maxIndexCount: u32, actualIndexCount: ^u32) -> win32.HRESULT,
	GetFilteredFontIndices1: proc "system" (this: ^IDWriteFontSet1, properties: ^DWRITE_FONT_PROPERTY, propertyCount: u32, selectAnyProperty: win32.BOOL, indices: ^u32, maxIndexCount: u32, actualIndexCount: ^u32) -> win32.HRESULT,
	GetFontAxisRanges: proc "system" (this: ^IDWriteFontSet1, listIndex: u32, fontAxisRanges: ^DWRITE_FONT_AXIS_RANGE, maxFontAxisRangeCount: u32, actualFontAxisRangeCount: ^u32) -> win32.HRESULT,
	GetFontAxisRanges1: proc "system" (this: ^IDWriteFontSet1, fontAxisRanges: ^DWRITE_FONT_AXIS_RANGE, maxFontAxisRangeCount: u32, actualFontAxisRangeCount: ^u32) -> win32.HRESULT,
	GetFontFaceReference1: proc "system" (this: ^IDWriteFontSet1, listIndex: u32, fontFaceReference: ^^IDWriteFontFaceReference1) -> win32.HRESULT,
	CreateFontResource: proc "system" (this: ^IDWriteFontSet1, listIndex: u32, fontResource: ^^IDWriteFontResource) -> win32.HRESULT,
	CreateFontFace: proc "system" (this: ^IDWriteFontSet1, listIndex: u32, fontFace: ^^IDWriteFontFace5) -> win32.HRESULT,
	GetFontLocality: proc "system" (this: ^IDWriteFontSet1, listIndex: u32) -> DWRITE_LOCALITY,
}

IDWriteFontSet2_UUID := &win32.IID{0xdc7ead19, 0xe54c, 0x43af, {0xb2, 0xda, 0x4e, 0x2b, 0x79, 0xba, 0x3f, 0x7f}}
IDWriteFontSet2 :: struct #raw_union {
	#subtype parent: IDWriteFontSet1,
	using vtable: ^IDWriteFontSet2_VTable,
}
IDWriteFontSet2_VTable :: struct {
	using idwritefontset1_vtable: IDWriteFontSet1_VTable,
	GetExpirationEvent: proc "system" (this: ^IDWriteFontSet2) -> win32.HANDLE,
}

IDWriteFontSet3_UUID := &win32.IID{0x7c073ef2, 0xa7f4, 0x4045, {0x8c, 0x32, 0x8a, 0xb8, 0xae, 0x64, 0x0f, 0x90}}
IDWriteFontSet3 :: struct #raw_union {
	#subtype parent: IDWriteFontSet2,
	using vtable: ^IDWriteFontSet3_VTable,
}
IDWriteFontSet3_VTable :: struct {
	using idwritefontset2_vtable: IDWriteFontSet2_VTable,
	GetFontSourceType: proc "system" (this: ^IDWriteFontSet3, fontIndex: u32) -> DWRITE_FONT_SOURCE_TYPE,
	GetFontSourceNameLength: proc "system" (this: ^IDWriteFontSet3, listIndex: u32) -> u32,
	GetFontSourceName: proc "system" (this: ^IDWriteFontSet3, listIndex: u32, stringBuffer: ^win32.WCHAR, stringBufferSize: u32) -> win32.HRESULT,
}

IDWriteFontSet4_UUID := &win32.IID{0xeec175fc, 0xbea9, 0x4c86, {0x8b, 0x53, 0xcc, 0xbd, 0xd7, 0xdf, 0x0c, 0x82}}
IDWriteFontSet4 :: struct #raw_union {
	#subtype parent: IDWriteFontSet3,
	using vtable: ^IDWriteFontSet4_VTable,
}
IDWriteFontSet4_VTable :: struct {
	using idwritefontset3_vtable: IDWriteFontSet3_VTable,
	ConvertWeightStretchStyleToFontAxisValues: proc "system" (this: ^IDWriteFontSet4, inputAxisValues: ^DWRITE_FONT_AXIS_VALUE, inputAxisCount: u32, fontWeight: DWRITE_FONT_WEIGHT, fontStretch: DWRITE_FONT_STRETCH, fontStyle: DWRITE_FONT_STYLE, fontSize: f32, outputAxisValues: ^DWRITE_FONT_AXIS_VALUE) -> u32,
	GetMatchingFonts3: proc "system" (this: ^IDWriteFontSet4, familyName: ^win32.WCHAR, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, allowedSimulations: DWRITE_FONT_SIMULATIONS, matchingFonts: ^^IDWriteFontSet4) -> win32.HRESULT,
}

IDWriteFontSetBuilder_UUID := &win32.IID{0x2f642afe, 0x9c68, 0x4f40, {0xb8, 0xbe, 0x45, 0x74, 0x01, 0xaf, 0xcb, 0x3d}}
IDWriteFontSetBuilder :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteFontSetBuilder_VTable,
}
IDWriteFontSetBuilder_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	AddFontFaceReference: proc "system" (this: ^IDWriteFontSetBuilder, fontFaceReference: ^IDWriteFontFaceReference, properties: ^DWRITE_FONT_PROPERTY, propertyCount: u32) -> win32.HRESULT,
	AddFontFaceReference1: proc "system" (this: ^IDWriteFontSetBuilder, fontFaceReference: ^IDWriteFontFaceReference) -> win32.HRESULT,
	AddFontSet: proc "system" (this: ^IDWriteFontSetBuilder, fontSet: ^IDWriteFontSet) -> win32.HRESULT,
	CreateFontSet: proc "system" (this: ^IDWriteFontSetBuilder, fontSet: ^^IDWriteFontSet) -> win32.HRESULT,
}

IDWriteFontSetBuilder1_UUID := &win32.IID{0x3ff7715f, 0x3cdc, 0x4dc6, {0x9b, 0x72, 0xec, 0x56, 0x21, 0xdc, 0xca, 0xfd}}
IDWriteFontSetBuilder1 :: struct #raw_union {
	#subtype parent: IDWriteFontSetBuilder,
	using vtable: ^IDWriteFontSetBuilder1_VTable,
}
IDWriteFontSetBuilder1_VTable :: struct {
	using idwritefontsetbuilder_vtable: IDWriteFontSetBuilder_VTable,
	AddFontFile: proc "system" (this: ^IDWriteFontSetBuilder1, fontFile: ^IDWriteFontFile) -> win32.HRESULT,
}

IDWriteFontSetBuilder2_UUID := &win32.IID{0xee5ba612, 0xb131, 0x463c, {0x8f, 0x4f, 0x31, 0x89, 0xb9, 0x40, 0x1e, 0x45}}
IDWriteFontSetBuilder2 :: struct #raw_union {
	#subtype parent: IDWriteFontSetBuilder1,
	using vtable: ^IDWriteFontSetBuilder2_VTable,
}
IDWriteFontSetBuilder2_VTable :: struct {
	using idwritefontsetbuilder1_vtable: IDWriteFontSetBuilder1_VTable,
	AddFont: proc "system" (this: ^IDWriteFontSetBuilder2, fontFile: ^IDWriteFontFile, fontFaceIndex: u32, fontSimulations: DWRITE_FONT_SIMULATIONS, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, fontAxisRanges: ^DWRITE_FONT_AXIS_RANGE, fontAxisRangeCount: u32, properties: ^DWRITE_FONT_PROPERTY, propertyCount: u32) -> win32.HRESULT,
	AddFontFile1: proc "system" (this: ^IDWriteFontSetBuilder2, filePath: ^win32.WCHAR) -> win32.HRESULT,
}

IDWriteGdiInterop_UUID := &win32.IID{0x1edd9491, 0x9853, 0x4299, {0x89, 0x8f, 0x64, 0x32, 0x98, 0x3b, 0x6f, 0x3a}}
IDWriteGdiInterop :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteGdiInterop_VTable,
}
IDWriteGdiInterop_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	CreateFontFromLOGFONT: proc "system" (this: ^IDWriteGdiInterop, logFont: ^win32.LOGFONTW, font: ^^IDWriteFont) -> win32.HRESULT,
	ConvertFontToLOGFONT: proc "system" (this: ^IDWriteGdiInterop, font: ^IDWriteFont, logFont: ^win32.LOGFONTW, isSystemFont: ^win32.BOOL) -> win32.HRESULT,
	ConvertFontFaceToLOGFONT: proc "system" (this: ^IDWriteGdiInterop, font: ^IDWriteFontFace, logFont: ^win32.LOGFONTW) -> win32.HRESULT,
	CreateFontFaceFromHdc: proc "system" (this: ^IDWriteGdiInterop, hdc: win32.HDC, fontFace: ^^IDWriteFontFace) -> win32.HRESULT,
	CreateBitmapRenderTarget: proc "system" (this: ^IDWriteGdiInterop, hdc: win32.HDC, width: u32, height: u32, renderTarget: ^^IDWriteBitmapRenderTarget) -> win32.HRESULT,
}

IDWriteGdiInterop1_UUID := &win32.IID{0x4556be70, 0x3abd, 0x4f70, {0x90, 0xbe, 0x42, 0x17, 0x80, 0xa6, 0xf5, 0x15}}
IDWriteGdiInterop1 :: struct #raw_union {
	#subtype parent: IDWriteGdiInterop,
	using vtable: ^IDWriteGdiInterop1_VTable,
}
IDWriteGdiInterop1_VTable :: struct {
	using idwritegdiinterop_vtable: IDWriteGdiInterop_VTable,
	CreateFontFromLOGFONT1: proc "system" (this: ^IDWriteGdiInterop1, logFont: ^win32.LOGFONTW, fontCollection: ^IDWriteFontCollection, font: ^^IDWriteFont) -> win32.HRESULT,
	GetFontSignature: proc "system" (this: ^IDWriteGdiInterop1, fontFace: ^IDWriteFontFace, fontSignature: ^FONTSIGNATURE) -> win32.HRESULT,
	GetFontSignature1: proc "system" (this: ^IDWriteGdiInterop1, font: ^IDWriteFont, fontSignature: ^FONTSIGNATURE) -> win32.HRESULT,
	GetMatchingFontsByLOGFONT: proc "system" (this: ^IDWriteGdiInterop1, logFont: ^LOGFONTA, fontSet: ^IDWriteFontSet, filteredSet: ^^IDWriteFontSet) -> win32.HRESULT,
}

IDWriteGlyphRunAnalysis_UUID := &win32.IID{0x7d97dbf7, 0xe085, 0x42d4, {0x81, 0xe3, 0x6a, 0x88, 0x3b, 0xde, 0xd1, 0x18}}
IDWriteGlyphRunAnalysis :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteGlyphRunAnalysis_VTable,
}
IDWriteGlyphRunAnalysis_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetAlphaTextureBounds: proc "system" (this: ^IDWriteGlyphRunAnalysis, textureType: DWRITE_TEXTURE_TYPE, textureBounds: ^win32.RECT) -> win32.HRESULT,
	CreateAlphaTexture: proc "system" (this: ^IDWriteGlyphRunAnalysis, textureType: DWRITE_TEXTURE_TYPE, textureBounds: ^win32.RECT, alphaValues: ^u8, bufferSize: u32) -> win32.HRESULT,
	GetAlphaBlendParams: proc "system" (this: ^IDWriteGlyphRunAnalysis, renderingParams: ^IDWriteRenderingParams, blendGamma: ^f32, blendEnhancedContrast: ^f32, blendClearTypeLevel: ^f32) -> win32.HRESULT,
}

IDWriteInlineObject_UUID := &win32.IID{0x8339fde3, 0x106f, 0x47ab, {0x83, 0x73, 0x1c, 0x62, 0x95, 0xeb, 0x10, 0xb3}}
IDWriteInlineObject :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteInlineObject_VTable,
}
IDWriteInlineObject_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	Draw: proc "system" (this: ^IDWriteInlineObject, clientDrawingContext: rawptr, renderer: ^IDWriteTextRenderer, originX: f32, originY: f32, isSideways: win32.BOOL, isRightToLeft: win32.BOOL, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
	GetMetrics: proc "system" (this: ^IDWriteInlineObject, metrics: ^DWRITE_INLINE_OBJECT_METRICS) -> win32.HRESULT,
	GetOverhangMetrics: proc "system" (this: ^IDWriteInlineObject, overhangs: ^DWRITE_OVERHANG_METRICS) -> win32.HRESULT,
	GetBreakConditions: proc "system" (this: ^IDWriteInlineObject, breakConditionBefore: ^DWRITE_BREAK_CONDITION, breakConditionAfter: ^DWRITE_BREAK_CONDITION) -> win32.HRESULT,
}

IDWriteInMemoryFontFileLoader_UUID := &win32.IID{0xdc102f47, 0xa12d, 0x4b1c, {0x82, 0x2d, 0x9e, 0x11, 0x7e, 0x33, 0x04, 0x3f}}
IDWriteInMemoryFontFileLoader :: struct #raw_union {
	#subtype parent: IDWriteFontFileLoader,
	using vtable: ^IDWriteInMemoryFontFileLoader_VTable,
}
IDWriteInMemoryFontFileLoader_VTable :: struct {
	using idwritefontfileloader_vtable: IDWriteFontFileLoader_VTable,
	CreateInMemoryFontFileReference: proc "system" (this: ^IDWriteInMemoryFontFileLoader, factory: ^IDWriteFactory, fontData: rawptr, fontDataSize: u32, ownerObject: ^win32.IUnknown, fontFile: ^^IDWriteFontFile) -> win32.HRESULT,
	GetFileCount: proc "system" (this: ^IDWriteInMemoryFontFileLoader) -> u32,
}

IDWriteLocalFontFileLoader_UUID := &win32.IID{0xb2d9f3ec, 0xc9fe, 0x4a11, {0xa2, 0xec, 0xd8, 0x62, 0x08, 0xf7, 0xc0, 0xa2}}
IDWriteLocalFontFileLoader :: struct #raw_union {
	#subtype parent: IDWriteFontFileLoader,
	using vtable: ^IDWriteLocalFontFileLoader_VTable,
}
IDWriteLocalFontFileLoader_VTable :: struct {
	using idwritefontfileloader_vtable: IDWriteFontFileLoader_VTable,
	GetFilePathLengthFromKey: proc "system" (this: ^IDWriteLocalFontFileLoader, fontFileReferenceKey: rawptr, fontFileReferenceKeySize: u32, filePathLength: ^u32) -> win32.HRESULT,
	GetFilePathFromKey: proc "system" (this: ^IDWriteLocalFontFileLoader, fontFileReferenceKey: rawptr, fontFileReferenceKeySize: u32, filePath: ^win32.WCHAR, filePathSize: u32) -> win32.HRESULT,
	GetLastWriteTimeFromKey: proc "system" (this: ^IDWriteLocalFontFileLoader, fontFileReferenceKey: rawptr, fontFileReferenceKeySize: u32, lastWriteTime: ^win32.FILETIME) -> win32.HRESULT,
}

IDWriteLocalizedStrings_UUID := &win32.IID{0x08256209, 0x099a, 0x4b34, {0xb8, 0x6d, 0xc2, 0x2b, 0x11, 0x0e, 0x77, 0x71}}
IDWriteLocalizedStrings :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteLocalizedStrings_VTable,
}
IDWriteLocalizedStrings_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetCount: proc "system" (this: ^IDWriteLocalizedStrings) -> u32,
	FindLocaleName: proc "system" (this: ^IDWriteLocalizedStrings, localeName: ^win32.WCHAR, index: ^u32, exists: ^win32.BOOL) -> win32.HRESULT,
	GetLocaleNameLength: proc "system" (this: ^IDWriteLocalizedStrings, index: u32, length: ^u32) -> win32.HRESULT,
	GetLocaleName: proc "system" (this: ^IDWriteLocalizedStrings, index: u32, localeName: ^win32.WCHAR, size: u32) -> win32.HRESULT,
	GetStringLength: proc "system" (this: ^IDWriteLocalizedStrings, index: u32, length: ^u32) -> win32.HRESULT,
	GetString: proc "system" (this: ^IDWriteLocalizedStrings, index: u32, stringBuffer: ^win32.WCHAR, size: u32) -> win32.HRESULT,
}

IDWriteNumberSubstitution_UUID := &win32.IID{0x14885cc9, 0xbab0, 0x4f90, {0xb6, 0xed, 0x5c, 0x36, 0x6a, 0x2c, 0xd0, 0x3d}}
IDWriteNumberSubstitution :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteNumberSubstitution_VTable,
}
IDWriteNumberSubstitution_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
}

IDWritePixelSnapping_UUID := &win32.IID{0xeaf3a2da, 0xecf4, 0x4d24, {0xb6, 0x44, 0xb3, 0x4f, 0x68, 0x42, 0x02, 0x4b}}
IDWritePixelSnapping :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWritePixelSnapping_VTable,
}
IDWritePixelSnapping_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	IsPixelSnappingDisabled: proc "system" (this: ^IDWritePixelSnapping, clientDrawingContext: rawptr, isDisabled: ^win32.BOOL) -> win32.HRESULT,
	GetCurrentTransform: proc "system" (this: ^IDWritePixelSnapping, clientDrawingContext: rawptr, transform: ^DWRITE_MATRIX) -> win32.HRESULT,
	GetPixelsPerDip: proc "system" (this: ^IDWritePixelSnapping, clientDrawingContext: rawptr, pixelsPerDip: ^f32) -> win32.HRESULT,
}

IDWriteRemoteFontFileLoader_UUID := &win32.IID{0x68648c83, 0x6ede, 0x46c0, {0xab, 0x46, 0x20, 0x08, 0x3a, 0x88, 0x7f, 0xde}}
IDWriteRemoteFontFileLoader :: struct #raw_union {
	#subtype parent: IDWriteFontFileLoader,
	using vtable: ^IDWriteRemoteFontFileLoader_VTable,
}
IDWriteRemoteFontFileLoader_VTable :: struct {
	using idwritefontfileloader_vtable: IDWriteFontFileLoader_VTable,
	CreateRemoteStreamFromKey: proc "system" (this: ^IDWriteRemoteFontFileLoader, fontFileReferenceKey: rawptr, fontFileReferenceKeySize: u32, fontFileStream: ^^IDWriteRemoteFontFileStream) -> win32.HRESULT,
	GetLocalityFromKey: proc "system" (this: ^IDWriteRemoteFontFileLoader, fontFileReferenceKey: rawptr, fontFileReferenceKeySize: u32, locality: ^DWRITE_LOCALITY) -> win32.HRESULT,
	CreateFontFileReferenceFromUrl: proc "system" (this: ^IDWriteRemoteFontFileLoader, factory: ^IDWriteFactory, baseUrl: ^win32.WCHAR, fontFileUrl: ^win32.WCHAR, fontFile: ^^IDWriteFontFile) -> win32.HRESULT,
}

IDWriteRemoteFontFileStream_UUID := &win32.IID{0x4db3757a, 0x2c72, 0x4ed9, {0xb2, 0xb6, 0x1a, 0xba, 0xbe, 0x1a, 0xff, 0x9c}}
IDWriteRemoteFontFileStream :: struct #raw_union {
	#subtype parent: IDWriteFontFileStream,
	using vtable: ^IDWriteRemoteFontFileStream_VTable,
}
IDWriteRemoteFontFileStream_VTable :: struct {
	using idwritefontfilestream_vtable: IDWriteFontFileStream_VTable,
	GetLocalFileSize: proc "system" (this: ^IDWriteRemoteFontFileStream, localFileSize: ^u64) -> win32.HRESULT,
	GetFileFragmentLocality: proc "system" (this: ^IDWriteRemoteFontFileStream, fileOffset: u64, fragmentSize: u64, isLocal: ^win32.BOOL, partialSize: ^u64) -> win32.HRESULT,
	GetLocality: proc "system" (this: ^IDWriteRemoteFontFileStream) -> DWRITE_LOCALITY,
	BeginDownload: proc "system" (this: ^IDWriteRemoteFontFileStream, downloadOperationID: ^win32.GUID, fileFragments: ^DWRITE_FILE_FRAGMENT, fragmentCount: u32, asyncResult: ^^IDWriteAsyncResult) -> win32.HRESULT,
}

IDWriteRenderingParams_UUID := &win32.IID{0x2f0da53a, 0x2add, 0x47cd, {0x82, 0xee, 0xd9, 0xec, 0x34, 0x68, 0x8e, 0x75}}
IDWriteRenderingParams :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteRenderingParams_VTable,
}
IDWriteRenderingParams_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetGamma: proc "system" (this: ^IDWriteRenderingParams) -> f32,
	GetEnhancedContrast: proc "system" (this: ^IDWriteRenderingParams) -> f32,
	GetClearTypeLevel: proc "system" (this: ^IDWriteRenderingParams) -> f32,
	GetPixelGeometry: proc "system" (this: ^IDWriteRenderingParams) -> DWRITE_PIXEL_GEOMETRY,
	GetRenderingMode: proc "system" (this: ^IDWriteRenderingParams) -> DWRITE_RENDERING_MODE,
}

IDWriteRenderingParams1_UUID := &win32.IID{0x94413cf4, 0xa6fc, 0x4248, {0x8b, 0x50, 0x66, 0x74, 0x34, 0x8f, 0xca, 0xd3}}
IDWriteRenderingParams1 :: struct #raw_union {
	#subtype parent: IDWriteRenderingParams,
	using vtable: ^IDWriteRenderingParams1_VTable,
}
IDWriteRenderingParams1_VTable :: struct {
	using idwriterenderingparams_vtable: IDWriteRenderingParams_VTable,
	GetGrayscaleEnhancedContrast: proc "system" (this: ^IDWriteRenderingParams1) -> f32,
}

IDWriteRenderingParams2_UUID := &win32.IID{0xf9d711c3, 0x9777, 0x40ae, {0x87, 0xe8, 0x3e, 0x5a, 0xf9, 0xbf, 0x09, 0x48}}
IDWriteRenderingParams2 :: struct #raw_union {
	#subtype parent: IDWriteRenderingParams1,
	using vtable: ^IDWriteRenderingParams2_VTable,
}
IDWriteRenderingParams2_VTable :: struct {
	using idwriterenderingparams1_vtable: IDWriteRenderingParams1_VTable,
	GetGridFitMode: proc "system" (this: ^IDWriteRenderingParams2) -> DWRITE_GRID_FIT_MODE,
}

IDWriteRenderingParams3_UUID := &win32.IID{0xb7924baa, 0x391b, 0x412a, {0x8c, 0x5c, 0xe4, 0x4c, 0xc2, 0xd8, 0x67, 0xdc}}
IDWriteRenderingParams3 :: struct #raw_union {
	#subtype parent: IDWriteRenderingParams2,
	using vtable: ^IDWriteRenderingParams3_VTable,
}
IDWriteRenderingParams3_VTable :: struct {
	using idwriterenderingparams2_vtable: IDWriteRenderingParams2_VTable,
	GetRenderingMode1: proc "system" (this: ^IDWriteRenderingParams3) -> DWRITE_RENDERING_MODE1,
}

IDWriteStringList_UUID := &win32.IID{0xcfee3140, 0x1157, 0x47ca, {0x8b, 0x85, 0x31, 0xbf, 0xcf, 0x3f, 0x2d, 0x0e}}
IDWriteStringList :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteStringList_VTable,
}
IDWriteStringList_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetCount: proc "system" (this: ^IDWriteStringList) -> u32,
	GetLocaleNameLength: proc "system" (this: ^IDWriteStringList, listIndex: u32, length: ^u32) -> win32.HRESULT,
	GetLocaleName: proc "system" (this: ^IDWriteStringList, listIndex: u32, localeName: ^win32.WCHAR, size: u32) -> win32.HRESULT,
	GetStringLength: proc "system" (this: ^IDWriteStringList, listIndex: u32, length: ^u32) -> win32.HRESULT,
	GetString: proc "system" (this: ^IDWriteStringList, listIndex: u32, stringBuffer: ^win32.WCHAR, stringBufferSize: u32) -> win32.HRESULT,
}

IDWriteTextAnalysisSink_UUID := &win32.IID{0x5810cd44, 0x0ca0, 0x4701, {0xb3, 0xfa, 0xbe, 0xc5, 0x18, 0x2a, 0xe4, 0xf6}}
IDWriteTextAnalysisSink :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteTextAnalysisSink_VTable,
}
IDWriteTextAnalysisSink_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	SetScriptAnalysis: proc "system" (this: ^IDWriteTextAnalysisSink, textPosition: u32, textLength: u32, scriptAnalysis: ^DWRITE_SCRIPT_ANALYSIS) -> win32.HRESULT,
	SetLineBreakpoints: proc "system" (this: ^IDWriteTextAnalysisSink, textPosition: u32, textLength: u32, lineBreakpoints: ^DWRITE_LINE_BREAKPOINT) -> win32.HRESULT,
	SetBidiLevel: proc "system" (this: ^IDWriteTextAnalysisSink, textPosition: u32, textLength: u32, explicitLevel: u8, resolvedLevel: u8) -> win32.HRESULT,
	SetNumberSubstitution: proc "system" (this: ^IDWriteTextAnalysisSink, textPosition: u32, textLength: u32, numberSubstitution: ^IDWriteNumberSubstitution) -> win32.HRESULT,
}

IDWriteTextAnalysisSink1_UUID := &win32.IID{0xb0d941a0, 0x85e7, 0x4d8b, {0x9f, 0xd3, 0x5c, 0xed, 0x99, 0x34, 0x48, 0x2a}}
IDWriteTextAnalysisSink1 :: struct #raw_union {
	#subtype parent: IDWriteTextAnalysisSink,
	using vtable: ^IDWriteTextAnalysisSink1_VTable,
}
IDWriteTextAnalysisSink1_VTable :: struct {
	using idwritetextanalysissink_vtable: IDWriteTextAnalysisSink_VTable,
	SetGlyphOrientation: proc "system" (this: ^IDWriteTextAnalysisSink1, textPosition: u32, textLength: u32, glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, adjustedBidiLevel: u8, isSideways: win32.BOOL, isRightToLeft: win32.BOOL) -> win32.HRESULT,
}

IDWriteTextAnalysisSource_UUID := &win32.IID{0x688e1a58, 0x5094, 0x47c8, {0xad, 0xc8, 0xfb, 0xce, 0xa6, 0x0a, 0xe9, 0x2b}}
IDWriteTextAnalysisSource :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteTextAnalysisSource_VTable,
}
IDWriteTextAnalysisSource_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	GetTextAtPosition: proc "system" (this: ^IDWriteTextAnalysisSource, textPosition: u32, textString: ^^u16, textLength: ^u32) -> win32.HRESULT,
	GetTextBeforePosition: proc "system" (this: ^IDWriteTextAnalysisSource, textPosition: u32, textString: ^^u16, textLength: ^u32) -> win32.HRESULT,
	GetParagraphReadingDirection: proc "system" (this: ^IDWriteTextAnalysisSource) -> DWRITE_READING_DIRECTION,
	GetLocaleName: proc "system" (this: ^IDWriteTextAnalysisSource, textPosition: u32, textLength: ^u32, localeName: ^^u16) -> win32.HRESULT,
	GetNumberSubstitution: proc "system" (this: ^IDWriteTextAnalysisSource, textPosition: u32, textLength: ^u32, numberSubstitution: ^^IDWriteNumberSubstitution) -> win32.HRESULT,
}

IDWriteTextAnalysisSource1_UUID := &win32.IID{0x639cfad8, 0x0fb4, 0x4b21, {0xa5, 0x8a, 0x06, 0x79, 0x20, 0x12, 0x00, 0x09}}
IDWriteTextAnalysisSource1 :: struct #raw_union {
	#subtype parent: IDWriteTextAnalysisSource,
	using vtable: ^IDWriteTextAnalysisSource1_VTable,
}
IDWriteTextAnalysisSource1_VTable :: struct {
	using idwritetextanalysissource_vtable: IDWriteTextAnalysisSource_VTable,
	GetVerticalGlyphOrientation: proc "system" (this: ^IDWriteTextAnalysisSource1, textPosition: u32, textLength: ^u32, glyphOrientation: ^DWRITE_VERTICAL_GLYPH_ORIENTATION, bidiLevel: ^u8) -> win32.HRESULT,
}

IDWriteTextAnalyzer_UUID := &win32.IID{0xb7e6163e, 0x7f46, 0x43b4, {0x84, 0xb3, 0xe4, 0xe6, 0x24, 0x9c, 0x36, 0x5d}}
IDWriteTextAnalyzer :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteTextAnalyzer_VTable,
}
IDWriteTextAnalyzer_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	AnalyzeScript: proc "system" (this: ^IDWriteTextAnalyzer, analysisSource: ^IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, analysisSink: ^IDWriteTextAnalysisSink) -> win32.HRESULT,
	AnalyzeBidi: proc "system" (this: ^IDWriteTextAnalyzer, analysisSource: ^IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, analysisSink: ^IDWriteTextAnalysisSink) -> win32.HRESULT,
	AnalyzeNumberSubstitution: proc "system" (this: ^IDWriteTextAnalyzer, analysisSource: ^IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, analysisSink: ^IDWriteTextAnalysisSink) -> win32.HRESULT,
	AnalyzeLineBreakpoints: proc "system" (this: ^IDWriteTextAnalyzer, analysisSource: ^IDWriteTextAnalysisSource, textPosition: u32, textLength: u32, analysisSink: ^IDWriteTextAnalysisSink) -> win32.HRESULT,
	GetGlyphs: proc "system" (this: ^IDWriteTextAnalyzer, textString: ^win32.WCHAR, textLength: u32, fontFace: ^IDWriteFontFace, isSideways: win32.BOOL, isRightToLeft: win32.BOOL, scriptAnalysis: ^DWRITE_SCRIPT_ANALYSIS, localeName: ^win32.WCHAR, numberSubstitution: ^IDWriteNumberSubstitution, features: ^^DWRITE_TYPOGRAPHIC_FEATURES, featureRangeLengths: ^u32, featureRanges: u32, maxGlyphCount: u32, clusterMap: ^u16, textProps: ^DWRITE_SHAPING_TEXT_PROPERTIES, glyphIndices: ^u16, glyphProps: ^DWRITE_SHAPING_GLYPH_PROPERTIES, actualGlyphCount: ^u32) -> win32.HRESULT,
	GetGlyphPlacements: proc "system" (this: ^IDWriteTextAnalyzer, textString: ^win32.WCHAR, clusterMap: ^u16, textProps: ^DWRITE_SHAPING_TEXT_PROPERTIES, textLength: u32, glyphIndices: ^u16, glyphProps: ^DWRITE_SHAPING_GLYPH_PROPERTIES, glyphCount: u32, fontFace: ^IDWriteFontFace, fontEmSize: f32, isSideways: win32.BOOL, isRightToLeft: win32.BOOL, scriptAnalysis: ^DWRITE_SCRIPT_ANALYSIS, localeName: ^win32.WCHAR, features: ^^DWRITE_TYPOGRAPHIC_FEATURES, featureRangeLengths: ^u32, featureRanges: u32, glyphAdvances: ^f32, glyphOffsets: ^DWRITE_GLYPH_OFFSET) -> win32.HRESULT,
	GetGdiCompatibleGlyphPlacements: proc "system" (this: ^IDWriteTextAnalyzer, textString: ^win32.WCHAR, clusterMap: ^u16, textProps: ^DWRITE_SHAPING_TEXT_PROPERTIES, textLength: u32, glyphIndices: ^u16, glyphProps: ^DWRITE_SHAPING_GLYPH_PROPERTIES, glyphCount: u32, fontFace: ^IDWriteFontFace, fontEmSize: f32, pixelsPerDip: f32, transform: ^DWRITE_MATRIX, useGdiNatural: win32.BOOL, isSideways: win32.BOOL, isRightToLeft: win32.BOOL, scriptAnalysis: ^DWRITE_SCRIPT_ANALYSIS, localeName: ^win32.WCHAR, features: ^^DWRITE_TYPOGRAPHIC_FEATURES, featureRangeLengths: ^u32, featureRanges: u32, glyphAdvances: ^f32, glyphOffsets: ^DWRITE_GLYPH_OFFSET) -> win32.HRESULT,
}

IDWriteTextAnalyzer1_UUID := &win32.IID{0x80dad800, 0xe21f, 0x4e83, {0x96, 0xce, 0xbf, 0xcc, 0xe5, 0x00, 0xdb, 0x7c}}
IDWriteTextAnalyzer1 :: struct #raw_union {
	#subtype parent: IDWriteTextAnalyzer,
	using vtable: ^IDWriteTextAnalyzer1_VTable,
}
IDWriteTextAnalyzer1_VTable :: struct {
	using idwritetextanalyzer_vtable: IDWriteTextAnalyzer_VTable,
	ApplyCharacterSpacing: proc "system" (this: ^IDWriteTextAnalyzer1, leadingSpacing: f32, trailingSpacing: f32, minimumAdvanceWidth: f32, textLength: u32, glyphCount: u32, clusterMap: ^u16, glyphAdvances: ^f32, glyphOffsets: ^DWRITE_GLYPH_OFFSET, glyphProperties: ^DWRITE_SHAPING_GLYPH_PROPERTIES, modifiedGlyphAdvances: ^f32, modifiedGlyphOffsets: ^DWRITE_GLYPH_OFFSET) -> win32.HRESULT,
	GetBaseline: proc "system" (this: ^IDWriteTextAnalyzer1, fontFace: ^IDWriteFontFace, baseline: DWRITE_BASELINE, isVertical: win32.BOOL, isSimulationAllowed: win32.BOOL, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, localeName: ^win32.WCHAR, baselineCoordinate: ^i32, exists: ^win32.BOOL) -> win32.HRESULT,
	AnalyzeVerticalGlyphOrientation: proc "system" (this: ^IDWriteTextAnalyzer1, analysisSource: ^IDWriteTextAnalysisSource1, textPosition: u32, textLength: u32, analysisSink: ^IDWriteTextAnalysisSink1) -> win32.HRESULT,
	GetGlyphOrientationTransform: proc "system" (this: ^IDWriteTextAnalyzer1, glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, isSideways: win32.BOOL, transform: ^DWRITE_MATRIX) -> win32.HRESULT,
	GetScriptProperties: proc "system" (this: ^IDWriteTextAnalyzer1, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, scriptProperties: ^DWRITE_SCRIPT_PROPERTIES) -> win32.HRESULT,
	GetTextComplexity: proc "system" (this: ^IDWriteTextAnalyzer1, textString: ^win32.WCHAR, textLength: u32, fontFace: ^IDWriteFontFace, isTextSimple: ^win32.BOOL, textLengthRead: ^u32, glyphIndices: ^u16) -> win32.HRESULT,
	GetJustificationOpportunities: proc "system" (this: ^IDWriteTextAnalyzer1, fontFace: ^IDWriteFontFace, fontEmSize: f32, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, textLength: u32, glyphCount: u32, textString: ^win32.WCHAR, clusterMap: ^u16, glyphProperties: ^DWRITE_SHAPING_GLYPH_PROPERTIES, justificationOpportunities: ^DWRITE_JUSTIFICATION_OPPORTUNITY) -> win32.HRESULT,
	JustifyGlyphAdvances: proc "system" (this: ^IDWriteTextAnalyzer1, lineWidth: f32, glyphCount: u32, justificationOpportunities: ^DWRITE_JUSTIFICATION_OPPORTUNITY, glyphAdvances: ^f32, glyphOffsets: ^DWRITE_GLYPH_OFFSET, justifiedGlyphAdvances: ^f32, justifiedGlyphOffsets: ^DWRITE_GLYPH_OFFSET) -> win32.HRESULT,
	GetJustifiedGlyphs: proc "system" (this: ^IDWriteTextAnalyzer1, fontFace: ^IDWriteFontFace, fontEmSize: f32, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, textLength: u32, glyphCount: u32, maxGlyphCount: u32, clusterMap: ^u16, glyphIndices: ^u16, glyphAdvances: ^f32, justifiedGlyphAdvances: ^f32, justifiedGlyphOffsets: ^DWRITE_GLYPH_OFFSET, glyphProperties: ^DWRITE_SHAPING_GLYPH_PROPERTIES, actualGlyphCount: ^u32, modifiedClusterMap: ^u16, modifiedGlyphIndices: ^u16, modifiedGlyphAdvances: ^f32, modifiedGlyphOffsets: ^DWRITE_GLYPH_OFFSET) -> win32.HRESULT,
}

IDWriteTextAnalyzer2_UUID := &win32.IID{0x553a9ff3, 0x5693, 0x4df7, {0xb5, 0x2b, 0x74, 0x80, 0x6f, 0x7f, 0x2e, 0xb9}}
IDWriteTextAnalyzer2 :: struct #raw_union {
	#subtype parent: IDWriteTextAnalyzer1,
	using vtable: ^IDWriteTextAnalyzer2_VTable,
}
IDWriteTextAnalyzer2_VTable :: struct {
	using idwritetextanalyzer1_vtable: IDWriteTextAnalyzer1_VTable,
	GetGlyphOrientationTransform1: proc "system" (this: ^IDWriteTextAnalyzer2, glyphOrientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, isSideways: win32.BOOL, originX: f32, originY: f32, transform: ^DWRITE_MATRIX) -> win32.HRESULT,
	GetTypographicFeatures: proc "system" (this: ^IDWriteTextAnalyzer2, fontFace: ^IDWriteFontFace, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, localeName: ^win32.WCHAR, maxTagCount: u32, actualTagCount: ^u32, tags: ^DWRITE_FONT_FEATURE_TAG) -> win32.HRESULT,
	CheckTypographicFeature: proc "system" (this: ^IDWriteTextAnalyzer2, fontFace: ^IDWriteFontFace, scriptAnalysis: DWRITE_SCRIPT_ANALYSIS, localeName: ^win32.WCHAR, featureTag: DWRITE_FONT_FEATURE_TAG, glyphCount: u32, glyphIndices: ^u16, featureApplies: ^u8) -> win32.HRESULT,
}

IDWriteTextFormat_UUID := &win32.IID{0x9c906818, 0x31d7, 0x4fd3, {0xa1, 0x51, 0x7c, 0x5e, 0x22, 0x5d, 0xb5, 0x5a}}
IDWriteTextFormat :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteTextFormat_VTable,
}
IDWriteTextFormat_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	SetTextAlignment: proc "system" (this: ^IDWriteTextFormat, textAlignment: DWRITE_TEXT_ALIGNMENT) -> win32.HRESULT,
	SetParagraphAlignment: proc "system" (this: ^IDWriteTextFormat, paragraphAlignment: DWRITE_PARAGRAPH_ALIGNMENT) -> win32.HRESULT,
	SetWordWrapping: proc "system" (this: ^IDWriteTextFormat, wordWrapping: DWRITE_WORD_WRAPPING) -> win32.HRESULT,
	SetReadingDirection: proc "system" (this: ^IDWriteTextFormat, readingDirection: DWRITE_READING_DIRECTION) -> win32.HRESULT,
	SetFlowDirection: proc "system" (this: ^IDWriteTextFormat, flowDirection: DWRITE_FLOW_DIRECTION) -> win32.HRESULT,
	SetIncrementalTabStop: proc "system" (this: ^IDWriteTextFormat, incrementalTabStop: f32) -> win32.HRESULT,
	SetTrimming: proc "system" (this: ^IDWriteTextFormat, trimmingOptions: ^DWRITE_TRIMMING, trimmingSign: ^IDWriteInlineObject) -> win32.HRESULT,
	SetLineSpacing: proc "system" (this: ^IDWriteTextFormat, lineSpacingMethod: DWRITE_LINE_SPACING_METHOD, lineSpacing: f32, baseline: f32) -> win32.HRESULT,
	GetTextAlignment: proc "system" (this: ^IDWriteTextFormat) -> DWRITE_TEXT_ALIGNMENT,
	GetParagraphAlignment: proc "system" (this: ^IDWriteTextFormat) -> DWRITE_PARAGRAPH_ALIGNMENT,
	GetWordWrapping: proc "system" (this: ^IDWriteTextFormat) -> DWRITE_WORD_WRAPPING,
	GetReadingDirection: proc "system" (this: ^IDWriteTextFormat) -> DWRITE_READING_DIRECTION,
	GetFlowDirection: proc "system" (this: ^IDWriteTextFormat) -> DWRITE_FLOW_DIRECTION,
	GetIncrementalTabStop: proc "system" (this: ^IDWriteTextFormat) -> f32,
	GetTrimming: proc "system" (this: ^IDWriteTextFormat, trimmingOptions: ^DWRITE_TRIMMING, trimmingSign: ^^IDWriteInlineObject) -> win32.HRESULT,
	GetLineSpacing: proc "system" (this: ^IDWriteTextFormat, lineSpacingMethod: ^DWRITE_LINE_SPACING_METHOD, lineSpacing: ^f32, baseline: ^f32) -> win32.HRESULT,
	GetFontCollection: proc "system" (this: ^IDWriteTextFormat, fontCollection: ^^IDWriteFontCollection) -> win32.HRESULT,
	GetFontFamilyNameLength: proc "system" (this: ^IDWriteTextFormat) -> u32,
	GetFontFamilyName: proc "system" (this: ^IDWriteTextFormat, fontFamilyName: ^win32.WCHAR, nameSize: u32) -> win32.HRESULT,
	GetFontWeight: proc "system" (this: ^IDWriteTextFormat) -> DWRITE_FONT_WEIGHT,
	GetFontStyle: proc "system" (this: ^IDWriteTextFormat) -> DWRITE_FONT_STYLE,
	GetFontStretch: proc "system" (this: ^IDWriteTextFormat) -> DWRITE_FONT_STRETCH,
	GetFontSize: proc "system" (this: ^IDWriteTextFormat) -> f32,
	GetLocaleNameLength: proc "system" (this: ^IDWriteTextFormat) -> u32,
	GetLocaleName: proc "system" (this: ^IDWriteTextFormat, localeName: ^win32.WCHAR, nameSize: u32) -> win32.HRESULT,
}

IDWriteTextFormat1_UUID := &win32.IID{0x5f174b49, 0x0d8b, 0x4cfb, {0x8b, 0xca, 0xf1, 0xcc, 0xe9, 0xd0, 0x6c, 0x67}}
IDWriteTextFormat1 :: struct #raw_union {
	#subtype parent: IDWriteTextFormat,
	using vtable: ^IDWriteTextFormat1_VTable,
}
IDWriteTextFormat1_VTable :: struct {
	using idwritetextformat_vtable: IDWriteTextFormat_VTable,
	SetVerticalGlyphOrientation: proc "system" (this: ^IDWriteTextFormat1, glyphOrientation: DWRITE_VERTICAL_GLYPH_ORIENTATION) -> win32.HRESULT,
	GetVerticalGlyphOrientation: proc "system" (this: ^IDWriteTextFormat1) -> DWRITE_VERTICAL_GLYPH_ORIENTATION,
	SetLastLineWrapping: proc "system" (this: ^IDWriteTextFormat1, isLastLineWrappingEnabled: win32.BOOL) -> win32.HRESULT,
	GetLastLineWrapping: proc "system" (this: ^IDWriteTextFormat1) -> win32.BOOL,
	SetOpticalAlignment: proc "system" (this: ^IDWriteTextFormat1, opticalAlignment: DWRITE_OPTICAL_ALIGNMENT) -> win32.HRESULT,
	GetOpticalAlignment: proc "system" (this: ^IDWriteTextFormat1) -> DWRITE_OPTICAL_ALIGNMENT,
	SetFontFallback: proc "system" (this: ^IDWriteTextFormat1, fontFallback: ^IDWriteFontFallback) -> win32.HRESULT,
	GetFontFallback: proc "system" (this: ^IDWriteTextFormat1, fontFallback: ^^IDWriteFontFallback) -> win32.HRESULT,
}

IDWriteTextFormat2_UUID := &win32.IID{0xf67e0edd, 0x9e3d, 0x4ecc, {0x8c, 0x32, 0x41, 0x83, 0x25, 0x3d, 0xfe, 0x70}}
IDWriteTextFormat2 :: struct #raw_union {
	#subtype parent: IDWriteTextFormat1,
	using vtable: ^IDWriteTextFormat2_VTable,
}
IDWriteTextFormat2_VTable :: struct {
	using idwritetextformat1_vtable: IDWriteTextFormat1_VTable,
	SetLineSpacing1: proc "system" (this: ^IDWriteTextFormat2, lineSpacingOptions: ^DWRITE_LINE_SPACING) -> win32.HRESULT,
	GetLineSpacing1: proc "system" (this: ^IDWriteTextFormat2, lineSpacingOptions: ^DWRITE_LINE_SPACING) -> win32.HRESULT,
}

IDWriteTextFormat3_UUID := &win32.IID{0x6d3b5641, 0xe550, 0x430d, {0xa8, 0x5b, 0xb7, 0xbf, 0x48, 0xa9, 0x34, 0x27}}
IDWriteTextFormat3 :: struct #raw_union {
	#subtype parent: IDWriteTextFormat2,
	using vtable: ^IDWriteTextFormat3_VTable,
}
IDWriteTextFormat3_VTable :: struct {
	using idwritetextformat2_vtable: IDWriteTextFormat2_VTable,
	SetFontAxisValues: proc "system" (this: ^IDWriteTextFormat3, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) -> win32.HRESULT,
	GetFontAxisValueCount: proc "system" (this: ^IDWriteTextFormat3) -> u32,
	GetFontAxisValues: proc "system" (this: ^IDWriteTextFormat3, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32) -> win32.HRESULT,
	GetAutomaticFontAxes: proc "system" (this: ^IDWriteTextFormat3) -> DWRITE_AUTOMATIC_FONT_AXES,
	SetAutomaticFontAxes: proc "system" (this: ^IDWriteTextFormat3, automaticFontAxes: DWRITE_AUTOMATIC_FONT_AXES) -> win32.HRESULT,
}

IDWriteTextLayout_UUID := &win32.IID{0x53737037, 0x6d14, 0x410b, {0x9b, 0xfe, 0x0b, 0x18, 0x2b, 0xb7, 0x09, 0x61}}
IDWriteTextLayout :: struct #raw_union {
	#subtype parent: IDWriteTextFormat,
	using vtable: ^IDWriteTextLayout_VTable,
}
IDWriteTextLayout_VTable :: struct {
	using idwritetextformat_vtable: IDWriteTextFormat_VTable,
	SetMaxWidth: proc "system" (this: ^IDWriteTextLayout, maxWidth: f32) -> win32.HRESULT,
	SetMaxHeight: proc "system" (this: ^IDWriteTextLayout, maxHeight: f32) -> win32.HRESULT,
	SetFontCollection: proc "system" (this: ^IDWriteTextLayout, fontCollection: ^IDWriteFontCollection, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetFontFamilyName: proc "system" (this: ^IDWriteTextLayout, fontFamilyName: ^win32.WCHAR, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetFontWeight: proc "system" (this: ^IDWriteTextLayout, fontWeight: DWRITE_FONT_WEIGHT, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetFontStyle: proc "system" (this: ^IDWriteTextLayout, fontStyle: DWRITE_FONT_STYLE, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetFontStretch: proc "system" (this: ^IDWriteTextLayout, fontStretch: DWRITE_FONT_STRETCH, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetFontSize: proc "system" (this: ^IDWriteTextLayout, fontSize: f32, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetUnderline: proc "system" (this: ^IDWriteTextLayout, hasUnderline: win32.BOOL, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetStrikethrough: proc "system" (this: ^IDWriteTextLayout, hasStrikethrough: win32.BOOL, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetDrawingEffect: proc "system" (this: ^IDWriteTextLayout, drawingEffect: ^win32.IUnknown, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetInlineObject: proc "system" (this: ^IDWriteTextLayout, inlineObject: ^IDWriteInlineObject, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetTypography: proc "system" (this: ^IDWriteTextLayout, typography: ^IDWriteTypography, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetLocaleName: proc "system" (this: ^IDWriteTextLayout, localeName: ^win32.WCHAR, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetMaxWidth: proc "system" (this: ^IDWriteTextLayout) -> f32,
	GetMaxHeight: proc "system" (this: ^IDWriteTextLayout) -> f32,
	GetFontCollection1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, fontCollection: ^^IDWriteFontCollection, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetFontFamilyNameLength1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, nameLength: ^u32, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetFontFamilyName1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, fontFamilyName: ^win32.WCHAR, nameSize: u32, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetFontWeight1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, fontWeight: ^DWRITE_FONT_WEIGHT, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetFontStyle1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, fontStyle: ^DWRITE_FONT_STYLE, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetFontStretch1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, fontStretch: ^DWRITE_FONT_STRETCH, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetFontSize1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, fontSize: ^f32, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetUnderline: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, hasUnderline: ^win32.BOOL, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetStrikethrough: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, hasStrikethrough: ^win32.BOOL, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetDrawingEffect: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, drawingEffect: ^^win32.IUnknown, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetInlineObject: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, inlineObject: ^^IDWriteInlineObject, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetTypography: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, typography: ^^IDWriteTypography, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetLocaleNameLength1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, nameLength: ^u32, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetLocaleName1: proc "system" (this: ^IDWriteTextLayout, currentPosition: u32, localeName: ^win32.WCHAR, nameSize: u32, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	Draw: proc "system" (this: ^IDWriteTextLayout, clientDrawingContext: rawptr, renderer: ^IDWriteTextRenderer, originX: f32, originY: f32) -> win32.HRESULT,
	GetLineMetrics: proc "system" (this: ^IDWriteTextLayout, lineMetrics: ^DWRITE_LINE_METRICS, maxLineCount: u32, actualLineCount: ^u32) -> win32.HRESULT,
	GetMetrics: proc "system" (this: ^IDWriteTextLayout, textMetrics: ^DWRITE_TEXT_METRICS) -> win32.HRESULT,
	GetOverhangMetrics: proc "system" (this: ^IDWriteTextLayout, overhangs: ^DWRITE_OVERHANG_METRICS) -> win32.HRESULT,
	GetClusterMetrics: proc "system" (this: ^IDWriteTextLayout, clusterMetrics: ^DWRITE_CLUSTER_METRICS, maxClusterCount: u32, actualClusterCount: ^u32) -> win32.HRESULT,
	DetermineMinWidth: proc "system" (this: ^IDWriteTextLayout, minWidth: ^f32) -> win32.HRESULT,
	HitTestPoint: proc "system" (this: ^IDWriteTextLayout, pointX: f32, pointY: f32, isTrailingHit: ^win32.BOOL, isInside: ^win32.BOOL, hitTestMetrics: ^DWRITE_HIT_TEST_METRICS) -> win32.HRESULT,
	HitTestTextPosition: proc "system" (this: ^IDWriteTextLayout, textPosition: u32, isTrailingHit: win32.BOOL, pointX: ^f32, pointY: ^f32, hitTestMetrics: ^DWRITE_HIT_TEST_METRICS) -> win32.HRESULT,
	HitTestTextRange: proc "system" (this: ^IDWriteTextLayout, textPosition: u32, textLength: u32, originX: f32, originY: f32, hitTestMetrics: ^DWRITE_HIT_TEST_METRICS, maxHitTestMetricsCount: u32, actualHitTestMetricsCount: ^u32) -> win32.HRESULT,
}

IDWriteTextLayout1_UUID := &win32.IID{0x9064d822, 0x80a7, 0x465c, {0xa9, 0x86, 0xdf, 0x65, 0xf7, 0x8b, 0x8f, 0xeb}}
IDWriteTextLayout1 :: struct #raw_union {
	#subtype parent: IDWriteTextLayout,
	using vtable: ^IDWriteTextLayout1_VTable,
}
IDWriteTextLayout1_VTable :: struct {
	using idwritetextlayout_vtable: IDWriteTextLayout_VTable,
	SetPairKerning: proc "system" (this: ^IDWriteTextLayout1, isPairKerningEnabled: win32.BOOL, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetPairKerning: proc "system" (this: ^IDWriteTextLayout1, currentPosition: u32, isPairKerningEnabled: ^win32.BOOL, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	SetCharacterSpacing: proc "system" (this: ^IDWriteTextLayout1, leadingSpacing: f32, trailingSpacing: f32, minimumAdvanceWidth: f32, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetCharacterSpacing: proc "system" (this: ^IDWriteTextLayout1, currentPosition: u32, leadingSpacing: ^f32, trailingSpacing: ^f32, minimumAdvanceWidth: ^f32, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
}

IDWriteTextLayout2_UUID := &win32.IID{0x1093c18f, 0x8d5e, 0x43f0, {0xb0, 0x64, 0x09, 0x17, 0x31, 0x1b, 0x52, 0x5e}}
IDWriteTextLayout2 :: struct #raw_union {
	#subtype parent: IDWriteTextLayout1,
	using vtable: ^IDWriteTextLayout2_VTable,
}
IDWriteTextLayout2_VTable :: struct {
	using idwritetextlayout1_vtable: IDWriteTextLayout1_VTable,
	GetMetrics1: proc "system" (this: ^IDWriteTextLayout2, textMetrics: ^DWRITE_TEXT_METRICS1) -> win32.HRESULT,
	SetVerticalGlyphOrientation: proc "system" (this: ^IDWriteTextLayout2, glyphOrientation: DWRITE_VERTICAL_GLYPH_ORIENTATION) -> win32.HRESULT,
	GetVerticalGlyphOrientation: proc "system" (this: ^IDWriteTextLayout2) -> DWRITE_VERTICAL_GLYPH_ORIENTATION,
	SetLastLineWrapping: proc "system" (this: ^IDWriteTextLayout2, isLastLineWrappingEnabled: win32.BOOL) -> win32.HRESULT,
	GetLastLineWrapping: proc "system" (this: ^IDWriteTextLayout2) -> win32.BOOL,
	SetOpticalAlignment: proc "system" (this: ^IDWriteTextLayout2, opticalAlignment: DWRITE_OPTICAL_ALIGNMENT) -> win32.HRESULT,
	GetOpticalAlignment: proc "system" (this: ^IDWriteTextLayout2) -> DWRITE_OPTICAL_ALIGNMENT,
	SetFontFallback: proc "system" (this: ^IDWriteTextLayout2, fontFallback: ^IDWriteFontFallback) -> win32.HRESULT,
	GetFontFallback: proc "system" (this: ^IDWriteTextLayout2, fontFallback: ^^IDWriteFontFallback) -> win32.HRESULT,
}

IDWriteTextLayout3_UUID := &win32.IID{0x07ddcd52, 0x020e, 0x4de8, {0xac, 0x33, 0x6c, 0x95, 0x3d, 0x83, 0xf9, 0x2d}}
IDWriteTextLayout3 :: struct #raw_union {
	#subtype parent: IDWriteTextLayout2,
	using vtable: ^IDWriteTextLayout3_VTable,
}
IDWriteTextLayout3_VTable :: struct {
	using idwritetextlayout2_vtable: IDWriteTextLayout2_VTable,
	InvalidateLayout: proc "system" (this: ^IDWriteTextLayout3) -> win32.HRESULT,
	SetLineSpacing1: proc "system" (this: ^IDWriteTextLayout3, lineSpacingOptions: ^DWRITE_LINE_SPACING) -> win32.HRESULT,
	GetLineSpacing1: proc "system" (this: ^IDWriteTextLayout3, lineSpacingOptions: ^DWRITE_LINE_SPACING) -> win32.HRESULT,
	GetLineMetrics1: proc "system" (this: ^IDWriteTextLayout3, lineMetrics: ^DWRITE_LINE_METRICS1, maxLineCount: u32, actualLineCount: ^u32) -> win32.HRESULT,
}

IDWriteTextLayout4_UUID := &win32.IID{0x05a9bf42, 0x223f, 0x4441, {0xb5, 0xfb, 0x82, 0x63, 0x68, 0x5f, 0x55, 0xe9}}
IDWriteTextLayout4 :: struct #raw_union {
	#subtype parent: IDWriteTextLayout3,
	using vtable: ^IDWriteTextLayout4_VTable,
}
IDWriteTextLayout4_VTable :: struct {
	using idwritetextlayout3_vtable: IDWriteTextLayout3_VTable,
	SetFontAxisValues: proc "system" (this: ^IDWriteTextLayout4, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, textRange: DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetFontAxisValueCount: proc "system" (this: ^IDWriteTextLayout4, currentPosition: u32) -> u32,
	GetFontAxisValues: proc "system" (this: ^IDWriteTextLayout4, currentPosition: u32, fontAxisValues: ^DWRITE_FONT_AXIS_VALUE, fontAxisValueCount: u32, textRange: ^DWRITE_TEXT_RANGE) -> win32.HRESULT,
	GetAutomaticFontAxes: proc "system" (this: ^IDWriteTextLayout4) -> DWRITE_AUTOMATIC_FONT_AXES,
	SetAutomaticFontAxes: proc "system" (this: ^IDWriteTextLayout4, automaticFontAxes: DWRITE_AUTOMATIC_FONT_AXES) -> win32.HRESULT,
}

IDWriteTextRenderer_UUID := &win32.IID{0xef8a8135, 0x5cc6, 0x45fe, {0x88, 0x25, 0xc5, 0xa0, 0x72, 0x4e, 0xb8, 0x19}}
IDWriteTextRenderer :: struct #raw_union {
	#subtype parent: IDWritePixelSnapping,
	using vtable: ^IDWriteTextRenderer_VTable,
}
IDWriteTextRenderer_VTable :: struct {
	using idwritepixelsnapping_vtable: IDWritePixelSnapping_VTable,
	DrawGlyphRun: proc "system" (this: ^IDWriteTextRenderer, clientDrawingContext: rawptr, baselineOriginX: f32, baselineOriginY: f32, measuringMode: DWRITE_MEASURING_MODE, glyphRun: ^DWRITE_GLYPH_RUN, glyphRunDescription: ^DWRITE_GLYPH_RUN_DESCRIPTION, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
	DrawUnderline: proc "system" (this: ^IDWriteTextRenderer, clientDrawingContext: rawptr, baselineOriginX: f32, baselineOriginY: f32, underline: ^DWRITE_UNDERLINE, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
	DrawStrikethrough: proc "system" (this: ^IDWriteTextRenderer, clientDrawingContext: rawptr, baselineOriginX: f32, baselineOriginY: f32, strikethrough: ^DWRITE_STRIKETHROUGH, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
	DrawInlineObject: proc "system" (this: ^IDWriteTextRenderer, clientDrawingContext: rawptr, originX: f32, originY: f32, inlineObject: ^IDWriteInlineObject, isSideways: win32.BOOL, isRightToLeft: win32.BOOL, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
}

IDWriteTextRenderer1_UUID := &win32.IID{0xd3e0e934, 0x22a0, 0x427e, {0xaa, 0xe4, 0x7d, 0x95, 0x74, 0xb5, 0x9d, 0xb1}}
IDWriteTextRenderer1 :: struct #raw_union {
	#subtype parent: IDWriteTextRenderer,
	using vtable: ^IDWriteTextRenderer1_VTable,
}
IDWriteTextRenderer1_VTable :: struct {
	using idwritetextrenderer_vtable: IDWriteTextRenderer_VTable,
	DrawGlyphRun1: proc "system" (this: ^IDWriteTextRenderer1, clientDrawingContext: rawptr, baselineOriginX: f32, baselineOriginY: f32, orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, measuringMode: DWRITE_MEASURING_MODE, glyphRun: ^DWRITE_GLYPH_RUN, glyphRunDescription: ^DWRITE_GLYPH_RUN_DESCRIPTION, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
	DrawUnderline1: proc "system" (this: ^IDWriteTextRenderer1, clientDrawingContext: rawptr, baselineOriginX: f32, baselineOriginY: f32, orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, underline: ^DWRITE_UNDERLINE, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
	DrawStrikethrough1: proc "system" (this: ^IDWriteTextRenderer1, clientDrawingContext: rawptr, baselineOriginX: f32, baselineOriginY: f32, orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, strikethrough: ^DWRITE_STRIKETHROUGH, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
	DrawInlineObject1: proc "system" (this: ^IDWriteTextRenderer1, clientDrawingContext: rawptr, originX: f32, originY: f32, orientationAngle: DWRITE_GLYPH_ORIENTATION_ANGLE, inlineObject: ^IDWriteInlineObject, isSideways: win32.BOOL, isRightToLeft: win32.BOOL, clientDrawingEffect: ^win32.IUnknown) -> win32.HRESULT,
}

IDWriteTypography_UUID := &win32.IID{0x55f1112b, 0x1dc2, 0x4b3c, {0x95, 0x41, 0xf4, 0x68, 0x94, 0xed, 0x85, 0xb6}}
IDWriteTypography :: struct #raw_union {
	#subtype parent: win32.IUnknown,
	using vtable: ^IDWriteTypography_VTable,
}
IDWriteTypography_VTable :: struct {
	using iunknown_vtable: win32.IUnknown_VTable,
	AddFontFeature: proc "system" (this: ^IDWriteTypography, fontFeature: DWRITE_FONT_FEATURE) -> win32.HRESULT,
	GetFontFeatureCount: proc "system" (this: ^IDWriteTypography) -> u32,
	GetFontFeature: proc "system" (this: ^IDWriteTypography, fontFeatureIndex: u32, fontFeature: ^DWRITE_FONT_FEATURE) -> win32.HRESULT,
}
